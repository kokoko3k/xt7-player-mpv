' Gambas module file

'Copyright (C) 2007, 2008 Antonio Orefice
' Gambas module file

Public ChangedForms As New String[]
Public UncommonVideoFilters As String 
Public Videofilter As String
Public videofiltername As String 
Public UncommonAudiofilters As String
Public Audiofilter As String
Public audiofiltername As String
Public Multimediafilter As String
Public Multimediafiltername As String
Public imgfilters As String
Public Slowmedia As String 
Public NonTaggableMedia As String
Public NetworkURI As String 
'Please terminate ALLFILTERS with ";"!
Public ALLFilters As String 
Public quotes As String 
Public aboutmessage As String 
Public Alternatecolor As Integer 
Public LSyncing As Boolean 
Public LSyncingMessage As String 
Public AppName As String 
Public ConfPath As String 
Public TmpDir As String
Public CustomBindKeys As String 
Public XbindkeysBIN As String 
Public SocketFile As String 
Public mpv_size_file As String
Public mpv_allowed_options_file As String
Public rowpadding As Integer 
Public Highlightmore As Integer 
Public coverHeight As Integer 
Public initearlyformsdone As Boolean 
Public initlatelyformsdone As Boolean
Public RequiredVersion As String 
Public FirstTimeSettignsLoaded As Boolean 
Public formaperto As Boolean 
Public IsNextSelected As Boolean 
Public TranslateMeFirst As String 
'Translation is needed if the control string is untranslated and we don't use english as default language
Public TranslationNeeded As Boolean 
Public Pre As String 
Public StartFolder As String 
Public ScreenshotFolder As String 
Public CurrentProfile As String 
Public Historyfile As String
Public Bookmarksfile As String
Public ViewMenufile As String
Public FormW As Integer 
Public FormH As Integer 
Public FormX As Integer 
Public FormY As Integer 
Public FormMaximized As Boolean = False
Private SettingsFileName As String 
Public DelayLoadStates As Timer 
Public MaxHistory As Integer 'how many played files to remember
Public Max_menu_History As Integer 'how many to show in the menu
Public YPCacheFile As String 
Public wayland_warning_no_show_file As String 'The user don't want to read the warning on wayland

Public UserPlaylistsDir As String

Public arg_profile As String = "" 'cmdline argument: user wants to start with this profile
Public arg_profile_default As String = "" 'cmdline argument: user wants to start with this profile and set is as default
Public arg_file As String = "" 'cmdline argument: user wants to play this
Public arg_append As Boolean = False 'cmdline argument: the user want to append an uri to a running instance
Public arg_debug As Boolean = False 
Public arg_new_instance As Boolean = False 
Public arg_start_tray As Boolean = False
Public mpv_version As String = ""
Public YT_APIKEY As String = ""
Public initdone As Boolean = False

Public Sub init()
  'FixFormNames() 'needed with gambas 3.4.1; form names arent set by default!
  UncommonVideoFilters = "*.ts;*.m2v;*.m4v;*.mpeg;*.flv;*.gvi;*.iso;*.fli;*.flv;*.mpg;*.mpv;*.vob;*.viv;*.swf;*.rm;*.rmvb;*.dv;*.3gp;*.qt;*.divx;*.asx;*.ogm;*.ogv;*.oga;*.m4v;*.speex;*.spx;*.wavpack;*.wv;*.trueaudio;*.tta"
  Videofilter = "*.avi;*.mpg;*.mp4;*.mov;*.mkv;*.asf;*.ogm;*.ogv;*.wmv;"
  videofiltername = ("Common Video Files")
  UncommonAudiofilters = "*.wma;*.ram;*.ac3;*.wav;*.aiff;*.aiffc;*.aac;*.8svx;*.pls;*.dts;*.url"
  Audiofilter = "*.mp3;*.ogg;*.aac;*.flac;*.mpc;*.ac3;*.m4a;*.opus;" ' terminate with ";"
  audiofiltername = ("Common Audio Files")
  Multimediafilter = Videofilter & UncommonVideoFilters & Audiofilter & UncommonAudiofilters
  Multimediafiltername = ("Multimedia files")
  imgfilters = ("*.jpg;*.jpeg;*.bmp;*.png;")
  Slowmedia = "cddb:// cdda:// mms:// http:// http_proxy:// rtp:// rtsp:// ftp:// udp:// smb:// "  'we'll get tag information on user prefs
  NonTaggableMedia = "tv:// radio:// cdda:// cddb:// mf:// pvr:// dvb:// unsv:// sdp:// mpst:// tivo://"
  NetworkURI = "https:// mms:// mmst:// mmsh:// mmshttp:// hls:// httpproxy:// http:// http_proxy:// rtp:// rtmp:// rtmpe:// rtmps:// rtmpt:// rtmpte:// rtmpts:// srtp:// rtsp:// ftp:// tcp:// tls:// sftp:// udp:// ytdl://"
  UserPlaylistsDir = ".playlists"
  'Please terminate ALLFILTERS with ";"!
  'ALLFilters  '= Videofilter & ";" & AudioFilter & ";" & UncommonVideoFilters & ";" & UncommonAudiofilters
  quotes = "\""       'double quotes in strings
  aboutmessage = "\n" & "xt7-Player-mpv" & " " & Application.version & (" by Antonio Orefice.\nxt7player@gmail.com\n\nThanks to Benoît Minisini for Gambas.") & "\n\n" & "I92guboj - Spanish translation \n" & "Wackenroader - Brazilian Portuguese translation \n" & "Shimingzhou - simplified Chinese translation\n" & "Jacky Bamière - French translation\n" & "VictorR2007 - Russian Translation\n" & "SymbianFlo - Testing and 'spiritual' support\n" & "NickiNicki - Bug reports\n" 
  aboutmessage &= "'Argon-' for the nice lua stats script\n " 
  Alternatecolor = &EEEEFF&
  LSyncing = False 'is true when library is syncing.
  LSyncingMessage = ("Syncing Library, please wait...")
  AppName = "xt7-Player-mpv"
  
  ConfPath = Settings.DefaultDir & "/" & Appname
  CustomBindKeys = "Xt7BindKeys"
  XbindkeysBIN = global.confpath & "/" & CustomBindKeys
  SocketFile = global.confpath & "/.localsocket"
  rowpadding = 4 'space around every row in library and playlist
  Highlightmore = 1 'highlighted item font size addition
  coverHeight = (Desktop.H Div 17)
  initearlyformsdone = False
  initlatelyformsdone = False
  RequiredVersion = "3.3.0"
  FirstTimeSettignsLoaded = False
  formaperto = False
  IsNextSelected = True 'indica se abbiamo finito la playlist.
  TranslateMeFirst = ("Translate me first")  'act as a control string if the project is translated
  'Translation is needed if the control string is untranslated and we don't use english as default language
  TranslationNeeded = ((TranslateMeFirst = "Translate me first") And Not (System.Language Like "en_*"))
  Pre = "* "
  StartFolder = User.home  'fixme: allow to choose
  ScreenshotFolder = settings.defaultdir & "/" & Appname & "/" & ".xt7-screenshots/"
  YPCacheFile = settings.defaultdir & "/" & Appname & "/" & ".ypcachefile"
  wayland_warning_no_show_file = settings.defaultdir & "/" & Appname & "/" & ".waylandwarningfile"
  HistoryFile = settings.defaultdir & "/" & Appname & "/" & ".history.txt"
  BookmarksFile = settings.defaultdir & "/" & Appname & "/" & ".bookmarks.txt"
  ViewMenuFile = settings.defaultdir & "/" & Appname & "/" & ".viewmenu.txt"
  mpv_size_file = settings.defaultdir & "/" & Appname & "/" & ".mpv.size.txt"
  mpv_allowed_options_file = settings.defaultdir & "/" & Appname & "/" & ".mpv.allowed_options.txt"
  CurrentProfile = ""
  FormW = 400      'As gambas does not update form dimesions on fullscreen switch
  FormH = 300      'we have TO DO it manually
  FormX = 0
  FormY = 0
  SettingsFileName = "default"
  MaxHistory = 100
  Max_menu_History = 15
  DelayLoadStates = New Timer As "DelayLoadStates"
  TmpDir = File.Dir(Temp())
  initdone = True
End

Public Function urlencode(strin As String) As String
        Dim strout As String
        Dim i As Integer
        Dim a As Integer
        Dim c As String
        For i = 1 To Len(strin)
                c = Lower(Mid(strin, i, 1))
                If Not ((c Like "[1-10]") Or (c Like "[a-z]")) Then
                   a = Asc(c)
                   strout = strout & "%" & Hex$(a, 2)
                Else
                   strout = strout & Mid(strin, i, 1)
                Endif
        Next
        Return strout
End

Public Sub myDebug(Optional a As String = "", Optional b As String = "", Optional c As String = "", Optional d As String = "", Optional e As String = "", Optional f As String = "", Optional g As String = "", Optional h As String = "", Optional i As String = "", Optional j As String = "")
  Dim Caller As String = "Unknown caller"
  If Not arg_debug Then Return
  Try caller = System.Backtrace[1]
  Print caller & ": " & a, b, c, d, e, f, g, h, i, j
  'Print 
End

Public Function find_term() As String
  Dim terms As String[] = ["konsole", "gnome-terminal", "xfce4-terminal", "lxterminal", "xterm"]
  Dim term As String
  For Each term In terms
    myDebug("checking for " & term & "...")
    If System.Exist(term) Then 
      Debug "found."
      Return System.Find(term)
    Endif
  Next
  Return ""
End

Public Function terminal_cmdline(terminal_emulator As String, cmdline As String) As String
  Return terminal_emulator & " -e " & "\"" & "sh -c ' " & cmdline & "; echo; echo  Press enter to exit ; read ' \""
End


Public Function proxyfromenv() As String

  If Application.Env["https_proxy"] <> "" Then Return Application.Env["https_proxy"]
  If Application.Env["http_proxy"] <> "" Then Return Application.Env["http_proxy"]
  Return ""
End

Public Function SavedProfileChanged() As Boolean
  'return if one of the forms has been saved with some exclusions
  Try ChangedForms.Remove(ChangedForms.Find("FMain"))
  Try ChangedForms.Remove(ChangedForms.Find("Searchfields"))
  Return ChangedForms.count > 0
End


Public Function makeN(number As String, digits As Integer) As String

  If Len(number) < digits Then
    Repeat
      number = "0" & number
    Until Len(number) = digits
  Endif
  Return number

End

Public Function NeedTreeViewWorkaround() As Boolean
  Dim UserVersion, UserMajor, UserMinor, RequiredMajor, RequiredMinor, Userminiminor, requiredminiminor As String
  Dim Required As String = "3.4.0" 'starting from 3.4.0 treeviews autoexpands when have new children.
  Dim cfruser, cfrrequired As Long
  UserVersion = System.fullversion
  RequiredMajor = makeN(Split(Required, ".")[0], 5)
  RequiredMinor = makeN(Split(Required, ".")[1], 5)
  RequiredMiniminor = makeN(Split(Required, ".")[2], 5)
  UserMajor = makeN(Split(UserVersion, ".")[0], 5)
  UserMinor = makeN(Split(UserVersion, ".")[1], 5)
  Userminiminor = makeN(Trim(Split(UserVersion, ".")[2]), 5)
  Try cfruser = UserMajor & UserMinor & Userminiminor
  If Error Then Return
  Try cfrrequired = RequiredMajor & RequiredMinor & RequiredMiniminor
  If Error Then Return
  If cfruser >= cfrrequired Then Return True
End

Public Function NeedNetLocal() As Boolean
  Dim UserVersion, UserMajor, UserMinor, RequiredMajor, RequiredMinor, Userminiminor, requiredminiminor As String
  Dim Required As String = "3.19.0" 'starting from 3.19.0 sock connect method for local connections 
                                    'requires just an argument
  Dim cfruser, cfrrequired As Long
  UserVersion = System.fullversion
  RequiredMajor = makeN(Split(Required, ".")[0], 5)
  RequiredMinor = makeN(Split(Required, ".")[1], 5)
  RequiredMiniminor = makeN(Split(Required, ".")[2], 5)
  UserMajor = makeN(Split(UserVersion, ".")[0], 5)
  UserMinor = makeN(Split(UserVersion, ".")[1], 5)
  Userminiminor = makeN(Trim(Split(UserVersion, ".")[2]), 5)
  Try cfruser = UserMajor & UserMinor & Userminiminor
  If Error Then Return
  Try cfrrequired = RequiredMajor & RequiredMinor & RequiredMiniminor
  If Error Then Return
  If cfruser < cfrrequired Then Return True
End

Public Function Center(F1 As Form, F2 As Form)
  'Center F2 in F1
  F2.x = F1.screenx + (f1.w / 2) - (F2.w / 2)
  F2.y = F1.screeny + (f1.h / 2) - (F2.h / 2)
End

Public Sub CenterObj(parent As Object, child As Object)
  'Center O2 in O1,
  'O2 is child of O1

  child.x = (parent.x + (parent.w / 2) - (child.w / 2))
  child.y = (parent.y + (parent.h / 2) - (child.h / 2))
End

Public Function fixfilename(filename As String) As String
  'make a filename more bash friendly...
  Dim out As String
  Dim cod As Integer
  Dim i As Integer
  
  For i = 1 To Len(filename) 
    cod = Asc(filename, i)
    If (cod < 32) Or (cod > 126) Then
      out &= "_"
        Else
      out &= Mid(filename, i, 1) 
    Endif
  Next
  
  out = Replace(out, "/", "_")
  out = Replace(out, "&", "_")
  out = Replace(out, "*", "_")
  out = Replace(out, "?", "_")
  out = Replace(out, Chr(92), "_") 'backslash \
  out = Replace(out, "@", "_")
  out = Replace(out, "(", "_")
  out = Replace(out, ")", "_")
  out = Replace(out, "[", "_")
  out = Replace(out, "]", "_")
  Return out
  
End


Public Function UriPrefix(Uri As String) As String
  If uri Like "*://*" Then
    'find ":" and return 2 characters more
    Return Left(URI, InStr(URI, ":") + 2)
      Else
    Return ""
  Endif
End



Public Function IsNontaggableMedia(URI As String) As Boolean
  If (InStr(NonTaggableMedia, Lower(UriPrefix(URI))) > 0) Then
    Return True
      Else
    Return False
  Endif
End

Public Function isytdl(URI As String) As Boolean
  Return (InStr(Lower(uri), "ytdl://") = 1) 
End


Public Function IsNetworkURI(URI As String) As Boolean
  If (InStr(NetworkURI, Lower(UriPrefix(URI))) > 0) Then
    Return True
      Else
    Return False
  Endif
End

Public Function IsCddb(URI As String) As Boolean
    Return (Lower(uri) Like "cddb://*")
End
Public Function IsCdda(URI As String) As Boolean
    Return (Lower(uri) Like "cdda://*")
End
Public Function IsCdaudio(URI As String) As Boolean
    Return (Lower(uri) Like "cdd?://*") Or (Lower(uri) Like "cdd?://") 
End

Public Sub AddUserExtensions(exts As String)
  Dim curext As String
  Dim returnexts As String = ""
  ALLFilters = Videofilter & ";" & AudioFilter & ";" & UncommonVideoFilters & ";" & UncommonAudiofilters
  For Each curext In Split(exts, ",", "", True)
    If Trim(curext) <> "" Then returnexts = returnexts & "*." & Trim(curext) & ";"
  Next 'curext
  If Trim(returnexts) <> "" Then
    If Right(ALLFILTERS) <> ";" Then ALLFILTERS &= ";"
    ALLFilters = ALLFilters & returnexts
  Endif
  global.myDebug(allfilters)
End



Public Function IsMediaFile(filename As String) As Boolean
'will return true if filename extension is in audiofilter or videofilter
  Dim fileExt As String = "." & File.Ext(filename)
  If (fileext = ".") Then Return False
  If (InStr(Upper(ALLFilters), Upper(fileExt & ";")) > 0) Then
    Return True
      Else
    Return False
  Endif
End

Public Function IsPlaylist(filename As String) As Boolean
  Dim lfilename As String = Lower(filename)
  If ((lfilename Like "*.pls") Or (lfilename Like "*.pls\\?*")) Then Return True
  If ((lfilename Like "*.url") Or (lfilename Like "*.url\\?*")) Then Return True
  If ((lfilename Like "*.m3u") Or (lfilename Like "*.m3u\\?*")) Then Return True
  If ((lfilename Like "*.asx") Or (lfilename Like "*.asx\\?*")) Then Return True
  If ((lfilename Like "*.wax") Or (lfilename Like "*.wax\\?*")) Then Return True
  If ((lfilename Like "*.wvx") Or (lfilename Like "*.wvx\\?*")) Then Return True
  If ((lfilename Like "*.ram") Or (lfilename Like "*.ram\\?*")) Then Return True
  If ((lfilename Like "*.b4s") Or (lfilename Like "*.b4s\\?*")) Then Return True
  Return False
End





Public Function IsAudioFile(filename As String) As Boolean
'will return true if filename extension is in audio one

  Dim fileExt As String = "." & File.Ext(filename)
  Dim FilterList As String = UncommonAudiofilters & ";" & Audiofilter
  If fileext = "." Then Return False
  If (InStr(Upper(FilterList), Upper(fileExt & ";")) > 0) Then
    Return True
      Else
    Return False
  Endif
End
Public Function IsImgFile(filename As String) As Boolean
'will return true if filename extension is in audio one
  Dim fileExt As String = "." & File.Ext(filename)
  Dim FilterList As String = imgfilters
  If fileext = "." Then Return False
  If (InStr(Upper(FilterList), Upper(fileExt & ";")) > 0) Then
    Return True
      Else
    Return False
  Endif
End
Public Function IsVideoFile(filename As String) As Boolean
'will return true if filename extension is in audiofilter or videofilter
  Dim fileExt As String = "." & File.Ext(filename)
  Dim FilterList As String = UncommonVideofilters & ";" & Videofilter
  If fileext = "." Then Return False
  If (InStr(Upper(FilterList), Upper(fileExt & ";")) > 0) Then
    Return True
      Else
    Return False
  Endif
End

Public Function IsDVBuri(filename As String) As Boolean
'will return true if filename like dvb//
 Return Lower(filename) Like "dvb://*"
End




Public Function NoFileSuffix(Myfilename As String) As String
  If Myfilename Like "file://*" Then
    Return Mid(MyfileName, 8)
      Else
    Return Myfilename
  Endif
End



Public Function GetTotalFiles(dragdata As String, FromDesktop As Boolean) As Integer
  Dim droppedfiles As String[]
  Dim DroppedFile As String
  Dim total As Integer = 0
  Dim subtotal As String = 0

  droppedfiles = Split(dragdata, "\n\r", "", True)
  For Each DroppedFile In Droppedfiles
    If FromDesktop Then
      droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))
        Else
      droppedfile = Global.NoFileSuffix(Global.FormatDrag(droppedfile))
    Endif

    Shell "ls -LR1 " & Shell$(DroppedFile) & " |grep \\. |sort -u |wc -l" Wait To subtotal
    total = total + CInt(Trim(subtotal))
  Next
  Return total
End



Public Sub SaveMandatorySettings(Profilename As String, Optional with_grids As Boolean = True) 
  Dim MySettings As New SettingsClass

  MySettings.Save(Fmain, global.confpath & "/" & Profilename)
  MySettings.Save(SearchFields, global.confpath & "/" & Profilename)
  GeneralOptions.SaveWatchDir(global.confpath & "/" & Profilename)
  GeneralOptions.SaveExcludeDir(global.confpath & "/" & Profilename)

  ComboHistory.AddHistory(FMain.Searchfield, FMain.Searchfield.text)
  ComboHistory.AddHistory(FMain.SearchfieldPLS, FMain.SearchfieldPLS.text)
  ComboHistory.AddHistory(FMain.Searchfieldalbums, FMain.Searchfieldalbums.text)
  ComboHistory.AddHistory(FMain.Searchfielddvb, FMain.Searchfielddvb.text)
  ComboHistory.AddHistory(FMain.youSearchfield, FMain.youSearchfield.text)
  ComboHistory.addhistory(Fmain.Urlbox, Fmain.Urlbox.text)

  ComboHistory.SaveHistory(Fmain.Searchfield, Global.confpath & "/" & ProfileName)
  ComboHistory.SaveHistory(Fmain.SearchfieldPLS, Global.confpath & "/" & ProfileName)
  ComboHistory.SaveHistory(Fmain.Searchfielddvb, Global.confpath & "/" & ProfileName)
  ComboHistory.SaveHistory(Fmain.Searchfieldalbums, Global.confpath & "/" & ProfileName)
  ComboHistory.SaveHistory(Fmain.Urlbox, Global.confpath & "/" & ProfileName)
  ComboHistory.SaveHistory(Fmain.youSearchfield, Global.confpath & "/" & ProfileName)
  
  If with_grids Then
    'library and playlist are profile indipendant
    fmain.MyLibrary.Save(fmain.LibraryGrid, global.confpath)
    fmain.MyPlaylist.Save(fmain.PlaylistGrid, global.confpath)
    fmain.MyDVBTList.Save(Fmain.dvbtgrid, global.confpath)
    Try fmain.mypodcast.SavePods(global.confpath & "/mypods.txt", fmain.PodcastTree)
    Try covermanager.flushUncoveredFile()
  Endif

  global.myDebug("Mandatory settings saved")

End



Public Sub SaveAllSettings(ProfileName As String, Optional with_grids As Boolean = True)
  Dim MySettings As New SettingsClass

  SaveMandatorySettings(Profilename, with_grids)

  NewChains.FirstLoadIfNeeded()
  SubAndOsd.FirstLoadIfNeeded()
  GeneralOptions.FirstLoadIfNeeded()
  VideoEqualizer.FirstLoadIfNeeded()
  HotKeys.FirstLoadIfNeeded()

  MySettings.Save(NewChains, Global.confpath & "/" & ProfileName)
  MySettings.Save(SubAndOsd, Global.confpath & "/" & ProfileName)
  MySettings.Save(GeneralOptions, Global.confpath & "/" & ProfileName)
  MySettings.Save(VideoEqualizer, Global.ConfPath & "/" & ProfileName)
  HotKeys.SaveHotKeys(Global.confpath & "/" & ProfileName)

  save_cached_options(ProfileName)
End


Public Function exist_cached_options(profilename As String) As Boolean
  Dim cached_options_file_name As String = global.confpath & "/" & profilename & ".cached"
  Return Exist(cached_options_file_name, True)
End

Public Function discard_cached_options(profilename As String) As Boolean
  Dim cached_options_file_name As String = global.confpath & "/" & profilename & ".cached"
  If Exist(cached_options_file_name, True) Then
    Kill cached_options_file_name
  Endif
End


Public Function get_cached_options(profilename As String) As Collection
  Dim cached_options_file_name As String = global.confpath & "/" & profilename & ".cached"
  Dim out As New Collection
  Dim l, opt, data As String
  
  If Not Exist(cached_options_file_name, True) Then Return Null
  
  For Each l In Split(File.Load(cached_options_file_name), "\n", "", True)
    If l Like "*=*" Then 
      opt = Left(l, InStr(l, "=") - 1)
      data = Right(l, Len(l) - Len(opt) - 1)
      If data = "" Then data = Chr(8)
      out[opt] = data
        Else
      out[l] = Chr(8)
    Endif
  Next
  Return out
End


Public Struct MpvOption
  name As String
  data As String
End Struct

Public Sub save_cached_options(ProfileName As String)
  'save mpv options in a profile format compatible with mpv
  Dim cached_file_name As String = global.confpath & "/" & Profilename & ".cached"
  Dim cached_data, data, sFilter, sSpaces As String
  Dim driver_opts As MpvOption[]
  Dim opt As MpvOption
  

  If Not Exist(global.confpath, True) Then 
    global.myDebug("Configuration directory not found; something is going VERY wrong.")
    Return
  Endif

    NewChains.FirstLoadIfNeeded()

    driver_opts = NewChains.parse_drivers(False)

    If driver_opts <> Null Then
      For Each opt In driver_opts
        cached_data &= opt.name & "=" & opt.data & "\n"
      Next
      driver_opts.Clear
    Endif

    driver_opts = NewChains.parse_drivers(True)
    If driver_opts <> Null Then
      For Each opt In driver_opts
        cached_data &= opt.name & "=" & opt.data & "\n"
      Next
    Endif

    'data = NewChains.parse_filters(False)
    sSpaces = ""
    For Each sFilter In NewChains.parse_filters(False)
        sSpaces &= " "
        If Trim(sFilter) <> "" Then cached_data &= sSpaces & "vf-add=" & sFilter & "\n"
    Next
    sSpaces = ""
    For Each sFilter In NewChains.parse_filters(True)
        sSpaces &= " "
        If Trim(sFilter) <> "" Then cached_data &= sSpaces & "af-add=" & sFilter & "\n"
    Next
    
    'If data <> "" Then cached_data &= "vf-add=" & data & "\n"
    'data = NewChains.parse_filters(True)
    'If data <> "" Then cached_data &= "af-add=" & data & "\n"
    File.Save(cached_file_name, cached_data)
End


Public Sub LoadEarlySettings(ProfileName As String)
  Dim MySettings As New SettingsClass
  MySettings.Load(Fmain, Global.confpath & "/" & ProfileName)
  MySettings.Load(GeneralOptions, Global.confpath & "/" & ProfileName) '<--- rallenta l'avvio
  MySettings.Load(Searchfields, Global.confpath & "/" & ProfileName)
  SettingsFileName = ProfileName
  MySettings.Load(VideoEqualizer, Global.confpath & "/" & SettingsFileName)
  AddUserExtensions(GeneralOptions.KnownExtensions.text)
End



Public Sub LoadAllSettings(ProfileName As String) 'THIS Is PROBABLY BROKEN
  Dim MySettings As New SettingsClass
  MySettings.Load(Fmain, Global.confpath & "/" & ProfileName)
  MySettings.Load(GeneralOptions, Global.confpath & "/" & ProfileName)
  
  SettingsFileName = ProfileName
  DelayLoadStates_Timer()
  AddUserExtensions(GeneralOptions.KnownExtensions.text)
  MySettings.Load(VideoEqualizer, Global.confpath & "/" & SettingsFileName)
End

Public Sub ReallyLoadAllSettings()
  Dim MySettings As New SettingsClass
  Dim MyForms As New Object[]
  Dim TheForm As Object
  Dim WasVisible As Boolean = False
  global.myDebug("Start at: " & Time)
  global.myDebug("")
  Try fmain.mouse = Mouse.wait
  If (Not global.initearlyformsdone) Then
    fmain.InitEarlyForms()
  Endif
  MyForms.Add(NewChains)
  ' MyForms.Add(XConfigureAudioDriver)
  ' MyForms.Add(XConfigureVideoDriver)
  
  MyForms.Add(SubAndOsd)
  MyForms.Add(GeneralOptions)
  MyForms.Add(VideoEqualizer) 

  For Each TheForm In MyForms
    WasVisible = TheForm.visible
    TheForm.hide
    MySettings.Load(TheForm, Global.confpath & "/" & CurrentProfile) 'was wrongly an outdated settingsfilename
                                                                     'this bug flawed the reload profile function
    TheForm.visible = WasVisible
  Next
  Try fmain.mouse = Mouse.default
  global.myDebug("Ends at: " & Time)
  global.myDebug("")
End





Public Sub DelayLoadStates_Timer()
  Dim MySettings As New SettingsClass
  Dim MyForms As New Object[]
  Dim TheForm As Object
  Dim WasVisible As Boolean = False
  
  global.myDebug("Start at: " & Time)

  Try fmain.mouse = Mouse.wait
  If Not (fmain.visible Or Fmain.Closing) Then
    global.myDebug("Waiting...")
    Return
  Endif
  DelayLoadStates.Stop
  If (Not global.initearlyformsdone) Then
    fmain.InitEarlyForms()
  Endif
  
  If Not NewChains.AlreadyLoaded Then MyForms.Add(NewChains)
  ' If Not XConfigureAudioDriver.AlreadyLoaded Then MyForms.Add(XConfigureAudioDriver)
  ' If Not XConfigureVideoDriver.AlreadyLoaded Then MyForms.Add(XConfigureVideoDriver)
  If Not SubAndOsd.AlreadyLoaded Then MyForms.Add(SubAndOsd)
  If Not GeneralOptions.AlreadyLoaded Then MyForms.Add(GeneralOptions)  'viene caricato in allinit_pre, perchè è necessario anche qui? sembra che non carichi le relative impostazioni...
  'searchfields is an early form... MyForms.Add(SearchFields) 
  ' If Not VideoEqualizer.AlreadyLoaded Then MyForms.Add(VideoEqualizer) credo serva solo in fase di play, quindi lo faccio lì

  For Each TheForm In MyForms
    WasVisible = TheForm.visible
    TheForm.hide

    MySettings.Load(TheForm, Global.confpath & "/" & SettingsFileName)
    TheForm.visible = WasVisible
  Next
  FirstTimeSettignsLoaded = True
  initlatelyformsdone = True
  Try fmain.mouse = Mouse.default
  global.myDebug("Ends at: " & Time)
End


Public Function FormatDrag(mystring As String) As String
'will replace %00..%FF occurrences in a string with ascii characters
'it is useful for dragged text in url/like format
  Dim Hcode As String
  Dim Char As String
  Dim i As Integer = 1
  Dim ReturnString As String
  
  ReturnString = MyString
  While i <= Len(ReturnString) - 2 'LAST two characters are useless
    If Mid(ReturnString, i, 1) = "%" Then
      Hcode = Mid(ReturnString, i + 1, 2)
      Try char = Chr(Val("&H" & Hcode & "&")) 'fixme, why "TRY" is needed on kubuntu/kde4.1?
      
      'If IsAscii(char) Then
        ReturnString = Replace(ReturnString, "%" & Hcode, char)
      'Endif
    Endif
    i = i + 1
  Wend
  
  'we have a problem with gnome here, it adds "\r" at the end of filename
  If Trim(returnstring) <> "" Then
    If Right(returnstring, 1) = "\r" Then
      returnstring = Left(returnstring, Len(returnstring) - 1)
      ''Replace(returnstring, "\r", "")
    Endif
  Endif
  Return ReturnString
End




'/ SaveLoad All -----------------------







Public Sub FilterListFromTab(TheTabStrip As Tabstrip, FilterList As Listbox)
  'find the current tab caption in the filter list
  Dim i As Integer = 0
  Dim UpperTabCaption As String
  UpperTabCaption = Upper(Replace(TheTabStrip.text, "&", ""))
    For i = 0 To FilterList.count - 1
      If (Upper(FilterList.List[i]) = UpperTabCaption) Or (Upper(FilterList.List[i]) = pre & UpperTabCaption) Then
        FilterList.index = i
        FilterList.Refresh
        Break
      Endif
    Next 'i
End



Public Function RemoveShortcut(Tmpstring As String) As String
  '&AText -> Atext
  Return Replace(TmpString, "&", "")
End


Public Function TabIndexByName(TabName As String, TheTabStrip As Tabstrip) As Integer
Dim i As Integer
Dim UPTabName As String
Dim theobject As Object
      UPTABName = Upper(TabName)
      If UPTABNAME = "MYEXPAND" Then UPTABName = "EXPAND" 'gb3 workaround
        For i = 0 To TheTabStrip.count - 1
          If (UPTABName = Upper(RemoveShortCut(TheTabStrip[i].text))) Or (UPTABName = pre & Upper(RemoveShortCut(TheTabStrip[i].text))) Then Return i
          For Each theobject In TheTabStrip[i].Children
            If theobject Is Scrollview Then
              If (Upper(theobject.tag) = upTabName) Then Return i
                Else
              If theobject Is Label And theobject.name Like "NOPARSETAB*" Then

                If (Upper(theobject.tag) = upTabName) Then Return i
              Endif
            Endif
          Next 'theobject
        Next 'i
      
      'try to find the tab in a different way too:
      'TabIndexByName scrollview
      'for each theobject in TheTabStrip.
      
      'return -1 if no tab is found
      Return -1
End

Public Sub DrawGui(TheParameters As Variant[], TabCaption As String, TheTabstrip As Tabstrip, Switchable As Boolean, Optional TheTooltip As String = "", Optional helper As Button, Optional tag As String = "", Optional attach_to As Object = Me)
  
  ' TabstripS
  '     Tabstrip
  '         MyScrollview
  '                   AnHbox
  '                       [if switchable => Checkbox, else Label] - Object - CommentLabel
  '                   AnHbox
  '                       [if switchable => Checkbox, else Label] - Object - CommentLabel
  '                   ...
  '                   ...  
  '                   AnHbox
  '                       [if switchable => Checkbox, else Label] - Object - CommentLabel  
  '
  
  Dim MyScrollView As Object
  Dim AnHBOX As Hbox
  Dim AComboBox As Combobox
  Dim ACheckBox As CheckBox
  Dim ATextBox As Textbox
  Dim ATextLabel As TextLabel
  Dim AButton As Button
  Dim ALabel, AComment, aTitle As Label
  Dim i As Integer
  Dim f As Float
  Dim ASpinBox As Spinbox
  Dim AFloatSpinBox As FloatSpinBox
  Dim CurrentParams As String[]
  Dim MyVslider As VSlider
  Dim MyReq As StringFileReqClass
  Dim ResetDefault As Myresetbutton
  Dim asep As Separator
  Dim tipimage As Picturebox
  Dim max_obj_w As Integer = 0  'used to make labels
  Dim l As Integer                 'of the same width
  Dim align_objs As New Object[]        '
  Dim o As Object
  Dim checkbox_no_text_width As Integer
  Dim error_test As Boolean = False
  Dim j As Integer

  'find the width of an empty checkbox
  alabel = New Label(zzzfake)
  alabel.text = "sometext"
  alabel.autoresize = True
  
  acheckbox = New CheckBox(zzzFake)
  acheckbox.text = "sometext"
  acheckbox.autoresize = True
  'it seems that "*3*" is the key, but the right thing to do is:
  'get the width of "[x] sometext", get the width of "sometext"; subtract the latter from the former.
  checkbox_no_text_width = acheckbox.w - alabel.w 'acheckbox.w * 3.1 
  acheckbox.Delete
  alabel.delete
  
  'Find the destination Tab
   TheTabstrip.index = TabIndexByName(TabCaption, TheTabStrip)
  'Find the Scrollview 
  For Each MyScrollview In TheTabstrip.Children
    If MyScrollview Is Scrollview Then 
      myscrollview.tag = tag
      Break
    Endif
  Next

  For Each CurrentParams In TheParameters
    If CurrentParams[0] = "TITLE" Then 'Let's Draw a readonly TextBox
      AnHbox = New HBox(myscrollview) As "dynaobj"
      Object.Attach(AnHbox, Attach_to, "dynaobj")
      AnHbox.name = CurrentParams[CurrentParams.count - 2] & ".NoparseBox"
      AnHbox.spacing = True
      AnHBOX.height = AnHBOX.Font.textHeight("|") * 2

      aTitle = New Label(AnHbox) As "dynaobj"
      Object.Attach(aTitle, Attach_to, "dynaobj")
      aTitle.name = "NOPARSE" & CurrentParams[CurrentParams.count - 2] & ".CommentLabel"
      aTitle.text = CurrentParams[1]
      aTitle.Font.bold = True
      aTitle.Foreground = Color.black 'Color.Lighter(Color.TextForeground)
      aTitle.background = Color.white
      aTitle.expand = True
      aTitle.Alignment = Align.center
      aTitle.border = Border.Plain
      asep = New Separator(myscrollview)
      Goto prossimo
    Endif
    
    If CurrentParams[0] = "TIP" Then 'image + label
         asep = New Separator(myscrollview)
         AnHbox = New HBox(myscrollview) As "dynaobj"
         Object.Attach(AnHbox, Attach_to, "dynaobj")
         AnHbox.name = CurrentParams[CurrentParams.count - 2] & ".NoparseBox"
         AnHBOX.height = AnHBOX.Font.textHeight("|") * 2
         AnHbox.spacing = True
         tipimage = New PictureBox(AnHbox)
         tipimage.Picture = picture["icon:/medium/warning"]
         tipimage.stretch = False
         tipimage.w = tipimage.Picture.Image.w
         tipimage.h = tipimage.Picture.Image.w
         'AnHbox.width = 400
         aTitle = New Label(AnHbox) As "dynaobj"
         Object.Attach(aTitle, Attach_to, "dynaobj")
         aTitle.name = "NOPARSE" & CurrentParams[CurrentParams.count - 2] & ".CommentLabel"
         aTitle.text = CurrentParams[1]
         aTitle.Font.italic = True
         anhbox.Foreground = Color.TooltipForeground 'Color.Lighter(Color.TextForeground)
         anhbox.background = Color.TooltipBackground
         anhbox.margin = True
         aTitle.expand = True
         aTitle.Alignment = Align.Left
         aTitle.border = Border.None
         AnHBOX.height = tipimage.Picture.h + (Desktop.scale * 2)

         Goto prossimo
       Endif
    'Write the comment
    If CurrentParams[CurrentParams.Count - 1] <> "" Then
        AComment = New Label(myscrollview) As "dynaobj"
        Object.Attach(AComment, Attach_to, "dynaobj")
        AComment.name = "NOPARSE" & CurrentParams[CurrentParams.count - 2] & ".CommentLabel"
        AComment.text = CurrentParams[CurrentParams.Count - 1]
        AComment.AutoResize = True
        AComment.font = TheTabStrip.font
        AComment.font.italic = True
        AComment.Foreground = Color.Lighter(Color.TextForeground)
        AComment.Alignment = Align.Bottomleft
    Endif

    If Not (CurrentParams[0] = "VSLIDER") Then
     'Make a subcontainer, child of the scrollview
      AnHbox = New HBox(myscrollview) As "dynaobj"
      Object.Attach(AnHbox, Attach_to, "dynaobj")
      AnHbox.name = CurrentParams[CurrentParams.count - 2] & ".HBox"
      AnHBOX.height = AnHBOX.Font.textHeight("|") * 2
      AnHbox.spacing = True
      If TheTooltip <> "" Then AnHbox.Tooltip = TheTooltip
        Else
      MyScrollView.Arrangement = Arrange.LeftRight 'With Vslider we must arrange horizontally
      MyScrollView.spacing = 2
      AnHbox = New VBox(myscrollview) As "dynaobj"
      Object.Attach(AnHbox, Attach_to, "dynaobj")
      AnHbox.name = CurrentParams[CurrentParams.count - 2] & ".HBox"
      AnHBOX.Width = FMain.Font.TextWidth("31.25")
      AnHBOX.Height = 200
      AnHBOX.Spacing = 8
    Endif

    'Let's Draw The Label
    If Not ((CurrentParams[0] = "SWITCH") Or (CurrentParams[0] = "SUBLABEL") Or (CurrentParams[0] = "COMMENT")) Then
      If (Not Switchable) Then
        ALabel = New Label(AnHBox) As "dynaobj"
        Object.Attach(alabel, Attach_to, "dynaobj")
        ALabel.name = CurrentParams[CurrentParams.count - 2] & ".Label"
        ALabel.text = CurrentParams[1]
        l = alabel.Font.TextWidth(alabel.text)
        If l > max_obj_w Then max_obj_w = l
        align_objs.Add(alabel)
        ALabel.font = TheTabStrip.font
        ALabel.Foreground = Color.TextForeground
          Else
        ACheckbox = New Checkbox(AnHBox) As "dynaobj"
        Object.Attach(acheckbox, Attach_to, "dynaobj")
        ACheckbox.Name = CurrentParams[CurrentParams.Count - 2] & ".CheckBox"
        ACheckbox.text = CurrentParams[1]
        l = ACheckBox.Font.TextWidth(ACheckBox.text) + checkbox_no_text_width
        If l > max_obj_w Then max_obj_w = l
          align_objs.Add(ACheckBox)
      Endif
    Endif

    'Next, we'll parse the Parameter DataType 
    'Syntax for TheParameters is:["FREE", caption, default, Textbox name, comment]
    If CurrentParams[0] = "FREE" Then 'Let's Draw a TextBox
      'AnHBOX.padding = 3
      ATextBox = New TextBox(AnHBox) As "dynaobj"
      Object.Attach(ATextBox, Attach_to, "dynaobj")
      ATextBox.name = CurrentParams[CurrentParams.count - 2] & ".TextBox"
      ATextBox.text = CurrentParams[2]
      ATextBox.expand = True
      ATextBox.refresh
    Else If CurrentParams[0] = "ROSTRING" Then 'Let's Draw a readonly TextBox
      'AnHBOX.padding = 3
      ATextBox = New TextBox(AnHBox) As "dynaobj"
      Object.Attach(ATextBox, Attach_to, "dynaobj")
      ATextBox.name = CurrentParams[CurrentParams.count - 2] & ".TextBox"
      ATextBox.text = CurrentParams[2]
      ATextBox.ReadOnly = True
      ATextBox.expand = True
      ATextBox.refresh
    'Syntax for TheParameters is:["SUBLABEL", caption(SubFilterName), TextLabel name ,comment]
    Else If CurrentParams[0] = "SUBLABEL" Then 'Let's Draw a Textlabel
      'AnHBOX.padding = 3
      Atextlabel = New TextLabel(AnHBOX) As "dynaobj"
      Object.Attach(ATextlabel, Attach_to, "dynaobj")
      ATextLabel.Alignment = Align.left
      AtextLabel.name = CurrentParams[CurrentParams.count - 2] & ".textlabel"
      ATextLabel.text = CurrentParams[1]
      'ATextLabel.tag = CurrentParams[2]
      ' [GB2:FNTW] ATextLabel.w = Atextlabel.Font.TextWidth(CurrentParams[1])
      ATextLabel.w = Atextlabel.Font.TextWidth(CurrentParams[1])
      AtextLabel.refresh
    Else If CurrentParams[0] = "CHOOSE" Then       'Let's Draw a ComboBox
    'Syntax for TheParameters is: ["CHOOSE", Caption, Choice1,...., ChoiceN, CheckBoxName,Comment]
      AComboBox = New ComboBox(AnHBox) As "dynaobj"
      Object.Attach(Acombobox, Attach_to, "dynaobj")
      AComboBox.refresh
      AComboBox.name = CurrentParams[CurrentParams.count - 2] & ".ComboBox"
      For i = 2 To CurrentParams.count - 3
        AComboBox.Add(CurrentParams[i])
        'Resize(AcomboBox)
      Next 'i
      AComboBox.text = CurrentParams[2]
      AComboBox.expand = True

      ResetDefault = New MyresetButton(AnHBOX) As "dynaobj"
      Object.Attach(ResetDefault, Attach_to, "dynaobj")
      ResetDefault.name = "NOPARSE" & CurrentParams[CurrentParams.Count - 2] & ".toolbutton"
      ResetDefault.tag = CurrentParams[2]

    Else If CurrentParams[0] = "ROCHOOSE" Then       'Let's Draw a readonky ComboBox
    'Syntax for TheParameters is: ["CHOOSE", Caption, Choice1,...., ChoiceN, CheckBoxName,Comment]
      AComboBox = New ComboBox(AnHBox) As "dynaobj"
      Object.Attach(Acombobox, Attach_to, "dynaobj")
      AComboBox.refresh
      AComboBox.name = CurrentParams[CurrentParams.count - 2] & ".ComboBox"

      For i = 2 To CurrentParams.count - 3
        AComboBox.Add(CurrentParams[i])
        'Resize(AcomboBox)
      Next 'i
      AComboBox.ReadOnly = True
      AComboBox.text = CurrentParams[2]
      AComboBox.expand = True

      ResetDefault = New MyresetButton(AnHBOX) As "dynaobj"
      Object.Attach(ResetDefault, Attach_to, "dynaobj")
      ResetDefault.name = "NOPARSE" & CurrentParams[CurrentParams.Count - 2] & ".toolbutton"
      ResetDefault.tag = CurrentParams[2]

'AllParams.Add(["VSLIDER", "31", "-12", "0", "12", "Equalizer1", ""])
'                    0       1     2     3    4        5          6

    Else If CurrentParams[0] = "VSLIDER" Then 'Let's Draw a SpinBox
      'Syntax for TheParameters is: ["VSLIDER", Caption, Min, Default , Max, VsliderName,Comment]

      MyVslider = New VSlider(AnHBox) As "dynaobj"
      Object.Attach(MyVslider, Attach_to, "dynaobj")
      MyVslider.Arrangement = Arrange.Vertical
      MyVslider.Name = CurrentParams[CurrentParams.Count - 2] & ".Vslider"

      i = CurrentParams[2]
      MyVslider.MinValue = i
      i = CurrentParams[4]
      MyVslider.MaxValue = i
      i = CurrentParams[3]
      MyVslider.Value = i
      MyVslider.Sstep = 1
      MyVslider.PageStep = 1
      MyVslider.expand = True
      AnHBOX.spacing = 0

    Else If CurrentParams[0] = "RANGE" Then 'Let's Draw a SpinBox
      'Syntax for TheParameters is: ["RANGE", Caption, Min, Default , Max, SpinBoxName,Comment]

      ASpinBox = New Spinbox(AnHBox) As "dynaobj"
      Object.Attach(aspinbox, Attach_to, "dynaobj")
      ASpinBox.Name = CurrentParams[CurrentParams.Count - 2] & ".SpinBox"

      
      'aSpinbar generates errors if min>max and probably even if value is not included in boundaries
      'so wi try our best to set them multiple times until it works. 3 times should suffice.
      ' For j = 1 To 3
      '   i = CurrentParams[4]
      '   Try ASpinBox.MaxValue = i
      '   If Error Then error_test = True
      '   i = CurrentParams[2]  
      '   Try ASpinBox.MinValue = i
      '   If Error Then error_test = True
      '   i = CurrentParams[3]
      '   Try ASpinBox.Value = i
      '   If Error Then error_test = True
      '   If Not error_test Then Break
      ' Next 'j
     
      i = CurrentParams[2]
      ASpinBox.MinValue = i
      i = CurrentParams[4]
      ASpinBox.MaxValue = i
      i = CurrentParams[3]
      ASpinBox.Value = i
      ASpinBox.expand = True
      ASpinBox.step = 1
      

      ResetDefault = New MyresetButton(AnHBOX) As "dynaobj"
      Object.Attach(ResetDefault, Attach_to, "dynaobj")
      ResetDefault.name = "NOPARSE" & CurrentParams[CurrentParams.Count - 2] & ".toolbutton"
      ResetDefault.tag = CurrentParams[3]
      
    Else If CurrentParams[0] = "SWITCH" Then 'Let's Draw a checkbox
      'Syntax for TheParameters is: ["SWITCH", Caption, ENABLED|DISABLED, SpinBoxName,Comment]
      Acheckbox = New CheckBox(AnHbox) As "dynaobj"
      Object.Attach(Acheckbox, Attach_to, "dynaobj")
      Acheckbox.name = CurrentParams[CurrentParams.Count - 2] & ".CheckBox"
      Acheckbox.text = CurrentParams[1]

      'ACheckBox.width = Acheckbox.Font.TextWidth(Acheckbox.Text) + 32
      l = ACheckBox.Font.TextWidth(ACheckBox.text) + checkbox_no_text_width
      If l > max_obj_w Then max_obj_w = l
      align_objs.Add(ACheckBox)

      If CurrentParams[2] = "ENABLED" Then
        ACheckBox.value = True
          Else
        ACheckBox.value = False
      Endif

    Else If CurrentParams[0] = "FILEREQ" Then 'Let's Draw a StringFileReq
      'Syntax for TheParameters is:["FILEREQ", Caption, "FILE"|"DIR", FileReq Name ,comment]

      MyReq = New StringFileReqClass(AnHbox) As "dynaobj"
      Object.Attach(MyReq, Attach_to, "dynaobj")
      MyReq.name = CurrentParams[CurrentParams.Count - 2] & ".StringFileReqClass"
      MyReq.FileMode = (CurrentParams[2] = "FILE")
      'hack: write default path here in case of -dvd-device
      If CurrentParams[1] Like "*DVD*" Then MyReq.value = "/dev/dvd"

    Else If CurrentParams[0] = "RANGEFLOAT" Then 'Let's Draw a FloatSpinBox
        'Syntax for TheParameters is: ["RANGE", Caption, Min, Default , Max, SpinBoxName,Comment]

        AFloatSpinBox = New FloatSpinBox(AnHBox) As "dynaobj"
        Object.Attach(AFloatSpinBox, Attach_to, "dynaobj")
        'AFloatSpinBox.DecimalSeparator = "."
        AFloatSpinBox.Name = CurrentParams[CurrentParams.Count - 2] & ".FloatSpinBox"
        AFloatSpinBox.DecimalSeparator = "."
        f = CurrentParams[2]
        AFloatSpinBox.MinValue = f
        f = CurrentParams[4]
        AFloatSpinBox.MaxValue = f
        f = CurrentParams[3]
        AFloatSpinBox.value = f
        AFloatSpinBox.expand = True

   ResetDefault = New MyresetButton(AnHBOX) As "dynaobj"
        Object.Attach(ResetDefault, Attach_to, "dynaobj")
        ResetDefault.name = "NOPARSE" & CurrentParams[CurrentParams.Count - 2] & ".toolbutton"
        ResetDefault.tag = CurrentParams[3]

    Endif

    If (helper <> Null) Then
      Abutton = New Button(anHbox)
      abutton.name = helper.name & "_" & CurrentParams[CurrentParams.Count - 2]
      Object.Attach(abutton, helper.window, helper.name)
      AButton.visible = True
      'abutton.w = helper.w
      abutton.autoresize = True
      abutton.h = helper.h
      abutton.picture = helper.Picture
      abutton.tooltip = helper.Tooltip
      abutton.text = helper.text
    Endif
    prossimo:
  Next

  'align labels
  For Each o In align_objs
    Object.SetProperty(o, "w", max_obj_w)
  Next

End






Public Function MouseInside(Obj As Object) As Boolean

  If (Mouse.screenX >= Obj.screenx) And (Mouse.screenX < Obj.screenx + Obj.width) And (Mouse.screeny >= Obj.screeny) And (Mouse.screeny < Obj.screeny + Obj.height) Then
    Return True
      Else
    Return False
  Endif
End



Public Function OneOf(one As String, two As String) As String
  If one <> "" Then
    Return one
      Else
    Return two
  Endif
End




Public Sub ManageNotifies_Change(LastObj As Object, theform As Form)
  'dynamically created objects are all on group "dynaobj"
  'that way i can manage their changes
  'and notify users that it needs to apply new settings
  Dim goon As Boolean = False
  If (LastObj Is Checkbox) Or (LastObj Is SpinBox) Or (LastObj Is Spinbar) Or (LastObj Is Textbox) Or (LastObj Is FloatSpinBox) Then
    goon = True
  Endif
  If (LastObj Is Label) Or (LastObj Is Slider) Or (LastObj Is Combobox) Then
    goon = True
  Endif
  If Not goon Then Return
  NotifyChanges(LastObj, theform)
End

Public Sub ManageNotifies_click(LastObj As Object, theform As Form)
  Dim goon As Boolean = False
  If (LastObj Is Checkbox) Or (LastObj Is Combobox) Then
    goon = True
  Endif
  If Not goon Then Return
  NotifyChanges(LastObj, theform)
End





Public Sub NotifyChanges(obj As Object, theform As Form)
  Dim newvalue As String
  Try newvalue = obj.value
  If Error Then newvalue = obj.text
  
  If fmain.fullyloaded Then
    If theform.visible Then
      RedApplyBtnColor()
    Endif
  Endif
End

Public Sub NotifyApplyNeeds()
  RedApplyBtnColor()
End


Public Sub ResetApplyBtnColor()
  Try NewChains.ApplyBTN.Background = color.Default
  Try GeneralOptions.ApplyBTN.Background = color.Default
  Try SubAndOsd.ApplyBTN.Background = color.default
End



Public Sub RedApplyBtnColor()
  Try NewChains.ApplyBTN.Background = color.red
  Try GeneralOptions.ApplyBTN.Background = color.red
  Try SubAndOsd.ApplyBTN.Background = color.red
End

Public Function MyRowAt(g As Gridview, y As Integer) As Integer
  'workaround a bug with new gridviews in gb 3.1 which doesn't take header into account :(
  Dim workaround As Integer = 0
  If (g.header = GridView.Horizontal) Or (g.header = GridView.both) Then
    If g.RowAt(g.Font.TextHeight("9") Div 2) <> -1 Then 'means that the bug is still unresolved
      workaround = g.Columns.Height
    Endif
  Endif
  Return g.RowAt(y - workaround)
End

Public Function DektopWTotal() As Integer
  Dim S As Screen
  Dim VeryLeft As Integer = 99999
  Dim VeryRight As Integer = -1
  For Each s In Screens
    If s.AvailableX < VeryLeft Then VeryLeft = s.AvailableX
    If s.AvailableX + s.AvailableWidth > VeryRight Then VeryRight = s.AvailableX + s.AvailableWidth
  Next
  Return VeryRight - Veryleft
End

Public Function DektopHTotal() As Integer
  Dim S As Screen
  Dim VeryTop As Integer = 99999
  Dim VeryBottom As Integer = -1
  For Each s In Screens
    If s.AvailableY < VeryTop Then VeryTop = s.Availabley
    If s.AvailableY + s.AvailableHeight > VeryBottom Then VeryBottom = s.AvailableY + s.AvailableHeight
  Next
  Return VeryBottom - verytop
End

Public Sub Which(exe As String) As Boolean
  Dim exefound As String
  Shell "which " & exe To exefound
  If Trim(exefound) = "" Then Return False

  Return True
End


'I'm not able to keep the pointer busy on a control,
'probably related to event loop or something,
'so we force it by using a timer. not the best...
Public mousewait_timer As Timer
Private mouse_waiting_obj As Object
Public Sub mouse_wait(aContainer As Object, is_waiting As Boolean)
  Try mouse_waiting_obj.mouse = Mouse.default 
  If is_waiting Then
    Try mousewait_timer = New Timer As "mousewait_timer"
    Try mouse_waiting_obj = aContainer
    Try aContainer.mouse = Mouse.Wait
    Try mousewait_timer.delay = 500
    Try mousewait_timer.start
      Else
    Try mousewait_timer.stop
    Try mouse_waiting_obj = aContainer
    Try aContainer.mouse = Mouse.default
  Endif
End

Public Sub mousewait_timer_timer()
  If mouse_waiting_obj.mouse = Mouse.wait Then Return
  Try mouse_waiting_obj.mouse = Mouse.wait
End


Public Sub kill_players()
  Try fmain.mplayer.do_stop()
  Try fmain.querymp.do_stop()
  Try fmain.mthumbler.do_stop()  
  Try fmain.mylibrary.mplayertag.do_stop()
  Try fmain.myplaylist.mplayertag.do_stop()
  Try fmain.mydvbtlist.mplayertag.do_stop()
  Try audioconvert.mymplayer.do_stop()
  Try covermanager.mplayerthumb.do_stop()
End

Public Function get_mounted_fss() As String[]
  Dim df As String
  Shell "df -x devtmpfs -x tmpfs --output=target|grep '/'|sort -u" To df
  Return Split(df, "\n", "", True)
End



Public pTask As Preload_task
Public Function Preload_file_bg(pFilename As String, pKbytes As Integer, pTimeout As Integer)
  pTask = New Preload_task
  pTask.pFileName = pFileName
  pTask.pKBytes = pKbytes
  pTask.pTimeout_sec = pTimeout
  Wait
End

Public Function Preload_file_bg_stop()
  Try pTask.Stop()
  If Error Then global.myDebug("Error while doing pTask.Stop()")
End

Public Function Dedupe(sDir As String) As Boolean
  Dim sFiles As String
  Dim files As New String[]
  Dim i, j As Integer
  Dim equal As String
  Dim EmptyDir As Boolean = True
  'find files that are not links and sort them by size.
  Try EmptyDir = Dir(sDir).count > 1
  If EmptyDir Then Return
  Shell "find " & sDir & " -type f -print0 | xargs -0 du -b | sort -rn|cut -d '/' -f 2-|awk '{print \"/\" $0}'" To sFiles
  files = Split(sFiles, "\n", "", True)
  i = 0
  j = 0
  While i < files.max
    Repeat
      Inc j
      If j > files.max Then Return
      equal = EqualFiles(files[i], files[j])
      If equal = "True" Then
        Kill files[j]
        Link files[i] To files[j]
      Endif
    Until equal = "DIFSIZE"
    i = j
  Wend
  
End

Public Function EqualFiles(snew As String, sold As String) As String
  Dim file1, file2 As Stream
  Dim s1, s2 As String  
  Dim res As String = "True"
  Dim blocksize As Integer = 2048
  Dim size1, size2 As Integer
  
  size1 = Stat(snew).size 
  size2 = Stat(sold).Size
  
  If size1 <> size2 Then Return "DIFSIZE"
 
  If size1 < blocksize Then blocksize = size1
  
  If res = "True" Then    
    file1 = Open snew For Read
    file2 = Open sold For Read
    Do
      Read #file1, s1, -blocksize
      Read #file2, s2, -blocksize
      If s1 <> s2 Then
        res = "False"
        Break
      Endif
      If Len(s1) <> 2048 Then Break 
    Loop
      
    Close #file1
    Close #file2
  Endif
     
  Return res
End
