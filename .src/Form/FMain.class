' Gambas class file

'Copyright (C) 2007, 2008 Antonio Orefice

'Private timer_runtime_infos As Timer

Public AlreadyLoaded As Boolean = False 'true if the form loaded it's settings from disk at least one time
'Private exportfilespath As String 'mpv 0.11 removed af_export filter :(
'Public exportfile As String 'mpv 0.11 removed af_export filter :(
Public albumviewtexlen As Integer = 30
Public mouseonfsform As Boolean = False
Public IceRadio As New IceCastClass

Private Media_Next_path As String = ""

Public Struct mpvOption
  name As String
  data As String
End Struct


Public Struct EventInfo
  Start_time_date As Date
  ServiceID As String
  EventID As String
  ChannelName As String
  Duration_date As Date
  Free_Ca_mode As String
  event_name As String
  text_char As String
  category As String
  icon As String
End Struct

Public Struct chapter
  title As String
  start_time As String
End Struct

Private Function IsTabChildren(name As String, Optional index As Integer = 99999) As Boolean
  
  Dim found As Boolean = False
  Dim theobject As Object
  
  If index <> 99999 Then
    For Each theobject In Leftsidetabs[index].Children
      If theobject.name = name Then
        found = True
        Break
      Endif
    Next 'theobject
  Else
    For Each theobject In Leftsidetabs.Children
      If theobject.name = name Then
        found = True
        Break
      Endif
    Next 'theobject
  Endif
  Return found
  
End

Public Function TabSelectedLibrary() As Boolean

  Return IsTabChildren("NOPARSETABLIBRARY")

End

Public Function TabSelectedPlaylist() As Boolean

  Return IsTabChildren("NOPARSETABPLAYLIST")

End

Public Function TabSelectedShoutcast() As Boolean

  Return IsTabChildren("NOPARSETABSHOUTCAST")

End

Public Function TabSelectedyoutube() As Boolean

  Return IsTabChildren("NOPARSETABYOUTUBE")

End

Public Function TabSelectedCDDA() As Boolean

  Return IsTabChildren("NOPARSETABCDDA")

End

Public Function TabSelectedDVD() As Boolean

  Return IsTabChildren("NOPARSETABDVD")

End

Public Function TabSelectedCHAPTERS() As Boolean

  Return IsTabChildren("NOPARSETABCHAPTERS")

End

Public Function TabSelectedDVB() As Boolean

  Return IsTabChildren("NOPARSETABDVB")

End

Public Function TabSelectedBrowse() As Boolean

  Return IsTabChildren("NOPARSETABBROWSE")

End

Public Function TabSelectedDVDAt(index As Integer) As Boolean

  Return IsTabChildren("NOPARSETABDVD", index)

End

Public Function TabSelectedCDDAAt(index As Integer) As Boolean

  Return IsTabChildren("NOPARSETABCDDA", index)

End

Public Function TabSelectedChaptersAt(index As Integer) As Boolean

  Return IsTabChildren("NOPARSETABCHAPTERS", index)

End

Public Function TabSelectedPodCasts() As Boolean

  Return IsTabChildren("NOPARSETABPODCAST")

End

Public Function TabSelectedMediaInfo() As Boolean

  Return IsTabChildren("NOPARSETABMEDIAINFO")

End

Public Function TabSelectedAlbums() As Boolean

  Return IsTabChildren("NOPARSETABALBUMS")

End

Public Function TabSelectedProfiles() As Boolean

  Return IsTabChildren("NOPARSETABPROFILES")

End


Public closing As Boolean = False

' with compiz window manager window position is not correctly restored,
' so we measure the delta and apply it.
Public ScreenXBefore As Integer
Public ScreenYBefore As Integer
Public FullScreenSwitchDeltaX As Integer = 0
Public FullScreenSwitchDeltaY As Integer = 0

Public mypodcast As New Podcast
Public MyRadio As New ShoutCastClass
Public Youtube As Youtubeclass

Public mplayer As New MplayerClass 


Public MyLibrary As New PlaylistClass
Public MyPlaylist As New PlaylistClass
Public MyDVBTList As New PlaylistClass
Public Host As Object
Public MyAlbumsLib As New AlbumView



Public Shutdown As String = "FALSE"

Public hLock As Stream

Public IsDVD As Boolean = False
Public ISCDDA As Boolean = False

Public FullyLoaded As Boolean = False


Public Alternate As Boolean = True
Private IgnoreMouse As Boolean = False
Public ResizeFactor As Float = 0
Public old_ResizeFactor As Float = 1

Private mouseleft As Boolean = False 'used to manage dblclick event in videoarea group
Private MouseOnFmain As Boolean = True 'used to manage autohide panels on multihead screens ;-)
'statusbar time format, can be:
'0- 00:00:00/00:00:00 (total formatted time)
'1- -00:00:00/00:00:00 (remaining formatted time)
'2- 0000/0000 (total seconds)
'3- -0000/0000 (total remaining seconds)
Private TimeFormat As Integer = "0"
Private DoSlideUp As Boolean = True 'used to manage controlpanel hide/show smootly

Public PlayStarted As Boolean = False
Public EndOfMediaReached As Boolean = False
Public SplitterLayout As Integer[]
Public LeftsideWasVisible As Boolean = False
Private VEqHasBeenSet As Boolean = False 'To Apply video equalizer settings just one time :)

Public LastFocusedObj As Object

Private GuiDragging As Boolean = False 'if gui is dragging dont read hotkeys

Private Const MIME_ROWS As String = "text/x-xt7-rows-list"

'If you want to change tabstrip order, then you'll have to modify this too:
Private Const TabStripLibrary As Integer = 0
Private Const TabStripPlaylist As Integer = 1
Private Const TabStripMediaInfo As Integer = 2

'mousedrag is incorrectly raised on dblclick on videogrouparea, so we use this:
Public SwitchingFullScreen As Boolean = False

'Private UserStopped As Boolean = False 'if user has hit stop, don't advance in playlist.
Public FirstPlay As Boolean = False ' used to avoid playing the media at startup if togglepls button is toggled

Public LastDvdID As String = ""            'used to manage dvd disk changes

Public DVDTabID As Integer = "-1"  'as we hide the dvd tab, we loose the caption, so we must remember the id
Public CDDATabID As Integer = "-1"

Private DynaGuiTools As New DynaGuiClass

Public TagEditMode As Boolean = False

Public TrayIcon2 As Trayicon 'fixme trayicon

Public Sub InitTrayIcon()
  'fixme trayicon

  Dim SystemTray As Boolean = True
  Try SystemTray = desktop.HasSystemTray
  If Error Then
    global.myDebug("Couldn't check if your desktop has a system tray, assuming it has")
  Endif

  If Not SystemTray Then Return
  Try TrayIcon2 = New Trayicon 
  If Error Then global.myDebug("Cannot Init Trayicon")
  'TrayIcon2.Picture = picture.Load("trayicon.png")
  TrayIcon2.Picture = picture.Load("xt7-player-mpv.png")
  'TrayIcon2.Picture.Image.Stretch(TrayIcon2.w, TrayIcon2.h)
  TrayIcon2.Visible = True
  object.Attach(TrayIcon2, Me, "TrayIcon2")
  TrayIcon2.PopupMenu = "MenuMain"

  If Error Then global.myDebug("Cannot Init Trayicon")
End

Public Sub Form_Open()
  Dim wmessage As String
  Dim wanswer As String
  SetFlexSpaceVisibility(False)
  'init dynagui toolbar objects
  DynaGuiTools.AllowedContainers = ["MainToolbar"] ', "SliderBox"]
  DynaGuiTools.YOffset = -Me.Font.TextHeight("Ij") - 8
  ShowAudioPanel(False) 'Hide the coverbox
  'Popup translation needed dialog:
  If global.TranslationNeeded Then
    If Not (Exist(TranslationNeeded.Notranslatefile)) Then TranslationNeeded.show
  Endif
  Debug Desktop.platform
  If Desktop.Platform = "wayland" Then
    If Not (Exist(global.wayland_warning_no_show_file)) Then
      If Env["GB_GUI_PLATFORM"] <> "x11] then"
        wmessage = "You seem to be running Wayland, but GB_GUI_PLATFORM is not x11.\n"
        wmessage &= "Since xt7 only supports Xorg/XWayland, you have to set:\n"
        wmessage &= "GB_GUI_PLATFORM=x11 prior to start it."
        wanswer = Message.Warning(wmessage, "Quit", "Continue", "Do not show this anymore")
        If wanswer = 1 Then FMain.Close()
        If wanswer = 3 Then Shell "touch " & global.wayland_warning_no_show_file Wait
      Endif
    Endif
  Endif
  
  
End

Public Sub SetFlexSpaceVisibility(Visibility As Boolean)

  If Visibility = True Then
    FlexSpace.border = Border.plain
    FlexSpace.background = Color.White
  Else
    FlexSpace.border = Border.none 'gambas3
  Endif

End

Public Sub DynaGuiToolbar_Click()

  Dim ButtonName As String
  If MenuToolBarLocked.checked Then
    Try ButtonName = Last.name
    If (Not Error) Then
      Select Case ButtonName
        ' Case "ConfigureChainsBTN"
        '   If (Not global.initearlyformsdone) Then InitEarlyForms()
        '   ConfigureChainsBTN_Click()
        ' Case "ConfigureBTN"
        '   If (Not global.initearlyformsdone) Then InitEarlyForms()
        '   ConfigureBTN_Click()
        Case "RealtimeBTN"
          If (Not global.initearlyformsdone) Then InitEarlyForms()
          Global.Center(fmain, realtimeform)
          RealtimeForm.show()
        Case "ShowVideoEq"
          If (Not global.initearlyformsdone) Then InitEarlyForms()
          ShowVideoEq_Click()
        Case "ShowAudioEq"
          If (Not global.initearlyformsdone) Then InitEarlyForms()
          ShowAudioEq_Click()
        Case "SwitchAudioBTN"
          SwitchAudioBTN_Click()
        Case "SwitchSubBtn"
          SwitchSubBtn_Click()
        Case "PoweroffBTN"
          If (Not global.initearlyformsdone) Then InitEarlyForms()
          PowerffBTN_click()
        Case "SwitchSidePanelBTN"
          SwitchSidePanelBTN_click()
        Case "FullScreenBtn"
          FullScreenBtn_click()
        Case "TagEditorBtn"
          TagEditorBtn_click()
        Case "ConfigureBTN"
          alloptionsmenu.popup
      End Select
    Endif
  Endif

End

'--------------------------------------------------



Public Sub TagEditorBtn_click()
  
  EditTagModeSwitch1_Click()
  
End

Public Sub InitLibrary(MyLibrary As PlaylistClass, LibraryGrid As Gridview, WithMplayer As Boolean)

  Dim Tag As String
  Dim i As Integer = 0

  MyLibrary.Init(WithMplayer)
  LibraryGrid.Columns.count = MyLibrary.ColumnIndex.Count
  For Each Tag In MyLibrary.ColumnIndex
    LibraryGrid.Columns[i].Text = MyLibrary.ColumnIndex.Key
    i = i + 1
  Next
  MyLibrary.Load(LibraryGrid, global.confpath)
  ' Try Object.SetProperty(librarygrid, "sorted", True) 'use setproperty to make it compile with gb 3.0 too
  If Lower(librarygrid.name) = "playlistgrid" Then PlayListSelInfoBox.visible = False
  GridRefreshWorkaround(librarygrid)

End

Public Sub HideGrid(Librarygrid As Gridview)
  librarygrid.visible = False
End

Public Sub ShowGrid(LibraryGrid As Gridview)

  Select Case librarygrid.name
    Case "PlaylistGrid"
      WaitPanel2.visible = False
      playlistgrid.visible = True
    Case "LibraryGrid"
      WaitPanel.visible = False
      LibraryGrid.visible = True
    Case "DVBTGrid"
      WaitPanel3.visible = False
      dvbtgrid.visible = True
      HBox19.visible = True
  End Select
  librarygrid.scrollx = 0
  librarygrid.scrolly = 0

End


Public Sub AllInit_Pre()

  youtube = New YoutubeClass(youtubetree)
  shadeup.visible = False
  VersionCheck()
  'MakeProfilePath() <--maininit already did this
  MakeScreenshotsPath()
  'Try Mkdir global.confpath & "/.ExportFiles/" 'mpv 0.11 removed af_export filter :(
  ' ExportFilesPath = global.confpath & "/.ExportFiles/" 'mpv 0.11 removed af_export filter :(
  FileView1.visible = False
  If tagpanel.parent.name <> "zzzFake" Then tagpanel.Reparent(zzzfake)
  'mplayer.FillLog = TRUE
  InitPropertiesGrid()
  AspectMenu.visible = False
  'Try Kill "/tmp/FakeInput.conf"
  'Try Copy "FakeInput.conf" To "/tmp/FakeInput.conf"
  If Not (Exist(global.confpath & "/" & "Factory_Defaults.profile")) Then
    'inizializza prma tutto:
    InitEarlyForms()
    ReallySaveAllSettings("Factory_Defaults", False) 'before loading user settings, make a profile with factory values.
  Endif
  Global.LoadEarlySettings(global.CurrentProfile) 'slow

  'the following has To be called after loadearlysettings because 
  'Is There where we load generaloptions form settings
  If generaloptions.ShowCoversInListChk.value Then
    covermanager.prebuffer()
    global.myDebug("the User likes cover, so we prebuffer cover list In background...")
  Endif

  HideGrid(PlaylistGrid)
  HideGrid(LibraryGrid)
  HideGrid(dvbtGrid)
  SetDvdTabVisibility(False)
  SetCDDATabVisibility(False)
  SetChaptersTabVisibility(False)
  SetStyle_early()
    
  If GeneralOptions.ToolTipsCHKDBUS.value Then 
    dbus.debug = True
    Try ExportDbusProperties()
  Endif
  'Copy stats lua script to temporary dir
  Try File.Save(global.TmpDir & "/_mpvstats.lua", File.Load("_mpvstats.lua"))
  If Error Then 
    global.mydebug("Cannot copy _mpvstats.lua to " & global.tmpdir)
    Stop
  Endif
End

Public Sub InitEarlyForms()

  global.myDebug("start at: " & Time)
  Try Last.mouse = mouse.wait
  fmain.mouse = mouse.wait
  global.initearlyformsdone = True
  SubAndOsd.Init()
  GeneralOptions.Init()
  generaloptions.BackColorChooseBTN2.background = Color.Merge(Color.TextBackground, Color.black, 0.05)
  Try Last.mouse = mouse.default
  fmain.mouse = mouse.default
  global.myDebug("Ends at:" & Time)
  global.myDebug("")

End

Public Sub AllInit_Post()
  Dim cscreen As Screen  
  Dim savefileview1path As String
  If Not Panel2.visible Then Panel2.visible = True
  If MyLibraryProgressBar.visible Then MyLibraryProgressBar.visible = False
  'workaround ?
  youtubetree.Parent.visible = True
  Hsplit1ResizeDelayed = New Timer As "Hsplit1ResizeDelayed" 'used to delay the hsplit resize and better performance
  Hsplit1ResizeDelayed.delay = 300
  Hsplit1ResizeDelayed.Enabled = False
  savefileview1path = FileView1.dir
  FileView1.dir = "non/esistent/dir/i/am/very/sure/of/this/1234432100/don/t/you"
  Try load_view_menu()
  If Error Then
    global.myDebug("Error loading view_menu")
      Else
    apply_view_menu()
  Endif
  FileView1.visible = True
  FileView1.dir = savefileview1path
  gridpanels_arrange()
  fileview1Myreload()
  Leftsidepanel.mouse = mouse.wait
  InitLibrary(MyLibrary, LibraryGrid, True)
  InitLibrary(MyPlaylist, PlayListGrid, True)
  InitLibrary(MyDVBTList, DVBTGrid, False)
  If TabSelectedAlbums() Then 
    Albums_Select()
  Endif  
    
  Try mypodcast.LoadPods(global.confpath & "/mypods.txt", PodcastTree)
        updaterecentfiles()
  'some gtk component problem here
  Try ComboHistory.LoadHistory(Searchfield, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(SearchfieldPLS, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(searchfieldalbums, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(AddUriForm.UriInsComboBox, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(Fmain.UrlBox, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(youSearchfield, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(SearchFieldDVB, global.confpath & "/" & global.CurrentProfile)

  Leftsidepanel.mouse = mouse.Default
  Try GeneralOptions.LoadWatchDir(global.confpath & "/" & global.CurrentProfile)
  Try GeneralOptions.LoadExcludeDir(global.confpath & "/" & global.CurrentProfile)
  'kill prevoiusly launched xbindkeys
  Shell ("killall " & global.CustomBindKeys) For Read
  Application.ShowTooltips = GeneralOptions.ToolTipsCHK.value
  
  If global.Which("xbindkeys") Then
    'Prepare our xbindkeys link, we'll need it to ensure only one at time.
    Shell ("ln -s $(which xbindkeys) " & global.confpath & "/" & global.CustomBindKeys) For Read
      Else
    global.myDebug("xbindkeys doesn't seem to be installed")
  Endif

  'start to listen for remote commands, one connection is ok.
  Mysocket.type = Net.Unix
  Mysocket.path = global.confpath & "/.localsocket"
  Mysocket.Listen(1)
  InitGenresTag()
  Wait 0.1
  SetStyle_later()


  HotKeys.init()
  Try HotKeys.LoadHotKeys(global.confpath & "/" & global.CurrentProfile)
  Try UpdateProfilesTabList()
  UpdateMenuTabVisibility()
  If (GeneralOptions.TrayCHK1.value) Or global.arg_start_tray Then Try InitTrayIcon()
  If global.arg_start_tray Then 
    If desktop.HasSystemTray Then 
      fmain.Minimized = True
      fmain.SkipTaskbar = True
    Endif
  Endif
   If TabSelectedShoutcast() Then
     UpdateGenresTree(False)
  Else If TabSelectedLibrary() Then
    LibraryGrid_Select()
  Else If TabSelectedPlaylist() Then
    LibraryGrid_Select()
  Else If TabSelectedyoutube() Then
    'Youtube_Select()
  Endif
  global.AddUserExtensions(GeneralOptions.KnownExtensions.text)
  VideoAreaGroup_keypress_timer = New Timer As "VideoAreaGroup_keypress_timer"
  updaterecentfiles()
  fmain.fileview1Myreload()
  fmain.SearchBox1.text = ""
  FullyLoaded = True
   shadeup.visible = True
  ShowGrid(librarygrid)
  ShowGrid(playlistgrid)
  ShowGrid(DVBTGrid)

  If tabselectedbrowse() Then 
    gridpanels_arrange()
     Else
    shadeup.visible = True
  Endif

  If global.arg_file <> "" Then
    If Exist(global.arg_file, True) Then fmain.ShowBrowseTabTo(global.arg_file)
  Endif

  Try MakeProfileMenu()
  Try GetLastVersion()
  fsform.Move(Screens[fmain.screen].x, Screens[fmain.screen].y, Screens[fmain.screen].w, Screens[fmain.screen].H)

End

Private Sub MakeProfileMenu()
  Dim j As Integer
  Dim pmenu As Menu
  While MenuSwitchProfile.Children.Count > 0
    MenuSwitchProfile.Children[0].delete
  Wend
  For j = 0 To ProfilesListBox.count - 1
    pmenu = New Menu(MenuSwitchProfile) As "menuprofileselect"
    pmenu.text = ProfilesListBox[j].Text
    pmenu.tag = ProfilesListBox[j].Text
    pmenu.Checked = (global.CurrentProfile = pmenu.tag)
    If (Not pmenu.checked) Then pmenu.picture = picture["icon:/16/properties"]
  Next
  
End

Public Function get_history_leftoff_time(fullpath As String) As String
  Dim history, entry As String
  Dim historyarray As String[]
  Dim sep As String = Chr(8)
  Try history = file.Load(global.Historyfile)
  If Error Then Return 0
  historyarray = Split(history, "\n", "", True)
  For Each entry In historyarray
    If entry Like fullpath & "*" & sep & "*" Then
      Try Return Split(entry, sep, "", True, "")[1]
      Return "0"
    Endif
  Next
End




Private RecentFileEntry As Menu

Private HaveToPlay As String = ""

Private historyarray As String[]

Public Sub updaterecentfiles()
  
  Dim history, entry As String
  Dim sep As String = Chr(8)
  Dim HaveToSeek As String = ""
  Dim opts As New Collection
  Dim i As Integer = 0
  historyarray = New String[]
  Try history = file.Load(global.Historyfile)
  If Error Then Return
  'Clear and pupulate the list:
  ClearRecentFilesSub()
  historyarray = Split(history, "\n", "", True)
  historyarray.Reverse()
  For Each entry In historyarray
    i = i + 1
    If i > global.Max_menu_History Then Break
    RecentFileEntry = New Menu(MenuOpenRecent) As "RecentFileEntry"
    RecentFileEntry.name = Timer & Rnd(0, 10000)
    If entry Like "*" & sep & "*" & "leftoff" & "*" Then 
      If HaveToPlay = "" Then
        Try HaveToPlay = Split(entry, sep, "", True, "")[0]
        If Not Error Then 
          Try HaveToSeek = Split(entry, sep, "", True, "")[1]
        Endif
      Endif
    Endif
    If entry Like ("*" & sep & "*" & sep & "*" & sep & "*") Then 'percent information present
      Try RecentFileEntry.caption = Split(File.Name(entry), sep, "", False, "")[0] & " (" & Split(File.Name(entry), sep, "", True, "")[3] & "%)"
      If Error Then Return
      Try RecentFileEntry.tag = Split(entry, sep, "", True, "")[0]
      Else If entry Like ("*" & sep & "*") Then
        Try RecentFileEntry.caption = Split(File.Name(entry), sep, "", True, "")[0]
        If Error Then Return
        Try RecentFileEntry.tag = Split(entry, sep, "", True, "")[0]
        If Error Then Return
          Else
        RecentFileEntry.caption = File.Name(entry)
        RecentFileEntry.tag = entry
    Endif
    RecentFileEntry.Picture = picture["icon:/medium/recent"]
  Next 'entry
  RecentFileEntry = New Menu(MenuOpenRecent) As "ClearRecentFiles"
  RecentFileEntry.name = "menuclearrecent"
  RecentFileEntry.caption = "Clear History"
  RecentFileEntry.picture = picture["icon:/medium/delete"]

  'restore the previous media
  If GeneralOptions.RestorePlayCHK.value Then
    If HaveToPlay <> "" Then 
      If HaveToSeek <> "" Then
        If Not (PlayFromCommandline) Then 
          Play(HaveToPlay,,, HaveToSeek)
        Endif
      Endif
    Endif
  Endif
End


Public Sub RecentFileEntry_Click()
  Try Play(Last.tag)
End

Public Sub ClearRecentFiles_Click()

  Try Kill global.Historyfile
  historyarray.clear
  Try fileview1Myreload()
  If Not Error Then 
    ClearRecentFilesSub()
  Else
    Message.Error(("Couldn't clear the history!"), "Ok")
  Endif

End

Public Sub ClearRecentFilesSub()

  Dim child As Menu
  Repeat 
    For Each child In MenuOpenRecent.Children
      child.delete
    Next 'child
  Until (MenuOpenRecent.Children.count = 0)

End


Public Sub MakeProfilePath()

  Dim DefaultProfilepath As String = global.confpath '& "/default.profile"
  'Try to make some profile folders
  If Not Exist(file.Dir(DefaultProfilepath), True) Then
    Try Mkdir File.dir(File.Dir(File.dir(File.Dir(File.Dir(DefaultProfilepath)))))
    Try Mkdir File.Dir(File.dir(File.Dir(File.Dir(DefaultProfilepath))))
    Try Mkdir File.dir(File.Dir(File.Dir(DefaultProfilepath)))
    Try Mkdir File.Dir(File.Dir(DefaultProfilepath))
    Try Mkdir File.Dir(DefaultProfilepath)
    Try Mkdir DefaultProfilepath
  Endif

End

Public Sub MakeScreenshotsPath()

  Try Shell "mkdir -p " & Global.ScreenshotFolder & " >/dev/null 2>&1" Wait

End

Private Sub InitGenresTag()
  
  tagbox5.add("A capella")
  tagbox5.add("Acid")
  tagbox5.add("Acid Jazz")
  tagbox5.add("Acid Punk")
  tagbox5.add("Acoustic")
  tagbox5.add("AlternRock")
  tagbox5.add("Alternative")
  tagbox5.add("Ambient")
  tagbox5.add("Anime")
  tagbox5.add("Avantgarde")
  tagbox5.add("Ballad")
  tagbox5.add("Bass")
  tagbox5.add("Beat")
  tagbox5.add("Bebob")
  tagbox5.add("Big Band")
  tagbox5.add("Black Metal")
  tagbox5.add("Bluegrass")
  tagbox5.add("Blues")
  tagbox5.add("Booty Bass")
  tagbox5.add("Britpop")
  tagbox5.add("Cabaret")
  tagbox5.add("Celtic")
  tagbox5.add("Chamber Music")
  tagbox5.add("Chanson")
  tagbox5.add("Chorus")
  tagbox5.add("Christian Gangsta Rap")
  tagbox5.add("Christian Rap")
  tagbox5.add("Christian Rock")
  tagbox5.add("Classic Rock")
  tagbox5.add("Classical")
  tagbox5.add("Club")
  tagbox5.add("Club-House")
  tagbox5.add("Comedy")
  tagbox5.add("Contemporary Christian")
  tagbox5.add("Country")
  tagbox5.add("Crossover")
  tagbox5.add("Cult")
  tagbox5.add("Dance")
  tagbox5.add("Dance Hall")
  tagbox5.add("Darkwave")
  tagbox5.add("Death Metal")
  tagbox5.add("Disco")
  tagbox5.add("Dream")
  tagbox5.add("Drum & Bass")
  tagbox5.add("Drum Solo")
  tagbox5.add("Duet")
  tagbox5.add("Easy Listening")
  tagbox5.add("Electronic")
  tagbox5.add("Ethnic")
  tagbox5.add("Euro-House")
  tagbox5.add("Euro-Techno")
  tagbox5.add("Eurodance")
  tagbox5.add("Fast Fusion")
  tagbox5.add("Folk")
  tagbox5.add("Folk-Rock")
  tagbox5.add("Folklore")
  tagbox5.add("Freestyle")
  tagbox5.add("Funk")
  tagbox5.add("Fusion")
  tagbox5.add("Game")
  tagbox5.add("Gangsta")
  tagbox5.add("Goa")
  tagbox5.add("Gospel")
  tagbox5.add("Gothic")
  tagbox5.add("Gothic Rock")
  tagbox5.add("Grunge")
  tagbox5.add("Hard Rock")
  tagbox5.add("Hardcore")
  tagbox5.add("Heavy Metal")
  tagbox5.add("Hip-Hop")
  tagbox5.add("House")
  tagbox5.add("Humour")
  tagbox5.add("Indie")
  tagbox5.add("Industrial")
  tagbox5.add("Instrumental")
  tagbox5.add("Instrumental Pop")
  tagbox5.add("Instrumental Rock")
  tagbox5.add("JPop")
  tagbox5.add("Jazz")
  tagbox5.add("Jazz+Funk")
  tagbox5.add("Jungle")
  tagbox5.add("Latin")
  tagbox5.add("Lo-Fi")
  tagbox5.add("Meditative")
  tagbox5.add("Merengue")
  tagbox5.add("Metal")
  tagbox5.add("Musical")
  tagbox5.add("National Folk")
  tagbox5.add("Native American")
  tagbox5.add("Negerpunk")
  tagbox5.add("New Age")
  tagbox5.add("New Wave")
  tagbox5.add("Noise")
  tagbox5.add("Oldies")
  tagbox5.add("Opera")
  tagbox5.add("Other")
  tagbox5.add("Polka")
  tagbox5.add("Polsk Punk")
  tagbox5.add("Pop")
  tagbox5.add("Pop-Folk")
  tagbox5.add("Pop/Funk")
  tagbox5.add("Porn Groove")
  tagbox5.add("Power Ballad")
  tagbox5.add("Pranks")
  tagbox5.add("Primus")
  tagbox5.add("Progressive Rock")
  tagbox5.add("Psychadelic")
  tagbox5.add("Psychedelic Rock")
  tagbox5.add("Punk")
  tagbox5.add("Punk Rock")
  tagbox5.add("R&B")
  tagbox5.add("Rap")
  tagbox5.add("Rave")
  tagbox5.add("Reggae")
  tagbox5.add("Retro")
  tagbox5.add("Revival")
  tagbox5.add("Rhythmic Soul")
  tagbox5.add("Rock")
  tagbox5.add("Rock & Roll")
  tagbox5.add("Salsa")
  tagbox5.add("Samba")
  tagbox5.add("Satire")
  tagbox5.add("Showtunes")
  tagbox5.add("Ska")
  tagbox5.add("Slow Jam")
  tagbox5.add("Slow Rock")
  tagbox5.add("Sonata")
  tagbox5.add("Soul")
  tagbox5.add("Sound Clip")
  tagbox5.add("Soundtrack")
  tagbox5.add("Southern Rock")
  tagbox5.add("Space")
  tagbox5.add("Speech")
  tagbox5.add("Swing")
  tagbox5.add("Symphonic Rock")
  tagbox5.add("Symphony")
  tagbox5.add("Synthpop")
  tagbox5.add("Tango")
  tagbox5.add("Techno")
  tagbox5.add("Techno-Industrial")
  tagbox5.add("Terror")
  tagbox5.add("Top 40")
  tagbox5.add("Trailer")
  tagbox5.add("Trance")
  tagbox5.add("Trash Metal")
  tagbox5.add("Tribal")
  tagbox5.add("Trip-Hop")
  tagbox5.add("Vocal")

End

Private paddingovr As Integer 
Public Sub ArrangeCpl(Optional NumButtonsCPL As Integer = 9)

  Dim ButtonWovr, ButtonHovr As Integer
  Dim TheObject As Object
  ' NumButtonsCPL = 0
  ' 'fix bottom panel for high sized fonts
  ' '---------------------------------------------------------------------------
   ButtonWovr = 36 '36
   ButtonHovr = 36 '36
   PaddingOvr = 4 '5
   
  For Each theobject In ControlPanel.Children
    'If theobject.visible Then
      'If Not theobject Is Panel Then
        If Not (theobject Is Panel) Then theobject.w = ButtonWovr
        theobject.h = ButtonHovr
    'Endif
  Next

  For Each theobject In ControlPanelright.Children
    If theobject.visible Then
      theobject.w = ButtonWovr
      theobject.h = ButtonHovr
    Endif
  Next

  controlframe.h = ButtonHovr + (paddingovr * 2)
  ControlPanel.x = controlframe.x + paddingovr
  ControlPanel.y = 0 + (paddingovr)

  ControlPanel.w = controlframe.w - controlpanelright.w - (paddingovr * 2)
  controlpanelright.y = ControlPanel.y
  Statusbar1.h = Statusbar1.Font.TextHeight("[IJ]") 
  SaveVolumeSlider.y = SaveVolumeSlider.Parent.h Div 6

End

Public Sub SetStyle_early()
  
  Dim TheObject As Object
  
  Dim backcolor As String = GeneralOptions.backcolorChooseBTN1.Background
  Dim forecolor As String = GeneralOptions.ColorChooseBTN1.Background
  Dim Userfont As Font = GeneralOptions.FontChooseBTN1.font

  Dim i As Integer
  If GeneralOptions.HideTabTextCHK.value Then
    For i = 0 To Leftsidetabs.Count - 1
      leftsidetabs[i].text = ""
    Next
  Endif

  If Trim(generaloptions.BottomPanelImage.text) <> "" Then
    Try picturebox1.Picture = picture.Load(generaloptions.BottomPanelImage.text)
    If Error Then global.myDebug("sorry, couldn 't load the image " & generaloptions.BottomPanelImage.text)
  Endif
  
  StatusLabelLeft.text = ""
  StatusLabelright.text = ""
  ' 
  shadeup.visible = False

  'cachebar removed: cachebar.w = 0
  'cachebar removed: cachebar.h = (fmain.font.textHeight("iJ") Div 4)
  
  'Set font size AND stile OF the whole form; beware the AudioForm!

  If desktop.Height > 600 Then
    Maintoolbar.h = 32
  Else
    Maintoolbar.h = 24
  Endif

  ArrangeCpl(9)
  audioform.audiopanel.font = GeneralOptions.FontChooseBTN2.font

  audioform.audiopanel.Foreground = GeneralOptions.ColorChooseBTN2.Background
  If audioform.AudioPanel.parent = Rightsidepanel Then
    If (Not mplayer.ProcessRunningOvr()) Then ShowAudioPanel(False) 
    SetSubControlsStyles(Fmain)
    ' For Each TheObject In Audioform.controls
    '   If theobject Is Label Then
    '     Try TheObject.font = GeneralOptions.FontChooseBTN2.font
    '     Try TheObject.Foreground = GeneralOptions.ColorChooseBTN2.Background
    '   Endif
    ' Next 'TheForm
    ShowAudioPanel(True)
  Else
    SetSubControlsStyles(Fmain)
    ' For Each TheObject In Audioform.controls
    '   If theobject Is Label Then
    '     Try TheObject.font = GeneralOptions.FontChooseBTN2.font
    '     Try TheObject.foreground = GeneralOptions.ColorChooseBTN2.Background
    '   Endif
    ' Next 'TheForm
  Endif


  fmain.Statusbar1.Foreground = &HF0F0F0&
  fmain.Statusbar1.Background = &000000&
  
  'Then set specific ones:
  OverlayTrayTip.font = GeneralOptions.FontChooseBTN4.font
  OverlayTrayTip.foreground = GeneralOptions.ColorChooseBTN4.Background
  OverlayTrayTip.Panel2.background = GeneralOptions.backcolorChooseBTN3.Background
  
  Librarygrid.font = Userfont
  Librarygrid.Foreground = forecolor
  Librarygrid.Background = backcolor
  'Panel2.background = Librarygrid.Background
  
  Global.Alternatecolor = GeneralOptions.backcolorChooseBTN2.Background

  dvbtgrid.font = Userfont
  dvbtgrid.Foreground = forecolor
  dvbtgrid.Background = backcolor
  'panel3.Background = backcolor
  dvbtgrid.Rows.h = dvbtgrid.Font.TextHeight("^_") + global.rowpadding
  
  Playlistgrid.font = Userfont
  PlaylistGrid.Foreground = forecolor
  PlayListGrid.Background = backcolor
  'Panel1.background = backcolor
  
  
  ProfilesListBox.font = Userfont
  ProfilesListBox.foreground = forecolor
  ProfilesListBox.background = backcolor
  
  chaptersgrid.font = Userfont
  chaptersgrid.Foreground = forecolor
  chaptersgrid.Background = backcolor
  
  CDDAGrid.font = Userfont
  CDDAGrid.Foreground = forecolor
  CDDAGrid.Background = backcolor
  'panel4.Background = backcolor
  treeview1.font = Userfont
  treeview1.Foreground = forecolor
  treeview1.Background = backcolor
  
  FileView1.font = Userfont
  FileView1.Foreground = forecolor
  FileView1.Background = backcolor
  
  AlbumGridView.font = Userfont
  AlbumGridView.Foreground = forecolor
  AlbumGridView.Background = backcolor
  'Panel8.background = backcolor
  
  PropertiesGrid.font = Userfont
  PropertiesGrid.Foreground = forecolor
  PropertiesGrid.Background = backcolor
  'Panel7.Background = backcolor
  
  youtubetree.font = Userfont
  youtubetree.Foreground = forecolor
  youtubetree.Background = backcolor
  
  GenresTree.font = Userfont
  GenresTree.Foreground = forecolor
  GenresTree.Background = backcolor
  
  ShutResultGrid.font = userfont
  ShutResultGrid.Foreground = forecolor
  ShutResultGrid.Background = backcolor
  
  PodcastTree.font = Userfont
  PodcastTree.Foreground = forecolor
  PodcastTree.Background = backcolor
  
  ShutResultGrid.font = Userfont
  ShutResultGrid.Foreground = forecolor
  ShutResultGrid.Background = backcolor
  'panel6.Background = backcolor

  SearchField.Font.size = zzzFake.Font.size
  SearchFieldPLS.Font.size = zzzFake.Font.size
  SearchFieldalbums.Font.size = zzzFake.Font.size
  SearchFieldDVB.Font.size = zzzFake.Font.size
  HBox12.background = Color.lighter(Color.Lighter((Hbox12.Parent.background)))
  HBox12.Foreground = Color.black
  Label2.Font.bold = True
  PlayListSelInfo.Foreground = Color.black
  LibrarySelInfo.Foreground = Color.black
  If progressframe.tag = Null Then
    progressframe.background = Color.rgb(0, 0, 0, 210)
    progressframe.tag = True
  Endif
  audioform.init()
  'progressframe.background = Color.SetAlpha(Color.Darker(Color.Darker(Color.SelectedBackground)), 200)
  Initprogress()
End

Public Sub SetStyle_later()
  
  SetSubControlsStyles(AddUriForm)
  SetSubControlsStyles(AskName)
  SetSubControlsStyles(NewChains)
  SetSubControlsStyles(CountDown)
  SetSubControlsStyles(CoverManager)
  SetSubControlsStyles(HotkeyGrab)
  SetSubControlsStyles(HotKeys)
  SetSubControlsStyles(SearchFields)
  SetSubControlsStyles(TextDialog)
  
  covermanager.ResizeShadowTemplate(generaloptions.IconWidthCombobox.text)
  
End

Public Sub SetSubControlsStyles(TheForm As Form)
  'descend into controls and set various attributes:
  
  Dim TheObject As Object
  Dim objvalid As Boolean

  If closing Then Return
  
  For Each TheObject In TheForm.controls
    Try objvalid = (theobject.name = "")
    If Not Error Then 
      If Not Lower(TheObject.Name) = "label2" Then
        Try TheObject.font = GeneralOptions.FontChooseBTN3.font
      Endif
      If Not (theobject Is Menu) Then
        If Not ((TheObject.parent Is Frame) Or (theobject.parent.parent Is Frame)) Then
          Try TheObject.foreground = GeneralOptions.ColorChooseBTN3.Background
        Endif
      Endif
      
      If TheObject.name = "CurrentProfileLabel" Then TheObject.font.bold = True
    Endif
  Next 'TheForm
  
End

Public Sub DelayTimer_Timer()
  
  DelayTimer.stop
  AllInit_Post()
  global.myDebug("Ended at: " & Timer)

End

Private FirstTimeXt7 As Boolean = True ' has the user ever used xt7?
Public havetoshowbrowsetab As Boolean = False
Private PlayFromCommandline As Boolean = False

Private timer_delay_play As Timer

Public Sub MainInit()
  
  Dim AlreadyRunning As Boolean = False

  Dim MySettings As New SettingsClass
  'Disable Shutdown feature at start.

  FirstTimeXt7 = Not (Exist(global.ConfPath))
  ShutOff_Click()
  MakeProfilePath()

  Try Shell "mkdir -p " & Global.ScreenshotFolder & " >/dev/null 2>&1" Wait
  Try Mkdir User.home & "/.config/mpv/"
  covermanager.MakeCoverDirs()

  'TRY TO get a LOCK file:
  Try hLock = Lock global.confpath & "/.lock"
  If Error Then
    AlreadyRunning = True
    If (global.arg_file <> "") Then
      If Not global.arg_new_instance Then
        zzzfake.sock_play(global.arg_file)
        Quit
      Endif
    Endif
  Else
    'as there are no other istances, it's good to remove inputpipes
    Shell "rm " & global.confpath & "/.InputPipes/Xt7Input-* >/dev/null 2>&1" Wait ' To out
    ' Shell "rm " & global.confpath & "/.ExportFiles/* >/dev/null 2>&1" Wait ' 'mpv 0.11 removed af_export filter :(
  Endif

  global.CurrentProfile = MySettings.GetLastProfile(global.confpath)

  If Not (Exist(global.confpath & "/" & global.currentprofile & ".profile")) Then
    global.myDebug("(WW) profile: \"" & global.currentprofile & "\" not found, using a copy of the factory default profile instead.")

    If global.CurrentProfile = "" Then global.CurrentProfile = "default"

    If (Not global.initearlyformsdone) Then InitEarlyForms()

    ReallySaveAllSettings(global.currentprofile, False) 'before loading user settings, make a profile with factory values.
    global.myDebug("Made a new profile: '" & global.CurrentProfile & "' as a copy of the factory default one")

  Endif




  Try UpdateProfilesTabList()

  AllInit_pre()

  If (global.arg_file <> "") Then
  
    FirstPlay = True 'used to  avoid playing media at start when togglepls button is toggled
    Me.mouse = mouse.Wait
    FMain.LoadFormGeometry()
    fmain.Show
    Wait 
  
    If (Not global.arg_append) And (global.arg_file <> "") Then 
      Media_Next_path = DConv(global.arg_file)
      PlayFromCommandline = True 
      If Exist(DConv(global.arg_file), True) Then SetActivePlayQueue("browse")
      If global.IsPlaylist(global.arg_file) Then
        timer_delay_play = New Timer As "timer_delay_play"
        timer_delay_play.delay = 100
        timer_delay_play.Start()
          Else
        Play(DConv(global.arg_file))
      Endif
      
    Endif
    Me.Mouse = mouse.Default
    havetoshowbrowsetab = True
  
      Else
  
    FMain.LoadFormGeometry()
  
    If Not global.arg_start_tray Then fmain.Show
  Endif

  DelayTimer.delay = 1000
  DelayTimer.Start
  
  If (alreadyrunning Or (global.arg_file <> "") Or global.arg_new_instance) Then fmain.Show

  LeftSideTabs_Click()
  global.myDebug("Myinit ended at: " & Timer)

End


Public Sub timer_delay_play_Timer()

  If Not fmain.FullyLoaded Then Return
  timer_delay_play.stop
  Play(DConv(global.arg_file))
  
  'hacky.
    audioform.AutoresizeAudioForm()
End



Public Sub ShowBrowseTabTo(fullpath As String, Optional init As Boolean = True)

  Dim path As String
  Dim tabid As Integer

  If Not Exist(fullpath, True) Then Return
  Try path = file.Dir(fullpath)
  If Error Then 
    global.myDebug("Error, please report ")
    Return
  Endif
  Try tabID = Global.TabIndexByName("browse", Leftsidetabs)
  If Error Then 
    global.myDebug("error, please report")
    Return
  Endif
  Try UrlBox.text = path
  Try FileView1.dir = path
  Wait
  If init Then
    gridpanels_arrange()
    FileView1.ShowDetailed = True
    Leftsidetabs.Index = Tabid
    Wait 0.001
  Endif
    FileView1.Current = file.name(fullpath)
    FileView1.refresh
    Wait 0.001
  

End

Public Sub InitPropertiesGrid()
  
  Dim i As Integer

  PropertiesGrid.Columns.count = 2
  PropertiesGrid.Rows.count = 21
  PropertiesGrid[0, 0].text = "FileName"
  PropertiesGrid[1, 0].text = "Path"
  PropertiesGrid[2, 0].text = "FileSize"
  PropertiesGrid[3, 0].text = "Length"
  PropertiesGrid[4, 0].text = "Type"
  PropertiesGrid[5, 0].text = "Album"
  PropertiesGrid[6, 0].text = "Artist"
  PropertiesGrid[7, 0].text = "Title"
  PropertiesGrid[8, 0].text = "Year"
  PropertiesGrid[9, 0].text = "Genre"
  PropertiesGrid[10, 0].text = "Track No."
  PropertiesGrid[11, 0].text = "Comment"
  PropertiesGrid[12, 0].text = "Audio Channels"
  PropertiesGrid[13, 0].text = "Audio Rate"
  PropertiesGrid[14, 0].text = "Audio Codec"
  PropertiesGrid[15, 0].text = "Audio Bitrate (Actual) "
  PropertiesGrid[16, 0].text = "Video Resolution"
  PropertiesGrid[17, 0].text = "Video Fps"
  PropertiesGrid[18, 0].text = "Video Codec"
  PropertiesGrid[19, 0].text = "Video Bitrate (Actual) "
  PropertiesGrid[20, 0].text = "Total Bitrate (Avg.)"
  
  For i = 0 To PropertiesGrid.Rows.count - 1
    PropertiesGrid[i, 0].Font.bold = True
  Next 'i
  
  PropertiesGrid.Columns[0].Width = "-1"      'Autosize Columns
  
End

Private Function OneOf(one As String, two As String) As String
  
  If one <> "" Then
    Return one
  Else
    Return two
  Endif
  
End

Private Function cdda_track_name(chapter As String) As String
  Dim ct As Integer
  Try ct = CInt(chapter) 
  Try Return Split(mplayer.getP("cddbtracks")[ct], Chr(8), "", False)[0]
  Return "0"
End


Public Sub FillPropertiesGrid()
  Dim i As Integer
  Dim cTime As Integer = 0
  Dim audio_codec As String = ""
  Dim chapter As Integer
  Dim tracklist_current_audio As Integer = 0
  
  If Not mplayer.ProcessRunningOvr() Then Return
  
  For i = 0 To PropertiesGrid.Rows.count - 1
    PropertiesGrid[i, 1].Text = ""
  Next 'i
  
  PropertiesGrid[0, 1].text = mplayer.getP("fullpath")
  PropertiesGrid[1, 1].text = File.Name(mplayer.getP("fullpath"))

  PropertiesGrid[2, 1].text = mplayer.getP("size")
  PropertiesGrid[3, 1].text = mplayer.getP("duration")
  PropertiesGrid[4, 1].text = mplayer.getP("file-format")

  PropertiesGrid[12, 1].text = mplayer.getP("=audio-params/channels")
  PropertiesGrid[13, 1].text = mplayer.getP("=audio-params/samplerate")
  'PropertiesGrid[14, 1].text = mplayer.getP("audio-codec")
  Try tracklist_current_audio = mplayer.getP("tracklist-current-audio")
  PropertiesGrid[14, 1].text = mplayer.getP("track-list/" & tracklist_current_audio & "/codec")
  'Try PropertiesGrid[15, 1].text = (CInt(mplayer.get_property_mpv("=audio-bitrate")) Div 1000) & "Kbps"
  Try PropertiesGrid[15, 1].text = mplayer.get_property_mpv("audio-bitrate")

  If Not mplayer.getP("audioonly") Then
    PropertiesGrid[16, 1].text = mplayer.getP("width") & "x" & mplayer.getP("height")
    PropertiesGrid[17, 1].text = mplayer.getP("container-fps")
    If PropertiesGrid[17, 1].text Like "*unavailable*" Then
      PropertiesGrid[17, 1].text = mplayer.get_property_mpv("estimated-vf-fps")
    Endif
    PropertiesGrid[18, 1].text = mplayer.getP("video-codec")
    'Try PropertiesGrid[19, 1].text = (CInt(mplayer.get_property_mpv("=video-bitrate")) Div 1000) & "Kbps"
    Try PropertiesGrid[19, 1].text = mplayer.get_property_mpv("video-bitrate")
  Else

      PropertiesGrid[5, 1].text = mplayer.getP("Album")
      PropertiesGrid[6, 1].text = OneOf(mplayer.getP("artist"), mplayer.getP("author"))

     
      PropertiesGrid[8, 1].text = OneOf(mplayer.getP("year"), mplayer.getP("creationdate"))
      PropertiesGrid[9, 1].text = mplayer.getP("genre")
      
      PropertiesGrid[10, 1].text = mplayer.getP("trackno")
      If PropertiesGrid[10, 1].text Like "*unavailable*" Then 
        If mplayer.getP("fullpath") Like "*.cue" Then
          Try chapter = CInt(mplayer.getP("=chapter")) + 1
          Try PropertiesGrid[10, 1].text = CStr(chapter)
        Endif
      Endif


      PropertiesGrid[7, 1].text = OneOf(mplayer.getP("title"), mplayer.getP("name"))
      If PropertiesGrid[7, 1].text Like "*unavailable*" Then 
        If mplayer.getP("fullpath") Like "*.cue" Then
          Try PropertiesGrid[7, 1].text = CStr(mplayer.get_property_mpv("chapter-metadata/title"))
        Endif
      Endif

      
      PropertiesGrid[11, 1].text = OneOf(mplayer.getP("Comment"), mplayer.getP("Comments"))

  Endif
  Try cTime = CInt(Split(mplayer.getP("=duration"), ".", "", True)[0])
  Try PropertiesGrid[20, 1].text = CStr((CInt(mplayer.getP("size")) * 8) Div cTime)
  If PropertiesGrid[20, 1].text = 0 Then 
    Try PropertiesGrid[20, 1].text = ">=" & CStr((CInt(mplayer.getP("=audio-bitrate")) Div 1000) + (CInt(mplayer.getP("=video-bitrate")) Div 1000)) 
  Endif
  PropertiesGrid[20, 1].text &= "Kbps"
  
  
  PropertiesGrid.Columns[1].Width = "-1"      'Autosize Columns
  
  'init pretty panel too
  audioform.UpdateCell(audioform.gridup, 0, 1, PropertiesGrid[6, 1].text) 'artist
  audioform.UpdateCell(audioform.gridup, 1, 1, PropertiesGrid[5, 1].text) 'album
  audioform.UpdateCell(audioform.gridup, 2, 1, PropertiesGrid[8, 1].text)
  audioform.UpdateCell(audioform.gridup, 3, 1, PropertiesGrid[7, 1].text) 'year
  audioform.UpdateCell(audioform.gridup, 4, 1, PropertiesGrid[11, 1].text) 'comment
  
  'commented out the very next because this will be filled by mpv when the name property changes.
  'audioform.label18.text = PropertiesGrid[1, 1].text
  
  'audioform.label19.text = PropertiesGrid[3, 1].text
  If Trim(PropertiesGrid[2, 1].text) <> "" Then 
    audioform.UpdateCell(audioform.griddown, 3, 1, PropertiesGrid[2, 1].text & "KB")
  Else
    audioform.UpdateCell(audioform.griddown, 3, 1, ("Unknown"))
  Endif
  Try audio_codec = Split(Trim(PropertiesGrid[14, 1].text), " ", "", True)[0]
  If audio_codec <> "" Then audioform.UpdateCell(audioform.griddown, 4, 1, audio_codec)
  If (Trim(PropertiesGrid[15, 1].text) <> "") Then audioform.UpdateCell(audioform.griddown, 4, 1, audioform.griddown[4, 1].text & "@" & PropertiesGrid[15, 1].text)
  If (Trim(PropertiesGrid[12, 1].text) <> "") Then audioform.UpdateCell(audioform.griddown, 4, 1, audioform.griddown[4, 1].text & ", " & ("Channels") & ": " & PropertiesGrid[12, 1].text)
  If (Trim(PropertiesGrid[13, 1].text) <> "") Then audioform.UpdateCell(audioform.griddown, 4, 1, audioform.griddown[4, 1].text & ", " & ("Rate") & ": " & PropertiesGrid[13, 1].text & "Hz")


  
  If (global.IsAudioFile(mplayer.getP("fullpath"))) Or (global.IsNetworkURI(mplayer.getP("fullpath"))) Or (Lower(mplayer.getP("fullpath")) Like "cdd?://*") Then
    audioform.AutoresizeAudioForm()
  Endif

End


Public Sub mplayer_user_stopping(fullpath As String, timepos As String, percent As String)
  If Not (global.IsNetworkURI(mplayer.getP("fullpath"))) Then
    Try addhistory(fullpath, Split(timepos, ".,")[0], "userstopped", percent)
    If Error Then 
      global.myDebug("could not add timepos to " & fullpath)
      addhistory(fullpath, -1, False, percent)
    Endif
  Endif
End

Public Sub Form_Close()
  Dim MySettings As New SettingsClass
  Dim t0 As Float = Timer()
  Dim wasrunning As Boolean = False
  Dim fullpath, currenttime, percent As String

  Closing = True
  percent = mplayer.get_property_mpv("percent-pos", True, 1, True)
  Try wasrunning = mplayer.ProcessRunningOvr()
  Object.Detach(mplayer)

  If wasrunning Then
    fullpath = mplayer.getP("fullpath")
    currenttime = mplayer.CurrentTime()
    ButtonStop_Click() 'this one has to come after the previous two assignments
    If Not (global.IsNetworkURI(fullpath)) Then
      AddHistory(fullpath, CurrentTime, True, percent) 
    Endif
  Endif

  Try Shell "rm -R " & global.ConfPath & "/" & "thumbcontainer.* &>/dev/null"
  StartClass.ProcessSignals(False)
  If buttoncapture.value Then StopDumping()
  
  Try Unlock hLock
  Repeat
    FMain.Mysocket.Close
  Until FMain.Mysocket.status = Net.inactive
  global.myDebug("closed socket")
  
  Try HotKeys.xbindkeys.kill
  
  ChooseAspect.visible = False
  'it is needed for lockfile and local socket to be correctly freed:
  Try TrayIcon2.Delete 'fixme trayicon

  

  fmain.SaveFormGeometry()
  Me.hide

  ButtonStop_Click() 'don't remove me.
  
  Try AddUriForm.hide
  Try AskName.hide
  Try AudioForm.hide
  Try NewChains.hide
  Try ChooseAspect.hide
  Try CountDown.hide
  Try CoverManager.hide
  Try DVBTuner.hide
  Try FMain.hide
  Try OpenSubtitesForm.hide
  Try GeneralOptions.hide
  Try HotKeyGrab.hide
  Try HotKeys.hide
  Try LogWindow.hide
  Try MyAskName.hide
  Try MyQuestion.hide
  Try OverlayTrayTip.hide
  Try ProfileManager.hide
  Try Searchfields.hide
  Try ServiceForm.hide
  Try SubAndOsd.hide
  Try TextDialog.hide
  Try TranslationNeeded.hide
  Try Newchains.hide
  Try VideoEqualizer.hide
  ' Try XConfigureAudioDriver.hide
  ' Try XConfigureVideoDriver.hide
  Try Xt7Egg.hide
  Try zzzFake.hide
  Try realtimeform.hide
  Try EpgForm.hide
  'Try ButtonMenu.hide
  Try ladspahelper.hide
  Try FormLyrics.hide
  Try AudioConvert.hide
  global.myDebug("hidden all forms")

  If ChooseAspect.visible Then ChooseAspect.CancelBtn_Click
  
  'delete temporary covers on exit:
  Try Shell "rm -R " & global.confpath & "/covertmp/* >/dev/null 2>&1" Wait
  'delete temporary screenshots on exit (if any)
  Try Shell "rm -R " & global.confpath & "/.xt7-screenshots/* >/dev/null 2>&1" Wait
  
  If (fsform.FullScreen = True) Then FullScreenSwitch()
  If mplayer.ProcessRunningOvr() Then
    mplayer.do_stop()
  Endif
  global.myDebug("post command executed")
  global.kill_players()
  global.myDebug("mpv stopped")
  Try HotKeys.xbindkeys.kill
  global.myDebug("xbindkeys killed")

  If fmain.fullyloaded Then
    If GeneralOptions.SaveOnExitCHK.value = True Then
      Try Global.SaveAllSettings(global.CurrentProfile)
      If Error Then 
        global.myDebug("couldn't save all settings at exit as requested...")
      Else
        global.myDebug("All settings saved")
      Endif
    Else
      global.SaveMandatorySettings(global.CurrentProfile)
    Endif
  Endif


  If global.arg_profile_default <> "" Then
    'save the profile the user want as default (--profile-default)
    MySettings.WriteLastProfile(Global.confpath, global.arg_profile_default) 
    global.myDebug("wrote last profile", global.arg_profile_default)
      'save the current profile only if it differs from the temporary profile the user selected with --profile
      Else If (global.arg_profile <> global.CurrentProfile) Then
        MySettings.WriteLastProfile(Global.confpath, global.currentprofile) 
        global.myDebug("wrote last profile", global.currentprofile)
  Endif

  get_and_save_allowed_options(global.mpv_allowed_options_file)
  global.myDebug("wrote mpv allowed options file")


  'stop any epg scanning instance
  epgform.StopScan()
  
  'this allow to close the Fake form.
  'Try Application.MainWindow.Close 'crashes!
  fmain.close
  zzzFake.Close
  
  Try AddUriForm.close
  Try AskName.close
  Try AudioForm.close
  Try NewChains.close
  Try ChooseAspect.close
  Try CountDown.close
  Try CoverManager.close
  Try DVBTuner.close
  Try FMain.close
  Try GeneralOptions.close
  Try OpenSubtitesForm.close
  Try HotKeyGrab.close
  Try HotKeys.close
  Try LogWindow.close
  Try MyAskName.close
  Try MyQuestion.close
  Try OverlayTrayTip.close
  Try ProfileManager.close
  Try Searchfields.close
  Try ServiceForm.close
  Try SubAndOsd.close
  Try TextDialog.close
  Try TranslationNeeded.close
  Try NewChains.close
  Try VideoEqualizer.close
  ' Try XConfigureAudioDriver.close
  ' Try XConfigureVideoDriver.close
  Try Xt7Egg.close
  Try realtimeform.close
  Try dbus.Session.Unregister(mpris)
  Try epgform.close
 'Try ButtonMenu.close
  Try fsform.close
  Try ladspahelper.close
  Try FormLyrics.close
  Try AudioConvert.close 
  Try HotKeyGrabMpv.close
  
  'Deduplicate covers every now ant then...
  If (Rnd(0, 10) > 9) Then 
    Try global.Dedupe(global.confpath & "/covers/")
  Endif
  
  global.myDebug("time to close = " & CStr(Timer() - t0))
  Print "Bye"
  Wait 0.5
  Quit
End

Public ForcedZoomRT As String = "" 'leave "NOBARS" "HALFBARS" or empty

Public Sub CorrectAreaAspect()
  'this sets the draweing area of the form to the aspect of the video
  Dim dW As Integer = 4
  Dim dH As Integer = 3
  Dim AR As Float = 1.333
  Dim ARv As Float = videobox.w / videobox.h
  Dim f As Float
  Dim videodisplay_w, videodisplay_h As Integer
  Dim barsize As Integer 
  Dim NoBarResize, halfbarresize As Float

  Dim no_video As Boolean = True
 
  If zzzfake.YTPanel.Parent = outerbox Then YTPanel_myrefresh()
 
  Try no_video = mplayer.getP("audioonly")
  If no_video Then Return

  If Not mplayer.ProcessRunningOvr() Then Return

  If fmain.closing Then Return
  If global.IsImgFile(mplayer.getP("fullpath")) Then mplayer.do_seek(0)
  
  If ForcedAspectRT = "default" Then
    Try dW = mplayer.getP("video-params/dw")
    Try dH = mplayer.getP("video-params/dh")
    AR = dW / dH
      Else
    Try AR = CFloat(ForcedAspectRT)
    If Error Then AR = 16 / 9
  Endif


  If AR > ARv Then
    videodisplay_w = videobox.w
    videodisplay_h = videobox.w / AR
    barsize = videobox.h - videodisplay_h
    Try nobarresize = Log2((videobox.h / videodisplay_h)) 
    Try Halfbarresize = Log2(((barsize / 2) + videodisplay_h) / videodisplay_h)
      Else
    videodisplay_h = videobox.h
    videodisplay_w = videobox.h * ar
    barsize = videobox.w - videodisplay_w
    Try nobarresize = Log2((videobox.w / videodisplay_w))
    Try Halfbarresize = Log2(((barsize / 2) + videodisplay_w) / videodisplay_w) 
  Endif

  'apply the zoom factor:
  Select Case ForcedZoomRT
    Case "NOBARS"
      ResizeFactor = NoBarResize
    Case "HALFBARS"
      ResizeFactor = Halfbarresize 
  End Select

  Object.Lock(realtimeform.PanscanSlider)
  realtimeform.PanscanSlider.value = resizefactor * 10000
  Object.unLock(realtimeform.PanscanSlider)
  VideoBox.move(0, 0, outerbox.w, outerbox.h)
  mplayer.set_property_mpv("video-zoom", Replace(CStr(resizefactor), ",", "."))

End

Public Sub SaveFormGeometry()
  
  Dim PrevScreenX As Integer = fmain.screenx
  Dim PrevScreeny As Integer = fmain.screeny
  SubSaveFormGeometry(fmain.x - fmain.screenx, fmain.y - fmain.screeny)
End

Public Sub SubSaveFormGeometry(offsetx As Integer, offsety As Integer)
  
  Dim myfile As File
  Dim myfilename As String = global.confpath & "/" & "fmain.geometry"
  Dim maximized As String
  
  If fmain.maximized Then 
    maximized = "T"
  Else
    maximized = "F"
  Endif

  
  myfile = Open myfilename For Write Create
  Print #myfile, CStr(fmain.screenx + offsetx) & ";" & CStr(fmain.screeny + offsety) & ";" & fmain.w & ";" & fmain.h & ";" & Maximized & ";"
  Close #myfile

End

Public Sub LoadFormGeometry()
  
  Dim myfile As File
  Dim myfilename As String = global.confpath & "/" & "fmain.geometry"
  Dim geometry As String
  Dim rx, ry, rw, rh As Integer
  
  If Exist(myfilename, True) Then
    myfile = Open myfilename For Read
    Try Line Input #myfile, geometry
    If Not Error Then
      Try rx = Split(geometry, ";", "", True)[0]
      Try ry = Split(geometry, ";", "", True)[1]
      Try rw = Split(geometry, ";", "", True)[2]
      Try rh = Split(geometry, ";", "", True)[3]
      Try fmain.maximized = (Split(geometry, ";", "", True)[4] = "T")
      fmain.Move(rx, ry, rw, rh)
    Endif
    Close #myfile
  Endif
  fmain.refresh

End

Public Sub Form_Resize()
  Dim menuheight As Integer = 0
  
  If fmain.Menus.Visible Then menuheight = fmain.Font.textheight("Ij") + 4
  If mplayer.ProcessRunningOvr() Then UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
  
  If fmain.h < controlframe.h + Maintoolbar.h + statusbar1.h + menuheight Then fmain.h = controlframe.h + Maintoolbar.h + statusbar1.h + menuheight
  If fmain.w < 500 Then fmain.w = 500
  
  CostrainFormSizes()
  CorrectAreaAspect()
  Try fmain.Picture = fmain.Picture.Image.Stretch(fmain.w, fmain.h).picture
  HSplit1_Resize()
End

Public Sub ButtonOpen_Click()
  If Not fullyloaded Then Return
  With Global
    If MyDialog.path = "" Then myDialog.Path = .StartFolder
    myDialog.filter = [.Multimediafilter, .Multimediafiltername, .videofilter, .videofiltername, .audiofilter, .audiofiltername]
  End With
  If myDialog.OpenFile() Then Return
  Media_Next_path = DConv(myDialog.Path)
  TogglePls.value = False
  Play(DConv(myDialog.Path))
End

Private prevmpoutput As String = "__________"
Private repeatedmpoutlines As Integer = 0

Public Sub mplayeroutputavailable(outline As String)
  
  If (Trim(outline) <> "") Then
    If mplayer.gotheaders Then
      If Not (outline Like "*A:*") Then
        If Not (outline Like "*V:*") Then
          LogWindow.LogArea.pos = Len(LogWindow.LogArea.text) 'go to the end
          
          If Trim(outline) = prevmpoutput Then          'we get a dupe message,
            Try repeatedmpoutlines = repeatedmpoutlines + 1
          Else
            repeatedmpoutlines = 0
          Endif
          If repeatedmpoutlines > 30 Then
            If (repeatedmpoutlines Mod 5) = 0 Then
              LogWindow.LogArea.Insert("R ") 'write "."
              LogWindow.Label2.visible = True
            Endif
          Else
            'put something on the log, but skip program_id lines (from dvb-t)
            If Not (outline Like "*PROGRAM_ID=*") Then LogWindow.LogArea.Insert(outline & "\n")
            prevmpoutput = Trim(outline)
          Endif
        Endif
      Endif
    Endif
  Endif
  
End

Public Sub GridRefreshWorkaround(librarygrid As Gridview)
  'seems something has a bug here and scrollbars didn't show up at first.
  librarygrid.Rows.h = librarygrid.Rows.h
  Object.SetProperty(librarygrid.parent, "Padding", Object.GetProperty(librarygrid.parent, "Padding") + 1)
  Object.SetProperty(librarygrid.parent, "Padding", Object.GetProperty(librarygrid.parent, "Padding") - 1)
End


Public Sub test()

  youtubeTree_Activate()
  
End



Public Sub ButtonStop_Click()
  Try mousehider.stop
  Try TimerFullScreen.Stop
  Try mplayer.event_loop.stop
  Try DelayTimer.stop

  Try global.Preload_file_bg_stop()
  'Try timer_runtime_infos.stop()
  Try timerqueue.stop()
  switchresBTN.enabled = True
  global.mouse_wait(fmain, False)
  InitABLoop()
  Stopmthumbler()
  previousfile_cover = ""
  videobox.cached = False
  zzzfake.PanelNowNext.visible = False
  If buttoncapture.value Then StopDumping()
  buttoncapture.enabled = False
  buttoncapture.visible = buttoncapture.enabled
  ABLoopButton.visible = False
  ArrangeCpl()
  Try LibraryGrid.Columns[0].Refresh
  myopensubs.clear 'needed to avoid hammering opensubtitles.org
  mplayer.do_stop
  VideoBox.Refresh
  ShowAudioPanel(False)
  menuchapters.enabled = False
  aspectmenu.visible = False
  videobox.clear
  Try ClearStreamsMenu()
  Try epgform.dvbsnoop.Stopit()
  ButtonNowNext.Hide()
  ChaptersBtn.Hide()
  ArrangeCpl()
  'UpdateSeekSlider() 'fixmempv cambiati header
  'SeekBar_Change() 'fixmempv cambiati header
  randr.Xmode_from_obj_restore()
End

Public Sub Buttonfwd_Click()

  mplayer.do_ffwd()

End

Public Sub ButtonRew_Click()

  mplayer.do_slow

End


Public Sub ButtonPlay_Click()
  If mplayer.ProcessRunningOvr() Then
    If mplayer.Paused() Then
      ButtonPlay.picture = Picture["media-playback-pause.png"]
      mplayer.do_leave_pause()
    Else
      mplayer.do_pause()
      ButtonPlay.picture = Picture["media-playback-start.png"]
    Endif
  Else
    Play(Media_Next_path)
  Endif
  fmain.videoboxproxy.SetFocus
  If TabSelectedYoutube() Then Try customtitle = youtubetree.Current.text
End


Public Sub ClearStreamsMenu()
  
  ' Dim child As Menu
  ' 
  ' Repeat
  '   'clear all previous sub-menus
  '   For Each child In Streamsaudiomenu.Children
  '     child.delete
  '   Next 'child
  ' Until (Streamsaudiomenu.Children.count = 0)
  ' Repeat
  '   For Each child In Streamssubtitlesmenu.Children
  '     child.delete
  '   Next 'child
  ' Until (Streamsaudiomenu.Children.count = 0) And (Streamssubtitlesmenu.Children.count = 0)
  ClearMenu(Streamsaudiomenu)
  ClearMenu(Streamssubtitlesmenu)
  
  
End

Public Sub ClearMenu(target As Menu)

  Dim child As Menu
  Repeat
    For Each child In target.Children
      child.delete
    Next 'child
  Until target.children.count = 0

End

Public Sub ClearChaptersAndTitlesMenu()
  Dim child As Menu
  Repeat
    'clear all previous sub-menus
    For Each child In MenuTitles.Children
      child.delete
    Next 'child
  Until (Menutitles.Children.count = 0) 'AND (Streamssubtitlesmenu.Children.count = 0)
End

Private menuopensubsearchbyhash As Menu
Private fakemenu As Menu

Public Function FillStreamsMenu()
  
  Dim i As Integer
  Dim AudioMenu, SubMenu, PrimaryMenu, SecondaryMenu As Menu
  Dim menuopensubtitles As Menu
  
  Dim menuopensubsearchmanual As Menu
  Dim menuopensubconfigurelanguages As Menu
  'read audiotracks and subtitletracks from mplayer class
  'and compile streams menu accordingly
  Streamsmenu.Enabled = ((mplayer.getP("audiotracks").count > 0) Or (mplayer.getP("subtitletracks").count > 0))
  If Streamsmenu.enabled Then
    Streamsaudiomenu.Enabled = (mplayer.getP("audiotracks").count > 0)
  Endif
  ClearStreamsMenu()


  'fill audio streams menu
  If Streamsaudiomenu.enabled Then
    For i = 0 To mplayer.getP("audiotracks").count - 1
      AudioMenu = New Menu(Streamsaudiomenu) As "Menuswitchaudio"
      AudioMenu.name = "AudioMenuID" & i
      AudioMenu.caption = mplayer.getP("audiotracks")[i]
      AudioMenu.picture = Picture["icon:/small/audio"]
    Next 'i
  Endif
  
  'allow to load a track from disk
  Streamsaudiomenu.enabled = True
  AudioMenu = New Menu(Streamsaudiomenu) 'separator
  AudioMenu.caption = "" 'separator
  AudioMenu = New Menu(Streamsaudiomenu) As "MenuAddAudio"
  AudioMenu.name = "MenuAddAudio"
  AudioMenu.caption = ("Add an external audio track")
  AudioMenu.picture = Picture["icon:/small/add"]


  'fill sub streams menu
  'add submenutree to select primary subtitle
  PrimaryMenu = New Menu(Streamssubtitlesmenu) As "MenuPrimarySub"
  PrimaryMenu.name = "SecondarySub"
  PrimaryMenu.caption = ("Primary subtitles")

  'add submenutree to select secondary subtitle
  SecondaryMenu = New Menu(Streamssubtitlesmenu) As "MenuSecondarySub"
  SecondaryMenu.name = "SecondarySub"
  SecondaryMenu.caption = ("Secondary subtitles")


  'add a menu item to disable primary subtitles:
  SubMenu = New Menu(PrimaryMenu) As "MenuDisablePrimarySubs"
  SubMenu.name = "DisablePrimarySubs"
  SubMenu.caption = ("Don't display primary subtitles")
  
  'add a menu item to disable secondary subtitles:
  SubMenu = New Menu(SecondaryMenu) As "MenuDisableSecondarySubs"
  SubMenu.name = "DisableSecondarySubs"
  SubMenu.caption = ("Don't display secondary subtitles")
  

  'fill in available subtitles,
  If mplayer.getP("subtitletracks").count > 0 Then
    For i = 0 To mplayer.getP("subtitletracks").count - 1
      'primary
      SubMenu = New Menu(PrimaryMenu) As "MenuswitchsubPrimary"
      SubMenu.name = "SubMenuID" & i
      SubMenu.tag = mplayer.getP("subtitletracks")[i]
      SubMenu.caption = submenu.tag
      'secondary
      SubMenu = New Menu(SecondaryMenu) As "MenuswitchsubSecondary"
      SubMenu.name = "SubMenuID" & i
      submenu.tag = mplayer.getP("subtitletracks")[i]
      SubMenu.caption = submenu.tag
    Next 'i
  Endif



  SubMenu = New Menu(Streamssubtitlesmenu) As "MenuLoadSubtitle"
  SubMenu.name = "Streamssubtitlesmenu"
  SubMenu.caption = ("Load from disk...")
  submenu.Picture = picture["icon:/medium/insert-text"]
  
  'opensubtitles.org:
  menuopensubtitles = New Menu(Streamssubtitlesmenu) As "menuopensubtitles"
  menuopensubtitles.caption = ("Ask Opensubtitles.org")
  menuopensubtitles.picture = picture["opensubtitles.png"]
  menuopensubconfigurelanguages = New Menu(menuopensubtitles) As "menuopensubconfigurelanguages"
  menuopensubconfigurelanguages.caption = (("Configure preferred languages"))
  menuopensubconfigurelanguages.picture = picture["icon:/16/options"]
  
  menuopensubsearchmanual = New Menu(menuopensubtitles) As "menuopensubsearchmanual"
  menuopensubsearchmanual.caption = (("Manual search"))
  menuopensubsearchmanual.picture = picture["icon:/16/find"]
  
  ' menuopensubsearchbyname = New Menu(menuopensubtitles) As "menuopensubsearchbyname"
  ' menuopensubsearchbyname.caption = (("By Name (guess):"))
  ' menuopensubsearchbyname.picture = picture["icon:/16/wizard"]
  ' 'FillOpensubtitleLanguages(menuopensubsearchbyname)
  
  menuopensubsearchbyhash = New Menu(menuopensubtitles) As "menuopensubsearchbyhash"
  menuopensubsearchbyhash.caption = (("I feel lucky"))
  menuopensubsearchbyhash.picture = picture["icon:/16/wizard"]
  ''L
  fakemenu = New Menu(menuopensubsearchbyhash)
  fakemenu.text = ("Please Wait...")
  fakemenu.picture = picture["icon:/16/clock"]
  fakemenu.enabled = False

End






Public Sub FillChaptersMenu()
  Dim aChapter As Chapter
  Dim Chapters As Chapter[]
  Dim chaptermenu As Menu
  Dim i As Integer
  Try ClearMenu(menuchapters)
  ChaptersBtn.visible = False
  menuchapters.enabled = False
  Try chapters = mplayer.get_chapters()
  If chapters = Null Then Return
  ChaptersBtn.visible = chapters.count > 1
  If chapters.count = 0 Then Return

  menuchapters.enabled = True
  i = 0
  For Each aChapter In chapters
    'global.myDebug(aChapter.title, aChapter.start_time)
    chaptermenu = New Menu(menuchapters) As "chapter_menu_item"
    chaptermenu.tag = i
    chaptermenu.Picture = stock["small/play"]
    chaptermenu.Text = "[" & mplayer.FormatTime(aChapter.start_time) & "] - " & aChapter.title
    i += 1
  Next 'aChapter
End

Public Sub chapter_menu_item_Click()
  If Not mplayer.ProcessRunningOvr() Then Return
  mplayer.set_property_mpv("chapter", Last.tag)
End


Public Sub menuopensubconfigurelanguages_Click()

  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.show
  Try GeneralOptions.TabStrip1.index = Global.TabIndexByName(("Language"), GeneralOptions.TabStrip1)

End

Public Function menuopensubsearchmanual_Click()

  OpenSubtitesForm.Show()

End




Public Function dvd_device(fullpath As String) As String
  'dvd://24//path/to/dvd/device -> /path/to/dvd/device
  'dvd://dev/sr0  -> /dev/sr0
  'dvd://1 -> "/"
  'dvd:// -> "/"
  'dvd://menu//path/to/something -> "/path/to/something"
  Dim t As String
  Dim ret As String

  Try t = Split(fullpath, "/", "", True)[1] ' dvd://24//path/to/dvd/device -> 24
                                            ' dvd:// -> ""
                                            ' dvd:///path/to/dvd/device -> path
  If IsInteger(t) Or (t = "menu") Then 
     ret = Replace(fullpath, "dvd://" & t, "")
       Else
     ret = Replace(fullpath, "dvd://", "")
   Endif
   If Left(ret, 1) <> "/" Then ret = "/" & ret
   Return ret
End



Public Function FillTitlesAndChaptersMenu() As Boolean
  Dim dtl, dcl, t, l, k, c, p, lk As String = ""
  Dim ct, pt, timeout As Integer = 0
  Dim lengths As String[]
  Dim SubMenu As Menu 
  Dim ddevice As String

  ClearChaptersAndTitlesMenu()
  If Not mplayer.ProcessRunningOvr() Then Return False
  p = mplayer.get_property_mpv("path", True, 10, True)
  If p = "" Then Return
  ddevice = "/" & dvd_device(p)
  dtl = mplayer.get_property_mpv("=disc-title-list", True, 10)

  If dtl = "" Then
    global.myDebug(("Could not get information about the dvd structure"))
    Return
  Endif
  dtl = Replace(dtl, "[", "")
  dtl = Replace(dtl, "]", "")
  dtl = Replace(dtl, "},{", Chr(8))
  dtl = Replace(dtl, "{", "")
  dtl = Replace(dtl, "}", "")
  lengths = New String[]
  For Each t In Split(dtl, Chr(8), "", True)
    l = (Split((Split(t, ",")[1]), ":")[1]) 
    Wait 0.005
    l = mplayer.FormatTime(Split(l, ".")[0])
    lengths.Add(l)
    Wait 0.005
  Next
  global.myDebug("")
  treeview1.Clear
  If lengths.count > 1 Then
    Menutitles.Enabled = True
    For ct = 0 To (lengths.count - 1)
      k = "dvd://" & CStr(ct) & ddevice
      c = ("Title ") & makeN(ct, 2) & " - " & "[" & lengths[ct] & "]"
      SubMenu = New Menu(Menutitles) As "MenuswitchTitle"
      SubMenu.name = k
      SubMenu.caption = c
      Submenu.picture = picture["icon:/small/book"]
      treeview1.Add(k, c, picture["icon:/16/directory"])
   Next 'title
   If Not (Lower(p) Like "dvd://menu*") Then
    Try treeview1.movefirst
      Try pt = CInt(mplayer.get_property_mpv("=disc-title", True, 10, False))
      For ct = 0 To pt - 1
        Try treeview1.MoveBelow()
      Next
      If Not Error Then 
        Try treeview1.Item.selected = True
        lk = treeview1.Item.Key
        'fill chapters
        dcl = mplayer.get_property_mpv("=chapter-list", True, 10)
        dcl = Replace(dcl, "[", "")
        dcl = Replace(dcl, "]", "")
        dcl = Replace(dcl, "},{", Chr(8))
        dcl = Replace(dcl, "{", "")
        dcl = Replace(dcl, "}", "")
        For Each t In Split(dcl, Chr(8), "", True)
          l = (Split((Split(t, ",")[1]), ":")[1]) 
          Wait 0.005
          c = mplayer.FormatTime(Split(l, ".")[0])
          k = "chapter|" & pt & "|" & l
          treeview1.Add(k, c, Picture["icon:/16/play"], lk)
          Wait 0.005
        Next
        treeview1.MoveTo(lk)
        treeview1.item.Expanded = True
        treeview1.Item.EnsureVisible()
      Endif
     SetActivePlayQueue("dvd")
    Endif
   Endif
End



Public Function makeiso6392(langcode As String) As String
  'convert from 2 digits langcodes to 3digits langcodes

  Dim lang As String = ""
  For Each lang In generaloptions.SlangComboBox.List
    If (lang Like langcode & "*") Then
      lang = Split(lang, ",", "", True)[0]
      Break
    Endif
  Next
  If lang = "" Then 
    Return langcode
  Else
    Return lang
  Endif

End

Private OpenSubs As New OpenSubtitlesAPI

Private TimerMenuHashSearch As New Timer As "TimerMenuHashSearch"

Public Sub menuopensubsearchbyhash_Show()

  Dim currentmovie As String
  currentmovie = mplayer.getP("fullpath")
  If global.IsNetworkURI(currentmovie) Then Return
  
  If Not (global.IsVideoFile(currentmovie)) Then Return
  
  TimerMenuHashSearch.delay = 1
  TimerMenuHashSearch.start

End

Private myopensubs As New Collection[]

Public Sub TimerMenuHashSearch_timer()

  Dim token As String
  Dim mysub As Collection
  Dim menuitemopensubtitle As Menu
  Dim langcode As String
  Dim menuopensublang As Menu
  Dim preferredlangs As New String[]
  Dim moviehash As String
  Dim filesize As String
  Dim AllLangs As String
  Dim tmplang As String
  Dim currentmovie As String
  
  currentmovie = mplayer.getP("fullpath")
  
  If Not mplayer.ProcessRunningOvr() Then Return
  
  TimerMenuHashSearch.stop
  
  token = OpenSubs.TokenFromLogIn("", "", "en", OpenSubs.defaultagent)
  If token = -1 Then
    global.myDebug("Sorry, couldn't take the token from opensubtitles.org")
    fakemenu.text = ("Token error")
    fakemenu.picture = stock["16/error"]
    Return
  Endif
  
  If myopensubs.count = 0 Then
    moviehash = OpenSubs.MovieHash(currentmovie)
    If moviehash = -1 Then
      global.myDebug("Sorry, couldn't calculate the moviehash")
      fakemenu.text = ("Hash error")
      fakemenu.picture = stock["16/error"]
      Return
    Endif
  Endif
  
  For Each langcode In Split(generaloptions.SubLangList.text, ",")
    If (Len(langcode) <> 3) Then langcode = makeiso6392(langcode)
    If preferredlangs.Find(langcode) = -1 Then
      preferredlangs.Add(langcode)
      AllLangs &= langcode & ","
    Endif
  Next
  AllLangs = Left(allLangs, Len(alllangs) - 1)
  
  If myopensubs.count = 0 Then  
    Try filesize = Stat(currentmovie).size
    If Error Then
      global.myDebug("Sorry, couldn't calculate file size")
      fakemenu.text = ("File error")
      fakemenu.picture = stock["16/error"]
      Return
    Endif
  Endif
  
  If myopensubs.count = 0 Then 
    myopensubs = OpenSubs.SearchByHash(token, AllLangs, moviehash, filesize)
    If myopensubs.count = 0 Then
      global.myDebug("Sorry, no hash results from opensubtitles.org")
      fakemenu.text = ("No results")
      fakemenu.picture = stock["16/error"]
      Return
    Endif
  Endif
  
  ClearMenu(menuopensubsearchbyhash)
  For Each langcode In preferredlangs
    menuopensublang = New Menu(menuopensubsearchbyhash) As "menuopensublang"
    menuopensublang.text = langcode
    menuopensublang.picture = picture["icon:/16/language"]
    For Each mysub In myopensubs
      tmplang = "Napoletano!"
      Try tmplang = mysub["SubLanguageID"]
      If tmplang = langcode Then
        menuitemopensubtitle = New Menu(menuopensublang) As "menuitemopensubtitle"
        menuitemopensubtitle.text = mysub["SubFileName"]
        menuitemopensubtitle.tag = mysub["SubDownloadLink"]
      Endif
    Next
  Next

End

Public Sub menuitemopensubtitle_Click()

  Dim suburl As String = Last.tag
  Dim subname As String = Last.text
  Dim subfile As String = Temp() & "." & subname
  Dim fileout As String

  If OpenSubs.savesub(suburl, subfile) Then
    sub_add(DConv(subfile))  'add the subtitle and append it to mplayer.subtitletracks
    Dialog.filter = ["*." & file.Ext(subname), "Subtitle file"]
    Dialog.Title = ("Save the selected subtitle")
    'Dialog.Path = File.Dir(fmain.mplayer.getP("fullpath")) & "/" & subname
    Dialog.Path = File.Dir(fmain.mplayer.getP("fullpath")) & "/" & File.BaseName(fmain.mplayer.getP("fullpath")) & "." & file.ext(subfile)
    If MyQuestion.Ask(("Do you want to save") & " " & subname & "?", "Save", "Don't Save") = 1 Then
      Dialog.SaveFile()
      fileout = Dialog.path 
      If Not (OpenSubs.savesub(suburl, fileout)) Then Message.Error(("Sorry, couldn't save the file"), "Ok")
    Endif
  Endif

End

Public Sub TreeView1_Activate()
  Dim k, stime As String
  k = treeview1.Item.key
  If k Like "chapter*" Then 
    If Not mplayer.ProcessRunningOvr() Then Return
    If Not (mplayer.getP("fullpath") Like "dvd://*") Then Return
    'title = Split(k, "|", "")[1]
    Try stime = Split(k, "|", "")[2]
    If Not Error Then mplayer.do_seek_to(stime, True)
      Else
    Play(k)
    fmain.videoboxproxy.SetFocus
    SetActivePlayQueue("dvd")
  Endif
End


Public Sub TreeView1_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    TreeView1_Activate()
  Endif
  
End

Public Sub MenuswitchTitle_click()
  If mplayer.do_stop() Then
    Play(Last.name)
  Endif
End

' Public Sub MenuswitchChapter_click()
'   
'   Dim ChapterToPlay As Integer
'   Dim Title, chapter As Menu
'   
'   Try ChaptertoPlay = Split(Last.caption, " ")[0]
'   'clear any checked chapter:
'   For Each title In Menutitles.children
'     If (title.Children.count > 0) Then
'       For Each chapter In title.Children
'         chapter.Checked = False
'       Next 'chapter
'     Endif
'   Next 'title
'   
'   'Check the selected chapter
'   Last.checked = True
'   If Not Error Then
'     Stop
'     mplayer.Send("seek_chapter " & ChapterToPlay & " 1")
'   Endif
'   
' End


Public LASTAUDIOID As Integer = -1
'fixmempv is this necessary?  :
'we have to know if the audio has been switched because this crashes mplayer:
'play rai1, switch audio to eng, play rai2 via dvb_set_channel and you get no audio at all, try to choose the audio -> mplayer crash.
'i suspect that when you play rai2 mplayer tries to find the previous audio_id into the new channel.
'anyway, when audioswitched is true, dvb_set_channel may not be used, instead a stop and a play shoild be issued to change channel, sorry.
Public Sub Menuswitchaudio_click()
  Dim brother As Menu
  Dim ID As Integer
  For Each brother In Streamsaudiomenu.Children
    brother.checked = False
  Next
  Last.checked = True
  Try ID = Split(Last.caption, " ")[0] 
  If Not Error Then 
    mplayer.set_property_mpv("aid", id)
    mplayer.ShowText("Audio: " & Last.caption)
    LASTAUDIOID = ID
  Endif

End

Public Sub PowerffBTN_click()
  
  Shutdownmenu.Popup
  
End

Public nosub As Boolean = False

Public Sub MenuDisablePrimarySubs_Click()
  mplayer.set_property_mpv("sid", "no")
  mplayer.ShowText(("Primary subtitles disabled"))
End

Public Sub MenuDisableSecondarySubs_Click()
  mplayer.set_property_mpv("secondary-sid", "no")
  mplayer.ShowText(("Secondary subtitles disabled"))
End

Public Sub MenuswitchsubSecondary_Click()
  Dim brother As Menu
  Dim sid As String '(primo valore con uno spazio splittalo
  For Each brother In Streamssubtitlesmenu.Children
    brother.checked = False
  Next
  Last.checked = True
  sid = Split(Last.tag, " ", "", True)[0]
  mplayer.set_property_mpv("secondary-sid", sid)
  mplayer.ShowText(("Secondary subtitle") & ": " & Last.tag)
End


Public Sub MenuswitchsubPrimary_click()
  Dim brother As Menu
  Dim sid As String '(primo valore con uno spazio splittalo
  For Each brother In Streamssubtitlesmenu.Children
    brother.checked = False
  Next
  Last.checked = True
  sid = Split(Last.tag, " ", "", True)[0]
  mplayer.set_property_mpv("sid", sid)
  mplayer.ShowText(("Primary subtitle") & ": " & Last.tag)
End


Private DbusAlreadyRegistered As Boolean = False

Public Sub ExportDbusProperties()
  If Not DbusAlreadyRegistered Then
    Try dbus.Name = "org.mpris.MediaPlayer2.xt7"
    If Error Then 
     global.myDebug("Error setting up dbus")
      Return
    Endif
    
    
    'Try DBus.Session.Register(mpris, "/org/mpris/MediaPlayer2", ["org.mpris.MediaPlayer2", "org.mpris.MediaPlayer2.Player", "org.mpris.MediaPlayer2.TrackList", "org.mpris.MediaPlayer2.Playlists" ,"org.freedesktop.Dbus.Properties", "org.freedesktop.Dbus.Introspectable"])
     dbus.Session.Register(mpris, "/org/mpris/MediaPlayer2", ["org.mpris.MediaPlayer2", "org.mpris.MediaPlayer2.Player"])
    'Try DBus.Session.Register(mpris, "/org/mpris/MediaPlayer2", ["org.mpris.MediaPlayer2", "org.mpris.MediaPlayer2.Player", "org.freedesktop.DBus.Properties"])
    If Error Then 
      global.myDebug("Error setting up dbus")
      Return
    Endif
  Endif
  Object.Attach(mpris.delay_timer, mpris, "delay_timer")
  DbusAlreadyRegistered = True
  ' DbusProperties.clear()
  ' DbusProperties.FullPath = mplayer.Media_FullPath
  ' DbusProperties.FullPathPlaying = mplayer.Media_FullPath_Playing
  ' DbusProperties.Length = mplayer.Media_Length
  ' DbusProperties.Size = mplayer.Media_Size
  ' DbusProperties.Type = mplayer.Media_Type
  ' DbusProperties.AudioCodec = mplayer.Media_AudioCodec
  ' DbusProperties.AudioBitrate = mplayer.Media_AudioBitrate
  ' DbusProperties.AudioRate = mplayer.Media_AudioRate
  ' DbusProperties.Channels = mplayer.Media_Channels
  ' DbusProperties.VideoCodec = mplayer.Media_VideoCodec
  ' DbusProperties.VideoBitrate = mplayer.Media_VideoBitrate
  ' DbusProperties.VideoFps = mplayer.Media_VideoFps
  ' DbusProperties.Width = mplayer.Media_Width
  ' DbusProperties.Height = mplayer.Media_Height
  ' DbusProperties.VideoOutWidth = mplayer.VideoOut_Width
  ' DbusProperties.VideoOutHeight = mplayer.VideoOut_Height
  ' DbusProperties.Author = mplayer.Media_Author
  ' DbusProperties.Artist = mplayer.Media_Artist
  ' DbusProperties.Genre = mplayer.Media_Genre
  ' DbusProperties.Album = mplayer.Media_Album
  ' DbusProperties.TrackNo = mplayer.Media_TrackNo
  ' DbusProperties.Title = mplayer.Media_Title
  ' DbusProperties.Name = mplayer.Media_Name
  ' DbusProperties.Comment = mplayer.Media_Comment
  ' DbusProperties.Comment = mplayer.Media_Comments
  ' DbusProperties.MyYear = mplayer.Media_Year
  ' DbusProperties.CreationDate = mplayer.Media_CreationDate 

End

'mpv 0.11 removed af_export filter :(
' Public Function VmetersOptionsAndInitIfNeeded(filename As String) As String
' 
'   If GeneralOptions.ShowVmeterCHK.value Then
'     If Not (global.IsVideoFile(filename)) Then
'       If exportfile = "" Then 
'         exportfile = exportfilespath & Int(Rnd(1, 9999))
'       Endif
'       Return exportfile & ":" & GeneralOptions.RmsSizeSpinBox.value
'       audioform.BarBox.visible = True
'     Else
'       audioform.BarBox.visible = False
'     Endif
'   Else
'     audioform.BarBox.visible = False
'   Endif
' 
' End

Public needytcookie As Boolean = False

Private dumpfile As String

Public Function Initialvolume() As String
  Return SaveVolumeSlider.value
End





Public Sub static_options() As Collection
  'Basic and static optionsm they are always the same
  Dim opts As New Collection
  opts["config"] = "no"
  'opts["config-dir"] = global.confpath & "/mpv_config" 'not needed since we won't load an mpv_profile anymore
  'opts["input-conf"] = "/tmp/FakeInput.conf"
  opts["load-scripts"] = "no"
  opts["osc"] = "no"
  opts["dvbin-file"] = User.home & "/.config/mpv/channels.conf.ter"
  opts["wid"] = videobox.handle
  opts["cursor-autohide"] = "no"
  opts["cursor-autohide-fs-only"] = "no"
  'opts["audio-pitch-correction"] = "no"
  opts["audio-display"] = "no"
 
  Return opts
End

Public Function user_options(fullpath As String, Optional force_audio_only As Boolean) As Collection
  'user options configured through gui
  Dim opts As New Collection
  Dim opt As Mpvoption
  Dim sFilter, sSpaces As String

  'initialize uninitialized forms and load settings
  generaloptions.FirstLoadIfNeeded()
  SubAndOsd.FirstLoadIfNeeded()

  'if exists a set of cached options for the current profile
  ' And we haven't initializaed newchains yet, use the cache:
  If global.exist_cached_options(global.CurrentProfile) And (Not NewChains.initdone) Then 
    global.myDebug("Found cached options, using it")
    opts = global.get_cached_options(global.currentprofile)
      Else
    'parse the chain if we have not a cache
    NewChains.FirstLoadIfNeeded()
    
    For Each opt In newchains.parse_drivers(False)
      If opt.data = "" Then opt.data = Chr(8)
      While opts.Exist(opt.name)
        opt.name = " " & opt.name 'to have multiple options with the same name
      Wend
      opts[opt.name] = opt.data
    Next
    
    For Each opt In newchains.parse_drivers(True)
      If opt.data = "" Then opt.data = Chr(8)
      While opts.Exist(opt.name)
        opt.name = " " & opt.name 'to have multiple options with the same name
      Wend
      opts[opt.name] = opt.data
    Next

      'since mpv deprecated multiple filters on a single vf*/af* option, we have to specify
      'multiple vf-add and af-add commands.
      'but since we use a collection, the key must be unique.
      'handle that by prepending white spaces to vf-add and af-add options.
      
      For Each sFilter In NewChains.parse_filters(False)
        sSpaces &= " "
        opts[sSpaces & "vf-add"] = sFilter
      Next
      
      sSpaces = ""

      For Each sFilter In NewChains.parse_filters(True)
        sSpaces &= " "
        opts[sSpaces & "af-add"] = sFilter
      Next
      

  Endif

  For Each opt In generaloptions.Parse()
    If opt.data = "" Then opt.data = Chr(8)
    While opts.Exist(opt.name)
      opt.name = " " & opt.name 'to have multiple options with the same name
    Wend
    opts[opt.name] = opt.data
  Next
  

  If global.IsAudioFile(fullpath) Or force_audio_only Then
    For Each opt In generaloptions.visualization_opts()
      opts[opt.name] = opt.data
      opts["wid"] = audioform.Picturebox1.Handle
    Next
  Endif


  For Each opt In SubAndOsd.ParseSubGui(fullpath)
    opts[opt.name] = opt.data
  Next

  opt.data = GeneralOptions.AudioLangList.text
  If Trim(opt.data) <> "" Then opts["alang"] = opt.data
  
  opt.data = GeneralOptions.SubLangList.text
  If Trim(opt.data) <> "" Then opts["slang"] = opt.data

  opt.data = GeneralOptions.VideoLangList.text
  If Trim(opt.data) <> "" Then opts["vlang"] = opt.data
  
  Return opts
End


Public Sub file_options(fullpath As String) As Collection
  'options specific to file/protocols that cannot be cached
  Dim opts As New Collection
  Dim opt As Mpvoption
  ' Dim export_opts As String = "" 'mpv 0.11 removed af_export filter :(

  If Youtube.IsYoutubeLink(fullpath) Then
    opts["ytdl-format"] = Youtube.ytdl_format_opt(Left(generaloptions.Youtubeformat.text, -1), (generaloptions.RequestAVC1Checkbox.value = CheckBox.true))
    opts["ytdl"] = "yes"
      Else 'not youtube specific link
    If global.IsNetworkURI(fullpath) Then 'but network stream, is supported by youtube-dl?

      If youtube.is_supported(fullpath) Then
        opts["ytdl"] = "yes"
          Else
        opts["ytdl"] = "no"
      Endif
    Endif

  Endif

  Select Case Lower(fullpath)
    Case Like "dvd://menu*"
      'for dvd menus, we rely entirely on mpv input until we found a better way to interact with it
      discbox1.visible = True
      discbox2.visible = True
      discbox3.visible = True
      opts["input-cursor"] = "yes"
      opts["input-vo-keyboard"] = "yes"
    Case Else
      discbox1.visible = False
      discbox2.visible = False
      discbox3.visible = False
      opts["input-cursor"] = "no"
      opts["input-vo-keyboard"] = "no"
      
      'maybe a bug somewhere in mpv, but without this, cache seek wont work for dvb.
      If Lower(fullpath) Like "dvb://*" Then opts["hr-seek"] = "yes" 

      If global.IsImgFile(fullpath) Then
        If Not (fullpath Like "*SubBackImage*.bmp*") Then 'do not apply to subtitles window
          opts["image-display-duration"] = "inf"
        Endif
      Endif

  End Select

  generaloptions.FirstLoadIfNeeded()
  ' mpv 0.11 removed af_export filter :(
  ' If GeneralOptions.ShowVmeterCHK.value Then
  '   export_opts = VmetersOptionsAndInitIfNeeded(fullpath)
  '   If export_opts <> "" Then opts["af-pre"] = "export=" & export_opts
  ' Endif
    'audioform.BarBox.visible = False  'mpv 0.11 removed af_export filter :(
  
  For Each opt In SetRightCache(fullpath)
    opts[opt.name] = opt.data
  Next 'opt 
 
  Return opts

End






Public Function mpv_exe_changed() As Boolean
  Dim fsize_current, fsize_prec As String
  Dim mpv_exe As String
  
  Shell "which " & GeneralOptions.MplayerExeText.Text To mpv_exe
  mpv_exe = Trim(mpv_exe)
  If mpv_exe = "" Then Return True
  
  Try fsize_prec = File.Load(global.mpv_size_file)
  If Error Then Goto lerror
 
  lerror:
    Try fsize_current = CStr(Stat(mpv_exe, True).Size)
    If fsize_current <> fsize_prec Then
      global.myDebug("Updating mpv executable size")
      File.save(global.mpv_size_file, fsize_current)
      Return True
        Else  
      Return False
    Endif
End

Public Function get_allowed_options(Optional save_forced As Boolean = False) As String[]
  Dim sAllowed_options, sAllowed_option, sOpt As String
  Dim aAllowed_options As New String[]
  
  If Exist(global.mpv_allowed_options_file, True) Then
    global.myDebug("Found previously saved " & global.mpv_allowed_options_file & ", using it")
    sAllowed_options = File.Load(global.mpv_allowed_options_file)
      Else
    global.myDebug("Cannot find a previously saved " & global.mpv_allowed_options_file & ", this is expected if mpv executable has changed, generating a new one.")
    sAllowed_options = get_and_save_allowed_options(global.mpv_allowed_options_file)
  Endif


  For Each sAllowed_option In Split(sAllowed_options, "\n", "", True)
    sAllowed_option = Trim(sAllowed_option)
    If sAllowed_option Begins "--" Then 
      sOpt = Right(sAllowed_option, -2)
      aAllowed_options.Add(sOpt)
      If sOpt Ends "*" Then
        sOpt = Left(sOpt, -1)
        aAllowed_options.Add(sOpt)
        aAllowed_options.Add(sOpt & "-add")
        aAllowed_options.Add(sOpt & "-del")
        aAllowed_options.Add(sOpt & "-pre")
        aAllowed_options.Add(sOpt & "-clr")
      Endif
    Endif 
  Next

  Return aAllowed_options
End

Public Function get_and_save_allowed_options(dest As String) As String
  Dim sAllowed_options As String
  'Shell GeneralOptions.MplayerExeText.Text & " --list-options|grep '\\-\\-'|cut -d '-' -f 3-|cut -d ' ' -f 1" To sAllowed_options
  Shell GeneralOptions.MplayerExeText.Text & " --list-options|grep '\\-\\-'|awk '{print $1}'" To sAllowed_options
  Try File.Save(global.mpv_allowed_options_file, sAllowed_options)
  If Error Then global.myDebug("Cannot save " & global.mpv_allowed_options_file)
  Return sAllowed_options
End




Public Function Play(fullpath As String, Optional OtherOptions As Collection, Optional theradiolabel As String = "", Optional start_time As String = 0, Optional gapless As Boolean = False) As Boolean 
  Dim MkvSubsWorkaround As Boolean
  Dim cookieopts As String = ""
  Dim force_audio_only As Boolean
  Dim current_queue As String
  Dim doanalyze As Boolean = False
  Dim timeA As Float = 0
  Dim n, c As Integer
  Dim restorechoice As String
  ' Dim exportfile As String 'mpv 0.11 removed af_export filter :(
  Dim opts As New Collection
  Dim data As String

  If mpv_exe_changed() Then
    global.myDebug("mpv executable has changed, discarding cached options and allowed options")
    global.discard_cached_options(global.currentprofile)
    Try Kill global.mpv_allowed_options_file
  Endif
  mplayer.allowed_options = get_allowed_options()
'Stop
  mplayer.Precommand = generaloptions.NoParsePreCommand.text

  global.mouse_wait(fmain, True)
  PRELOADED = False
  Object.Attach(mplayer, Me, "mplayer")
  InitABLoop()
  DOHACKIMAGE = True
  'UserStopped = False
  CACHEVALUE_OLD = ""
  CTIME_OLD = "0"
  CUSTOMTITLE_OLD = ""
  
  Wait
  Stopmthumbler()
  
  needytcookie = False
  ButtonNowNext.visible = Lower(fullpath) Like "dvb://*"
  ArrangeCpl()

  'generaloptions.Init() it seems not needed.
  generaloptions.FirstLoadIfNeeded() 'we need the temporary directory to store captured streams
  dumpfile = generaloptions.dvbtmpdir.text & "/" & "xt7.dumpfile.ts"
  
  myopensubs.clear 
  If fullpath = "" Then 
    global.myDebug("Nothing to play :/")
    Goto returnlabel
  Endif
  LASTAUDIOID = -1
  global.ResetApplyBtnColor()


  ' TooMuchCache = False
  alreadypaused = True
  'LogWindow.clearlogs()

  'avoid a graphical glitch when hitting stop after a song and then play again
  'it will be turned on at the end of this play function
  ' videobox.visible = False
  ' Wait
  ' videobox.cached = False  'here we have a segfault with gambas 2.99.7, seems to be solved by changing visibility twice
  ' Wait
  ' videobox.visible = True
  
  SubNotSet = True

  'fixmempv 
  'mplayer.subfile = ""

  ' Seekbar.tag = "timer"
  ' VideoBox.Visible = False


  ButtonPlay.enabled = False

  ' fixmempv  
  ' If global.IsCdaudio(fullpath) Then
  '   GeneralOptions.FillCdAndDvdDevices()
  ' Endif
  ForcedAspectRT = "default"
  ResizeFactor = 0
  'LogWindow.streamtextbox.text = fullpath
  PrevValuecTime = 999999
  
  mplayer.watched_properties_old_data.Add("", "pause")
  mplayer.watched_properties_old_data.Add("", "volume")
  mplayer.watched_properties_old_data.Add("", "=chapter")
  mplayer.watched_properties_old_data.Add("", "=time-pos")
  mplayer.watched_properties_old_data.Add("", "duration")
  mplayer.watched_properties_old_data.Add("", "=duration")
  mplayer.watched_properties_old_data.Add("", "percent-pos")
  mplayer.watched_properties_old_data.Add("", "demuxer-cache-duration")
  mplayer.watched_properties_old_data.Add("", "media-title")
  mplayer.watched_properties_old_data.Add("", "=aid")
  ' mplayer.watched_properties_old_data.Add("", "=vid")
  ' mplayer.watched_properties_old_data.Add("", "=sid")

  mplayer.clear_options() 
  opts = static_options()
  For Each data In opts
    mplayer.set_option(opts.key, data)
  Next
  opts = file_options(fullpath)
  For Each data In opts
    mplayer.set_option(opts.key, data)
  Next  

  opts = user_options(fullpath, (theradiolabel <> ""))

  For Each data In opts
    mplayer.set_option(opts.key, data, False)
  Next  

  If OtherOptions <> Null Then
    If OtherOptions.count > 0 Then
      opts = OtherOptions
      For Each data In opts
        mplayer.set_option(opts.key, data)
      Next        
    Endif
  Endif

  'mplayer.lua_scripts.Add(global.tmpdir & "/_mpvstats.lua")

  'set initial volume only if we are using the internal mpv volume mixer
  If mplayer.volumeproperty = "volume" Then
    mplayer.set_option("volume", Initialvolume())
  Endif

  If Lower(fullpath) = "dvd://" Then fullpath = "dvd:///" & generaloptions.DVDDeviceText.text
  If Lower(fullpath) = "cdda://" Then 
    fullpath = "cdda:///" & generaloptions.CDDADeviceText.text
      Else
    SetCDDATabVisibility(False)
  Endif
        
  n = 0
  Repeat  'first try to play with generated options (see file_options() ), then try to force with ytdl
    'If mplayer.do_play(mplayer.Media_FullPath, mplayer.currentoptions, False, MkvSubsWorkaround, cookieopts, dumpfile, doanalyze) Then
    switchresBTN.enabled = False
    If Not gapless Then
      Try global.Preload_file_bg_stop()
      If Not mplayer.do_play(fullpath) Then Goto returnlabel
    Endif

    ButtonPlay.picture = Picture["media-playback-pause.png"]
    CorrectAreaAspect() 'fixmempv: lo chiamo subito dopo il play... e funziona anche senza informazioni di larghezza e altezza con mpv !?
                        '...ho scritto fixmempv perchè lo chiamo poi due volte, anche sotto.
    VideoBox.Visible = True
    ' ' ' zzzfake.cachingbox.Hide
    ' ' ' zzzfake.cachingbox.playing = False
    Wait

    timeA = Timer()
    If Not global.IsImgFile(fullpath) Then
      force_audio_only = (Left(generaloptions.NoParseVisType2.text) <> "0") And (global.IsAudioFile(fullpath) Or (theradiolabel <> ""))
      mplayer.get_mediainfo(generaloptions.CDDBCheckbox.value, force_audio_only)
      global.myDebug("mplayer.get_mediainfo()", Timer() - timeA)
    Endif

    'load stat lua script
    mplayer.mpv_command(["load-script", global.tmpdir & "/_mpvstats.lua"])

    'mplayer.do_Apply(mplayer.mpvoptions, True)
    If zzzfake.YTPanel.Parent = outerbox Then
      If zzzfake.parent <> zzzfake Then zzzfake.YTPanel.Reparent(zzzfake)
      zzzfake.ytpic.Picture = Picture["black.png"]
    Endif

    If Not mplayer.ProcessRunningOvr() Then 
      If mplayer.return_value <> 0 Then 'try to use youtube-dl 
        'If mplayer.get_option("ytdl") = Null Then 
        If Not user_options(fullpath).Exist("ytdl") Then 
          mplayer.set_option("ytdl", "yes")
        Endif
      Endif
      n = n + 1
    Endif
  'repeat at most 2 times, only if mplayer crashed,if it is not a youtube link (managed),only on network stream
  'Until (n = 2) Or (mplayer.return_value = 0) Or Youtube.IsYoutubeLink(fullpath) Or Not (global.IsNetworkURI(fullpath))
  Until (n = 2) Or (mplayer.return_value = 0) Or Youtube.is_supported(fullpath) Or Not (global.IsNetworkURI(fullpath))

  'if not forced, see if the current medium were left off and seek to that point
  If start_time = "0" Then
    Try restorechoice = Split(generaloptions.RestorePlaybackcombobox.Current.Text, " ", "")[0]
    If Error Then 
      Debug "ERROR ! could not read restore time choice!"
        Else
      Select restorechoice '1=yes,2=no,3=ask,4=yes for vids,5=ask for vids
        Case 1 ' always
          start_time = get_history_leftoff_time(fullpath)
        Case 3 
          If MyQuestion.Ask(("Do you want to start from were you left?"), ("Yes"), ("No")) = 1 Then start_time = get_history_leftoff_time(fullpath)
        Case 4
          If global.IsVideoFile(fullpath) Then start_time = get_history_leftoff_time(fullpath)
        Case 5
          If global.IsVideoFile(fullpath) Then
            If MyQuestion.Ask(("Do you want to start from were you left?"), ("Yes"), ("No")) = 1 Then start_time = get_history_leftoff_time(fullpath)
          Endif
      End Select
    Endif
  Endif
  
  afterError:
  If start_time <> "0" Then mplayer.do_seek_to(start_time, True, True)

  'mplayer.StartOverbrightAnalyze() 'fixmempv

  HotKeys.FirstLoadIfNeeded()
  VideoEqualizer.FirstLoadIfNeeded()
  'fimempv qui l'equalizzatore video deve vedere cosa fare (overbright dinamico oppure applicare i valori)

  If (mplayer.getP("audioonly")) Then
    If Lower(audioform.AudioPanel.parent.name) <> Lower(outerbox.name) Then
      If (Not tageditmode) Then
        CoverManager.HitCancel = True
        ShowAudioPanel(True)
      Endif
    Endif
    CoverRefresh()
      Else
    CorrectAreaAspect() 
    ShowAudioPanel(False)
  Endif

  aspectmenu.visible = Not (mplayer.getP("audioonly") Or fsform.FullScreen)

  If Not StatusLabelLeft.visible Then
    StatusLabelLeft.Show
    StatusLabelright.show
  Endif

  If Not gapless Then
    If Not global.IsImgFile(fullpath) Then Fill_Playlist_from_mpv()
  Endif
  If Not global.IsImgFile(fullpath) Then FillStreamsMenu()
  If Not global.IsImgFile(fullpath) Then FillChaptersMenu()
  current_queue = GetActivePlayQueue()
  If current_queue = "playlistgrid" Or current_queue = "librarygrid" Or current_queue = "browse" Then
    InitTimerQueue()
  Endif

  If (mplayer.getP("audioonly")) Then
    c = 0
    Try c = mplayer.get_property_mpv("chapter-list/count",,, True)
    If c > 0 Then
      Show_and_fill_chapters_tab()
    Endif
  Endif
  
  If (Lower(Fullpath) Like "dvd://*") Then
    IsDVD = True
    Try FillTitlesAndChaptersMenu()
    SetDvdTabVisibility(True)
  Else
    LastDvdID = ""
    SetDvdTabVisibility(False)
    IsDvd = False
    MenuTitles.Enabled = False
  Endif

  ButtonPlay.enabled = True
  MenumediaExplorer.Enabled = True
  addhistory(FullPath, "-1", False, "?")

  PlayStarted = True
  EndOfMediaReached = False
  VEqHasBeenSet = False



  If Trim(theradiolabel) <> "" Then
    audioform.UpdateCell(audioform.griddown, 0, 0, ("Radio"))
    audioform.UpdateCell(audioform.griddown, 0, 1, theradiolabel)
    audioform.cutstrings()
  Else
    audioform.UpdateCell(audioform.griddown, 0, 0, "")
    audioform.UpdateCell(audioform.griddown, 0, 1, "")
  Endif

  Wait 

  FillPropertiesGrid()  


 
  videobox.cached = True 

 If TabSelectedLibrary() Then 
    Try ComboHistory.AddHistory(Searchfield, (Searchfield.text))
  Else If TabSelectedPlaylist() Then
    Try ComboHistory.AddHistory(SearchfieldPLS, (SearchfieldPLS.text))
  Else If TabSelectedDVB() Then
    Try ComboHistory.AddHistory(SearchFieldDVB, (SearchfieldDVB.text))
  Endif

'fixmempv 

  Try buttoncapture.enabled = (Lower(mplayer.getP("file-format")) Like "mp*")  'all mpeg demuxed files (ts,ps..)
  Try buttoncapture.enabled = buttoncapture.enabled Or (mplayer.getP("fullpath") Like "*dvb*://*") 'all dvb channels
  Try buttoncapture.enabled = buttoncapture.enabled Or (mplayer.getP("fullpath") Like "*dvd*://*") 'all dvd
  buttoncapture.visible = buttoncapture.enabled
  ABLoopButton.visible = (mplayer.getP("partially-seekable") = "no")
  ArrangeCpl()
  If GeneralOptions.ToolTipsCHKDBUS.value Then Try ExportDbusProperties()

  global.ResetApplyBtnColor()

  If Not (mplayer.getP("audioonly"))
    If Not (global.IsNetworkURI(fullpath)) Then 
      If (VideoEqualizer.CheckDynamicOverbright.value) Then StartOverbrightAnalyze()
      If (VideoEqualizer.ApplyEqCheckbox.value = True) Then VideoEqualizer.ApplyEqSettings()
    Endif
  Endif

  check_speed_compensate()

  'If mplayer.vdpau_blocked_by_filters() Then Popup_vdpau()

  ReturnLabel:
  firstplay = False
  global.mouse_wait(fmain, False)
  switchresBTN.enabled = True
  Return True
End


Public Sub check_speed_compensate()
  If generaloptions.switchres_compensate_checkbox.value Then
    Try speed_compensate(CFloat(Left(generaloptions.switchres_compensate_combobox.text, -1))) 'will check if mplayer is running and not audioonly too
      Else
    change_speed(1)
  Endif
End


Private Sub StartOverbrightAnalyze()
  VideoEqualizer.ZeroControls()
  mplayer.StartOverbrightAnalyze()
End



Public Sub addhistory(fullpath As String, Optional Savetime As String = "0", Optional leftoff As Boolean = False, Optional percent As String = "0")

  Dim history, entry As String
  Dim historyarray As New String[]
  Dim sep As String = Chr(8)


  If Not (Exist(fullpath)) Then Return
  If Not global.IsNetworkURI(fullpath) Then
    If Not (Exist(global.historyfile)) Then file.Save(global.historyfile, "")
    Try history = file.Load(global.Historyfile) 
    If Error Then 
      global.myDebug("Error: could not access " & global.historyfile & "")
      Return
    Endif

    For Each entry In Split(history, "\n", "", True)
      If Split(entry, sep)[0] <> fullpath Then historyarray.Add(entry) 'no dupes and last on top
    Next

      Try percent = Split(percent, ",.", "", True, False)[0]
      Try percent = CString(CInt(percent))
      If Error Then percent = "0"
      If leftoff Then 
        historyarray.Add(fullpath & sep & Savetime & sep & "leftoff" & sep & percent)
          Else
        historyarray.Add(fullpath & sep & Savetime & sep & "userstopped" & sep & percent)
      Endif
    Else
      historyarray.Add(fullpath)
    Endif
    If historyarray.count > Global.MaxHistory Then
      historyarray.Reverse
      historyarray.Resize(Global.MaxHistory)
      historyarray.Reverse
    Endif
    history = ""
    For Each entry In historyarray
      history = history & entry & "\n"
    Next
    file.Save(global.Historyfile, history)

  If Not closing Then updaterecentfiles()

End




Public Function TimerQueue_update_duration() As Boolean
  Dim timedelta As Float = 0
  Dim tl As Float 
  
  If Not mplayer.ProcessRunningOvr() Then 
    global.myDebug("mpv has been terminated, stopping Timerqueue.")
    timerqueue.Stop()
    Return False
  Endif

  Try tl = CFloat(mplayer.get_property_mpv("=playtime-remaining", True, 1, False))
  If Error Then Goto Errorlabel
  
  If (tl <= 2) And (togglepls.value = False) Then
    'do not hammer.
    timerqueue.Delay = 10000
    Return
  Endif
   
  
  
  Try timedelta = tl
  If Error Then Goto errorlabel

  Try timerqueue.Delay = CInt(timedelta * 1000 / 4)
  If Error Then Goto errorlabel

  global.myDebug("timerqueue delay set to (seconds): ", timerqueue.delay / 1000)

  Return True

  errorlabel:
  global.myDebug("could not set timerqueue delay!")
  Return False
End



Public Sub InitTimerQueue()
  If TimerQueue_update_duration() Then timerqueue.start
End

Public Sub mplayer_seeking()
  'If Rand(0, 1) > 0.9 Then UpdateSeekSlider()
  'UpdateSeekSlider()
  If timerqueue.enabled Then
    While mplayer.get_property_mpv("seeking",, 2) = "yes"
      Wait 0.1
    Wend
      'wait a while to allow seeking to complete (it should be not needed, but just in case...)
      timerqueue.Stop
      timerqueue.delay = 1000
      timerqueue.start
  Endif
End


Public Sub TimerQueue_Timer()
  Dim t0 As String = "0"
  Dim t1 As String = "0"
  Dim timer0 As Float = Timer()
  Dim timeout As Float = 2 'do not wait more than 2 seconds for seeking to complete
  Dim prequeue_time As Integer = 2 'queue next item # seconds before the previous will end.
  Dim preload_time As Integer 'preload next item # seconds before the previous will end.
  Dim preload_KB As Integer 'whom many KB to preload max
  Dim playtime_remaining As Float = 0

  If (Not TimerQueue_update_duration()) Then timerqueue.stop
  'If timerqueue.delay <= 1000 Then
  Try playtime_remaining = CFloat(mplayer.get_property_mpv("=playtime-remaining"))
  If Error Then 
    global.myDebug("Error retriving playtime_remaining")
    Return
  Endif

  If playtime_remaining <= prequeue_time Then
    If (togglepls.value = True) Then
      queue_next()
      global.Preload_file_bg_stop()
      PRELOADING = False
    Endif
      Else 'because preloading has to occur befor queuing...
    If generaloptions.PreloadCheckbox.value Then
      
      preload_time = generaloptions.PreloadSecbox.Value
      preload_KB = generaloptions.PreloadKBbox.value
      
      If togglepls.value And ((playtime_remaining - prequeue_time) <= preload_time) And (Not PRELOADING) And (Not PRELOADED) Then
        If mplayer.get_property_mpv("cache-idle", True, 1) = "yes" Then
          PreloadNext(preload_time, preload_KB)
          PRELOADING = True
        Endif
      Endif
    Endif 'generaloptions
  Endif 
End

Private PRELOADED As Boolean = False
Private PRELOADING As Boolean = False
Private Sub PreloadNext(preload_time As Integer, preload_KB As Integer)
  Dim mNext As String
  'mplayer.do_preload("/mnt/sshpi/root/media/02-coldplay-hurts_like_heaven.ogg", preload_time)
  'Media_Next_path = "/mnt/sshpi/root/media/02-coldplay-hurts_like_heaven.ogg"
  mNext = WhosNext() '"/mnt/sshpi/root/media/02-coldplay-hurts_like_heaven.ogg"
  global.myDebug("Preloading " & mNext)
  global.Preload_file_bg(mNext, preload_KB, preload_time)
  Wait
  PRELOADED = True
End




Private Sub queue_next()
'queue the next media by appending his fullpath to mpv playlist
  Dim current_playlist_pos As String = "-1"

  'update Media_Next_path, but don't play it
  SelectNext(, GetActivePlayQueue(), False)
  
  'if something went wrong, proceed without queuing
  If Not mplayer.ProcessRunningOvr() Then
    play(Media_Next_path)
    Return
  Endif

  'queue the next item:
  mplayer.mpv_command(["playlist-clear"])
  mplayer.mpv_command(["loadfile", Media_Next_path, "append"])
  
  timerqueue.Stop()
  'wait until the next media has started
  current_playlist_pos = mplayer.get_property_mpv("=playlist-pos")
  Repeat
    Wait 0.1
  Until mplayer.get_property_mpv("=playlist-pos") <> current_playlist_pos
  mplayer.setP("fullpath", media_next_path)
  'the call to play here will not call another mpv instance:
  play(Media_Next_path,,,, True)
  InitTimerQueue()
End



Public Sub Fill_Playlist_from_mpv()
  ' 'an xt7 play item may be a playlist
  ' 'if we catch it, then:
  ' 'we create a New Playlist On the fly
  ' '(ask the user what it wants to do with the previous playlist)
  ' 'named with the xt7 play item name
  ' 'and switch the playqueue to the playlist tab
  Dim i, pCount As Integer = 0
  Dim xt7Item, filename, title As String
  Dim msg As String
  Dim uries As String
  Dim properties As String[]

  If Not mplayer.ProcessRunningOvr() Then Return
  
  'Is it a playlist?
  Try pCount = mplayer.get_property_mpv("=playlist-count")
  If pCount < 2 Then Return
  Wait
  If MyQuestion.Ask(("This seems a playlist,\ndo you want me to manage it?"), ("Manage"), ("Just play")) = 2 Then Return
  
  'save the previous playlist
  If playlistgrid.Rows.count > 0 Then 'save the previous playlist
    PlaylistsCombo.text = "pls_" & (Replace(CStr(Now()), "/", "_")) & ".bak"
    If Not SavePls() Then Return
  Endif
  
  'Create a new playlist
  myplaylist.clear(playlistgrid)
  
  xt7Item = Replace(file.BaseName(mplayer.getP("fullpath")), "/", "_")
  If xt7Item = "" Then 
    global.myDebug("Using a random number for playlist name")
    xt7Item = Rnd(0, 9999999)
  Endif

  PlaylistsCombo.text = xt7Item

  'switch to the playlist tab
  If Not TabSelectedPlaylist() Then
    For i = 0 To Leftsidetabs.Count - 1
      Leftsidetabs.Index = i
      If TabSelectedPlaylist() Then Break
    Next
  Endif

  'Populate the new playlist
  properties = New String[]
  For i = 0 To pCount - 1
    properties.Add("=playlist/" & i & "/filename")
    properties.Add("=playlist/" & i & "/title")
  Next

  mplayer.get_properties_mpv(properties, True, True)

  For i = 0 To pCount - 1
    filename = mplayer.get_property_mpv("=playlist/" & i & "/filename", False, 1, True)
    title = mplayer.get_property_mpv("=playlist/" & i & "/title", False, 1, True)
    If title = mplayer.unavailable_str Then title = filename
    myplaylist.AddFile(playlistgrid, filename, True, True, title)
    global.myDebug(i, filename, title)
  Next
  myplaylist.AutoSizeColumns(playlistgrid)
End

Public Function SetRightCache(fullpath As String) As MpvOption[]
  'fixmempv anche per i dvd e dvdread, controlla bene
  Dim cacheMB As String = ""
  Dim cacheSEC As String = ""
  Dim i As Integer
  
  Dim opt As MpvOption
  Dim opts As New MpvOption[]
  With GeneralOptions
    If global.IsNetworkURI(fullpath) Then
      If .MaxCacheMB_Net_Checkbox.value Then cacheMB = .MaxCacheMB_NET_SpinBox.value  
      If .MaxCacheSEC_Net_Checkbox.value Then cacheSEC = .MaxCacheSEC_NET_Spinbox.value  
      
    Else If (fullpath Like "dvb://*") Then
      If .MaxCacheMB_DVB_Checkbox.value Then cacheMB = .MaxCacheMB_DVB_SpinBox.value  
      If .MaxCacheSEC_DVB_Checkbox.value Then cacheSEC = .MaxCacheSEC_DVB_Spinbox.value  
      
    Else If (fullpath Like "dvd*://*") Or (fullpath Like "dvd://*") Then
      If .MaxCacheMB_DVD_Checkbox.value Then 
 cacheMB = .MaxCacheMB_DVD_SpinBox.value  
 cacheSEC = 9999
      Endif

    Else If global.IsCdaudio(fullpath) Then
      If .MaxCacheSEC_CDDA_Checkbox.value Then 
        cacheSEC = .MaxCacheSEC_CDDA_Spinbox.value  
        cacheMB = 99999
      Endif
    Else
      'local
      If .MaxCacheMB_Local_Checkbox.value Then cacheMB = .MaxCacheMB_Local_SpinBox.value  
      If .MaxCacheSEC_Local_Checkbox.value Then cacheSEC = .MaxCacheSEC_Local_Spinbox.value  
    Endif
  End With
  
  If cacheSEC & cacheMB <> "" Then 
    opt = New MpvOption
    opt.name = "cache"
    opt.data = "yes"
    opts.Add(opt)    
  Endif
  
  
  If cacheSEC <> "" Then
    opt = New MpvOption
    opt.name = "cache-secs"
    opt.data = cachesec
    opts.Add(opt)
  Endif
 
  If cacheMB <> "" Then
    opt = New MpvOption
    opt.name = "demuxer-max-bytes"
    opt.data = CacheMB * 1024 * 1024
    opts.Add(opt)
    
    'opt = New MpvOption
    'opt.name = "cache"
    'opt.data = CacheMB * 1024
    'opts.Add(opt)
    
  Endif

  Return opts
End


Public PreviousCoverFile As String = "NOPE"

Public Sub CoverRefresh(Optional force As Boolean = False)
  
  Dim coverfile, folderpicture, fullpath As String
  Dim tl As New Taglib
  Dim samecover As Boolean
  Dim i, forbackground As Image
  Dim glass As Image 
  If mplayer.ProcessRunningOvr() And mplayer.getP("audioonly") Then
    'coverfile = global.confpath& "/covers/" & global.fixfilename(Upper(Trim(mplayer.Media_Artist))) & "^^^" & global.fixfilename(Upper(Trim(mplayer.Media_Album))) & ".jpg"
    If Upper(mplayer.getP("fullpath")) Like "*.FLAC" Then
      If (Trim(mplayer.getP("artist")) = "") And (Trim(mplayer.getP("album")) = "") Then
        tl.init(mplayer.getP("fullpath"))
        mplayer.setP("artist", tl.Artist)
        mplayer.setP("album", tl.Album)
        Try tl.tlfree
      Endif
    Endif
    CoverManager.MediaFileFullPath = mplayer.getP("fullpath")
    coverfile = CoverManager.Coverfile(mplayer.getP("artist"), mplayer.getP("album"), mplayer.getP("fullpath"))
    samecover = (coverfile = PreviousCoverFile)
    PreviousCoverFile = coverfile

    If Not (Exist(coverfile)) Then
      If Exist(Trim(coverfile), True) Then coverfile = Trim(coverfile)
    Endif
    
    audioform.coverbox.refresh
    
    If (Not samecover) Or force Then 

         Try i = Image.Load(coverfile)

         If Error Then 
          fullpath = mplayer.getP("fullpath")
          folderpicture = covermanager.FolderPicture(file.Dir(fullpath))
          Try i = image.Load(file.Dir(fullpath) & "/" & folderpicture)
          If Error Then Goto errore
         Endif

         Try glass = Image.Load("cdtemplate.png").Stretch(audioform.coversize, audioform.coversize)
         i = i.Stretch(audioform.coversize, audioform.coversize)
         forbackground = i.Copy()
         i.PaintImage(glass, 0, 0)
         i = Shadow(i, audioform.coversize, CInt(audioform.coversize / 8))
         If Error Then Goto Errore
         Try audioform.CoverBox.picture = covermanager.keepaspect(i, audioform.coversize)
         If Error Then Goto Errore
          

      errore:
      If Error Then audioform.CoverBox.picture = covermanager.DefaultLibraryIcon(mplayer.getP("fullpath"), AudioForm.coversize)

      Audioform.ShowBackground(forbackground, generaloptions.sliderblur.value)
    Endif
    audioform.PictureBack.show
    ShowAudioPanel(True, Samecover)
  Endif
  audioform.coverbox.refresh
  'AlbumGridView.Current.Refresh()
  MyAlbumsLib.selectcell(AlbumGridView.Row, AlbumGridView.Column)
  'timerhideshowvideo.start
End

Public Function shadow(src As Image, final_size As Integer, offset As Integer) As Image
  Dim s, t As Image
  s = Image.Load("shadow.png").Stretch(final_size, final_size).Opacity(0.5)
  t = src.Stretch(final_size - offset, final_size - offset)
  Return s.DrawImage(t, CInt(offset / 2.25), CInt(offset / 2.25))
End



Private currentfile_cover As String = ""
Private previousfile_cover As String = ""
' Public mymeters As Meters 'mpv 0.11 removed af_export filter :(

Public Sub ShowAudioPanel(Show As Boolean, Optional samecover As Boolean = False)
  ' Dim vis As String = ""  'mpv 0.11 removed af_export filter :(
  If show Then
    Timer_mediainfo.start
    audioform.tag = "visible" 
    audioform.panelvisspacer.Visible = (Left(generaloptions.NoParseVisType2.text) <> "0")
    audioform.PictureBox1.expand = Not (audioform.panelvisspacer.Visible)
      Else
    Timer_mediainfo.stop
    audioform.tag = "invisible"
  Endif
  If Show And (Not TagEditMode) Then
    ' audioform.BarBox.visible = GeneralOptions.ShowVmeterCHK.value   'mpv 0.11 removed af_export filter :(
    previousfile_cover = currentfile_cover
    currentfile_cover = mplayer.getP("fullpath")
    If ((currentfile_cover <> previousfile_cover) Or (audioform.AudioPanel.Parent <> outerbox)) Then  'avoid showing twice
      'fmain.OuterBox.ignore = True
      fmain.OuterBox.Arrangement = Arrange.fill

      If Not samecover Then audioform.CoverBox.Resize(0, 0)
      If Lower(audioform.AudioPanel.Parent.name) <> Lower(outerbox.name) Then
        BottomVbox.hide
        Wait

        If audioform.AudioPanel.parent <> outerbox Then audioform.AudioPanel.Reparent(outerbox)
        BottomVbox.raise() ' Reparent(rightsidepanel)
        bottomvbox.show

      Endif
    Endif
    If Not samecover Then
      audioform.coverbox.Refresh
      AudioForm.TimerZoomIn.start
      audioform.refresh
    Endif

  ' If GeneralOptions.ShowVmeterCHK.value = True Then
  '   global.myDebug("sorry, mpv 0.11 removed export filter, no visualization available") 'mpv 0.11 removed af_export filter :(
  '   '   Try mymeters.stopp
  '   '   mymeters = New Meters As "mymeters"
  '   '   Try vis = Split(generaloptions.NoParseVisType.text, " ")[0]
  '   '   mymeters.init(audioform.barbox, GeneralOptions.latencyspinbox.value, audioform.BarBox.h, fmain.exportfile, 6, GeneralOptions.fpsspinbox.value, vis)
  '   '   mymeters.startt
  '   Endif
  Else

    fmain.OuterBox.Arrangement = Arrange.none
    ' Try mymeters.stopp 'mpv 0.11 removed af_export filter :(
    'If Not tageditmode Then rightsidepanel.Background = audioform.AudioPanel.Background
    fmain.OuterBox.ignore = False
    OuterBox.visible = True
    If audioform.AudioPanel.parent.name <> "AudioForm" Then audioform.AudioPanel.Reparent(audioform)
    'cachebar removed: If cachebar.parent <> rightsidepanel Then cachebar.Reparent(rightsidepanel)
    'cachebar removed: If fsform.visible Then 
      'cachebar removed: cachebar.Move(0, outerbox.h - cachebar.h, 0)
        'cachebar removed: Else
      'cachebar removed: cachebar.Move(0, outerbox.h - cachebar.h + toolbarbackground.h, 0)
    'cachebar removed: En'cachebar removed: dif
    audioform.refresh
    AudioForm.PictureBack.hide
  Endif

End

Public Sub SetChaptersTabVisibility(visibility As Boolean)
  
  Dim i As Integer
  Dim WasVisible As Boolean
  'find dvd tab id:
  For i = 0 To Leftsidetabs.count - 1
    WasVisible = Leftsidetabs[i].Visible
    Leftsidetabs[i].Visible = True
    If TabSelectedChaptersAt(i) Then
      Leftsidetabs[i].Visible = visibility
      CddaTabId = i
      Break
    Endif
    Leftsidetabs[i].Visible = WasVisible
  Next 'i
  If visibility Then Leftsidetabs.index = CddaTabId
  
End

Public Sub SetCddaTabVisibility(visibility As Boolean)
  
  Dim i As Integer
  Dim WasVisible As Boolean
  'find dvd tab id:
  For i = 0 To Leftsidetabs.count - 1
    WasVisible = Leftsidetabs[i].Visible
    Leftsidetabs[i].Visible = True
    If TabSelectedCDDAAt(i) Then
      Leftsidetabs[i].Visible = visibility
      CddaTabId = i
      Break
    Endif
    Leftsidetabs[i].Visible = WasVisible
  Next 'i
  If visibility Then Leftsidetabs.index = CddaTabId
  
End

Public Sub SetDvdTabVisibility(visibility As Boolean)
  
  Dim i As Integer
  Dim WasVisible As Boolean
  'find dvd tab id:
  For i = 0 To Leftsidetabs.count - 1
    WasVisible = Leftsidetabs[i].Visible
    Leftsidetabs[i].Visible = True
    If TabSelectedDVDAt(i) Then
      Leftsidetabs[i].Visible = visibility
      DvdTabId = i
      Break
    Endif
    Leftsidetabs[i].Visible = WasVisible
  Next 'i
  If visibility Then Leftsidetabs.index = DvdTabId
  
End

Public Sub sub_add(subfile As String)
    mplayer.sub_add(subfile, True)
    mplayer.ShowText(("Subtitle") & ": " & File.Name(subfile))
    mplayer.FillMultitracks()
    FillStreamsMenu()
End

Public Sub MenuAddAudio_Click()
  Dim aTrack As String
  Stop
  MyDialog.filter = [global.audiofilter & global.UncommonAudiofilters, ("Audio files")]
  Try MyDialog.path = "'" & File.Dir(mplayer.getP("FullPath")) & "'"
  MyDialog.OpenFile()
  aTrack = MyDialog.path
  If aTrack <> "" Then
    mplayer.ShowText(("Audio track:") & ": " & File.Name(aTrack))
    mplayer.audio_add(aTrack)
    mplayer.FillMultitracks()
    FillStreamsMenu()
  Endif
End

Public Sub VideoAreaGroup_Drop()
  
  Dim droppedfile As String

  Try droppedfile = Split(Drag.Paste("text/uri-list"), "\n\r", "", True)[0]
  If Error Then 
    Try droppedfile = Split(Drag.Paste("text/plain"), "\n\r", "", True)[0]
    If Error Then Return
  Endif
  droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))
  If Not ((droppedfile Like "*.iso") Or (droppedfile Like "*VIDEO_TS")) Then
    If mplayer.IsSubFile(droppedfile) Then
      sub_add(DConv(droppedfile))
    Else
      Media_Next_path = droppedfile
      Play(droppedfile)
    Endif
  Else
   
    Play("dvd:///" & droppedfile)
  Endif
  If TabSelectedLibrary() Then
    Try librarygrid.rows[librarygrid.row].Selected = False
    Try librarygrid.row = mylibrary.FindRowByPath(librarygrid, droppedfile)
    Try librarygrid.rows[librarygrid.row].Selected = True
  Else If TabSelectedPlaylist() Then 
    Try playlistgrid.rows[playlistgrid.row].Selected = False
    Try myplaylist.row = myplaylist.FindRowByPath(playlistgrid, droppedfile)
    Try playlistgrid.rows[playlistgrid.row].Selected = True
  Endif

End

Public Sub UpdateSeekSlider(Optional percent_pos As String = "-1")
  'Get the current playing time and update seek bar accordingly
  Dim totaltime, actualtime As Float
  If percent_pos = "-1" Then 
    Try percent_pos = mplayer.getP("percent-pos")
    If Error Then Return
  Endif

  If SeekingRestarting Then Return
  SeekBar.tag = "timer" 'this will avoid seekbar to send seek to mplayer
  Try totaltime = mplayer.getP("=duration")
  'Try actualtime = mplayer.CurrentTime()
  Try actualtime = mplayer.CurrentTimeFloat(True)
  If actualtime <> 0 Then 
    Try SeekBar.value = (actualtime / totaltime)
      Else
    SeekBar.value = 0
  Endif
  'workaround a bug with mts files:
  'mplayer is unable to get id_length and reports always 0
  'while mplayer2 reports a wrong length
  If (totaltime = "0") Or (actualtime > totaltime) Then  
    Try Seekbar.value = percent_pos / 100
  Endif
  SeekBar.tag = "user"
  SetProgress(seekbar.value)
End

Public customtitle As String = ""




Public Sub UpdateVolumeSlider(volume As String)
  Dim newvolume As Integer

  Try newvolume = Split(volume, ",.", "", True)[0]
  If Error Then Return
  global.myDebug(newvolume)

  Object.lock(SaveVolumeSlider)
    Try SaveVolumeSlider.Value = newvolume
    If Error Then Return
  Object.unlock(SaveVolumeSlider)

  ' 'do not update volume if the media playback is not started.
  ' Try ctime = mplayer.get_property_mpv("=time-pos", True, 100, True)
  ' If ctime > 0 Then LASTVOLUME = newvolume

End

' Public Sub UpdateStreamsMenu()
'   'read current subtitle and audio tracks and check the relevant item in the streams menu 
' 
'   Dim tmpsub, tmpaudio As String
'   
'   mplayer.Send("get_property sub")
'   mplayer.Send("get_property switch_audio")
'   tmpsub = mplayer.CurrentSubStream
'   tmpaudio = mplayer.CurrentAudioStream
'   global.myDebug("tmpsub= " & tmpsub)
'   global.myDebug("tmpaudio= " & tmpaudio)
'   Repeat
'   Until Streamsaudiomenu
'   
' End


Public subnotset As Boolean = True

Private alreadypaused As Boolean = False

Private eiNow As Eventinfo
Private eiNext As EventInfo
Private PrevEiNow As EventInfo

Public Function UpdateNowNextInfo()

  Dim channel As String = Replace(Lower(mplayer.getP("fullpath")), "dvb://", "")
  PrevEiNow = einow
  zzzfake.VBox4.visible = False
  zzzfake.clocklabel.text = Make2(Hour(Now())) & ":" & Make2(Minute(Now())) & " - " & Date()
  zzzfake.LabelChannelName.text = Upper(channel)
  
  Try eiNow = epgform.dvbsnoop.WhatsNow(channel)
  If einow = Null Then Return
  If eiNow.event_name = "" Then 
    eiNow.event_name = ("Not available")
  Else
    zzzfake.LabelNowName.text = eiNow.event_name
  Endif
  
  Try einext = epgform.dvbsnoop.WhatsNext(channel)
  
  Try zzzfake.LabelNextStart.visible = (eiNext.Start_time_date <> "")
  zzzfake.VBox4.visible = zzzfake.LabelNextStart.visible
  
  If einext <> Null Then
    If eiNext.event_name = "" Then
      eiNext.event_name = ("Not available")
    Else
      zzzfake.LabelNextName.text = eiNext.event_name
      zzzfake.LabelNextStart.text = Make2(Hour(eiNext.Start_time_date)) & ":" & Make2(Minute(einext.Start_time_date))  
    Endif
  Endif
  
  If PrevEiNow <> einow Then 
    zzzfake.LabelNowInfo.text = ""
    zzzfake.LabelNextInfo.text = ""
    Try zzzfake.LabelNowInfo.text = einow.text_char
    Try zzzfake.LabelNextInfo.text = einext.text_char
    PanelNowNextArrange(zzzfake.LabelNowInfo.visible)
  Endif

End

Public Sub TimerUpdateNowNext_Timer()

  UpdateNowNextInfo()

End

Public Function Make2(n As String) As String

  Dim t, neg As String
  If n Like "-*" Then neg = "-"
  t = Abs(CInt(n))
  While Len(t) < 2
    t = "0" & t
  Wend
  Return neg & t

End

Private DOHACKIMAGE As Boolean = True



Private OLD_CACHEVALUE As String
Private OLD_CACHE_MSG As String

Public Sub UpdateStatusBar(customtitle As String, cTime As String, cachevalue As String)
  'Print the current filename and playing time on the status bar
  
  Dim RemainingTime As String
  Dim PreText As String = ""
  Dim PostText As String
  Dim SmallWindow As Boolean = False
  Dim cache_duration_secs As Integer
  Dim fmain_caption As String
  Dim iCachevalue As Integer
  


  'If Not mplayer.ProcessRunningOvr() Then Return 

  If customtitle = "" Then 
    pretext = file.BaseName(mplayer.getP("fullpath"))
      Else
    Pretext = customtitle
  Endif

  '------------------------------
  'Depending on the Choosed timeformat, draw the current time:
    If TimeFormat = 0 Then
      PostText = mplayer.FormatTime(cTime) & " / " & mplayer.FormatTime(mplayer.getP("=duration"))
  Else If Timeformat = 1 Then
    Try RemainingTime = mplayer.getP("=duration") - cTime
    If Error Then Return
    PostText = "-" & mplayer.FormatTime(remainingtime) & " / " & mplayer.getP("duration")
  Else If Timeformat = 2 Then
    PostText = cTime & " / " & mplayer.getP("=duration")
  Else If Timeformat = 3 Then
    RemainingTime = mplayer.getP("=duration") - cTime
    PostText = "-" & RemainingTime & " / " & mplayer.getP("=duration")
  Endif

  smallwindow = (Statusbar1.Font.TextWidth(PreText & PostText) > Statusbar1.Width)
  pretext = Replace(pretext, "\n", " ")
  If SmallWindow Then
    pretext = Left$(pretext, CInt(((Statusbar1.Width) Div Statusbar1.font.TextWidth("_")) - Len(PostText)) / 1.) & "..."
  Endif
  'If Trim(pretext) <> "" Then
  'If mplayer.maxcache = "" Then Return
  fmain_caption = pretext

  
  If Cachevalue <> "" Then
    If cachevalue <> OLD_CACHEVALUE Then
      Try cache_duration_secs = CInt(CFloat(cachevalue))
      If cache_duration_secs <> "" Then fmain_caption &= " - [Buffer: " & cache_duration_secs & "s" & "]"
      fmain_caption &= " - " & global.AppName
      OLD_CACHE_MSG = fmain_caption
      OLD_CACHEVALUE = cachevalue
        Else
      'same cachevalue, just repaint old caption
      fmain_caption = OLD_CACHE_MSG
    Endif
  Endif
  

  fmain.caption = fmain_caption
  
  StatusLabelLeft.text = " " & Pretext
  If (Not volumefocused) Then 
    StatusLabelRight.text = Posttext & " "
    StatusLabelright.Foreground = color.white
  Endif
  AudioForm.UpdateLength(PostText)
  If fsform.FullScreen Then statusbar1.w = statusbar1.Parent.w
End





Private CACHEVALUE_OLD As String 
Private CTIME_OLD As String = "0"
Private CUSTOMTITLE_OLD As String

Public Sub mplayer_property_change(name As String, data_old As String, data_new As String)
  If Not mplayer.ProcessRunningOvr() Then Return

  Select Case name
  
    Case "pause"
      If data_new = "yes" Then
        ' If generaloptions.ShowVmeterCHK.value = True Then Try mymeters.pause() 'mpv 0.11 removed af_export filter :(
        ButtonPlay.picture = Picture["media-playback-start.png"]
        mplayer.event_loop.delay = 2000 'be light when we're on pause
          Else
        ' If generaloptions.ShowVmeterCHK.value = True Then Try mymeters.unpause() 'mpv 0.11 removed af_export filter :(
        ButtonPlay.picture = Picture["media-playback-pause.png"]
        mplayer.event_loop.delay = 500 'be reactive
      Endif
  
    Case "=chapter"
      If global.IsCdaudio(mplayer.getP("fullpath")) Then
        Try cddagrid.row = CInt(data_new)
        CUSTOMTITLE_OLD = cdda_track_name(data_new)
        UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
        propertiesGrid[7, 1].text = CUSTOMTITLE_OLD
        audioform.UpdateCell(audioform.gridup, 3, 1, CUSTOMTITLE_OLD)
        audioform.UpdateCell(audioform.griddown, 1, 1, CUSTOMTITLE_OLD)
        audioform.AutoresizeAudioForm()
          Else If PlayQueueIs = "chapters" Then
            Try chaptersgrid.row = data_new
    Endif
  
    Case mplayer.volumeproperty
      UpdateVolumeSlider(data_new)
  
    Case "percent-pos"
      UpdateSeekSlider(data_new)
      'If generaloptions.ShowCacheGaugeCHK.value Then Update_cache_percent(mplayer.get_property_mpv("cache", True, 1, True))
      
    Case "=time-pos"
      Try CTIME_OLD = Split(data_new, ".")[0]
      UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
  
    Case "media-title"
      If global.IsCdaudio(mplayer.getP("fullpath")) Then Goto ReturnLabel 'cd title is treated differently
      Try CUSTOMTITLE_OLD = data_new
      UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
      audioform.UpdateCell(audioform.griddown, 1, 1, CUSTOMTITLE_OLD)
  
    Case "demuxer-cache-duration"
      If data_new <> mplayer.unavailable_str Then CACHEVALUE_OLD = data_new
      UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
      If generaloptions.ShowCacheGaugeCHK.value Then Update_cache_percent(data_new)

    Case Like "=duration"
      UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)

    Case Like "duration"
      UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)

    Case "=aid"
      global.myDebug("changed aid:", data_old, data_new)
      mplayer.setP("tracklist-current-audio", TracklistCurrentAudioTrack())

  End Select

  Returnlabel:
    If DbusAlreadyRegistered Then 'cercami
      mpris.emit_propertychanged() 'cercami
    Endif
  
  Return

End

Public Function TracklistCurrentAudioTrack() As Integer
  Dim n, t As Integer
  Dim current_aid, id As String
  Try t = mplayer.getP("track-list/count")
  If Error Then Return
  For n = 0 To t - 1
    If mplayer.get_property_mpv("track-list/" & n & "/type", True, 1, True) = "audio" Then
      If mplayer.get_property_mpv("track-list/" & n & "/selected", True, 1, False) = "yes" Then
        Return n
      Endif
    Endif
  Next
  Return 0
End


Public Sub Update_cache_percent(cache_duration As String)
  Dim percent_pos, percent_cache, duration, cache_duration_secs As Float
  duration = -1
  Try duration = CFloat(mplayer.get_property_mpv("=duration", True, 1, True))
  If duration = -1 Then 
    SetProgressCache(0)
      Else
    Try percent_pos = CInt(mplayer.get_property_mpv("percent-pos", True, 1, True))
    Try percent_cache = (CFloat(cache_duration) / duration)
    Try SetProgressCache((percent_pos / 100) + percent_cache)
  Endif
End

Private Const max_failures As Integer = 10

Public Sub Mplayer_mykill(return_value As Integer, play_success As Boolean, Optional fullpath As String, Optional percent As String)
  Dim playlistfinished As Boolean = False
  mplayer.Postcommand = generaloptions.NoParsePostCommand.text
  Fmain.caption = global.AppName
  Stopmthumbler()
  'cachebar removed cachebar.w = 0
  ButtonPlay.picture = Picture["media-playback-start.png"]
  SubNotSet = True
  If (Not mplayer.user_stopped) And (Shutdown = "MEDIA") Then CountDown.engage

  If buttoncapture.value Then StopDumping() 'fixmempv dumping
  buttoncapture.enabled = False
  buttoncapture.visible = buttoncapture.enabled  
  ArrangeCpl()
  VEqHasBeenSet = False
  IsDvd = False
  customtitle = ""
  MenumediaExplorer.Enabled = False
  'hide the cover
   ' If GeneralOptions.CoverCHK2.value Then
   '   'ShowAudioPanel(False)
   '   Try mymeters.stopp
   ' Endif

  videobox.cached = False
  'delete export file
  'Try Kill mymeters.exportfile 'mpv 0.11 removed af_export filter :(

  addhistory(fullpath, "0", False, percent)
  If TogglePls.value And (Not mplayer.user_stopped) And (Not FirstPlay) And (Not (mplayer.getP("fullpath") Like "dvb://*")) And ((mplayer.subsequent_failures < max_failures)) Then
      global.myDebug("end of media reached, playing next video...")

      SelectNext(True, GetActivePlayQueue())
      PlaylistFinished = Not global.IsNextSelected
      If (Shutdown = "PLS") And PlaylistFinished And (Not ShufflePls.value) Then CountDown.engage
      global.myDebug("mpv was off, so hit PLAY from here")

      If Not (mplayer.ProcessRunningOvr()) Then
        Play(Media_Next_path)
          Else
        global.myDebug("Not hitting PLay from here because ButtonNext did it first")
      Endif
    Else 'do not autoadvance condition
      ' If (subsequent_failures >= max_failures) Then
      '   ButtonStop_Click()
      '   togglepls.value = False
      ' Endif
      Playstarted = False
      'UserStopped = False
      FirstPlay = False
      ' Qui fai partire un Timer, che se il player è ancora fermo dopo qualche secondo:
      ' 1 - disabilita il pannello audioconvert
      ' 2 - esce dal fullscreen
      'If ((Not TogglePls.value) And fsform.FullScreen) Then FullScreenSwitch()
      'ShowAudioPanel(False)
      timer_player_idle = New Timer As "timer_player_idle"
      timer_player_idle.delay = 2000
      timer_player_idle.start
  Endif

    StatusLabelLeft.text = (" Stopped")
    StatusLabelRight.text = ""

    SeekBar.value = 0
    SetProgress(seekbar.value)
    SetProgressCache(0)
    Fmain.caption = global.AppName

End


Public timer_player_idle As Timer 

Public Sub timer_player_idle_timer()
  If Not mplayer.ProcessRunningOvr() Then
    If ((Not TogglePls.value) And fsform.FullScreen) Then FullScreenSwitch()
    ShowAudioPanel(False)
  Endif
  timer_player_idle.stop
End


Private PrevValuecTime As Integer = 0 'so that the first value will be used


Public Sub Mplayer_AnalyzerNewValue(bAvg As Integer, delay As Float, Optional NewValuecTime As Integer)
  Dim bAvgAdapted As Integer
  Dim K As Float
  Dim threshold As Integer = VideoEqualizer.SpinBoxThreshold.value

  If (NewValuecTime - PrevValuecTime >= 10) Then
    If ((NewValuecTime - PrevValuecTime) Mod 5 = 0) Then
      global.myDebug("Periodic keyframe, diff = " & (NewValuecTime - PrevValuecTime) & " ;raising threshold")
      threshold = 1 + CInt((VideoEqualizer.Slider7.value * 10) / 4) 
      PrevValuecTime = NewValuecTime
    Endif
  Endif

  PrevValuecTime = NewValuecTime
  Wait delay - 0.04

  'k=0 -> retta
  'max sano, circa 4
  'k = 2
  k = VideoEqualizer.SpinBoxGammaExp.value
  
  bAvgAdapted = (255 - bAvg) * ((((255 - bAvg) / 255) ^ K)) 'gamma function
  bAvgAdapted *= (100 / 255) 'normalized to 0..100
  bAvgAdapted = bAvgAdapted Div (11 - VideoEqualizer.Slider7.value) 'normalized to user setting
  bAvgAdapted = CInt(bAvgAdapted * (1 + (VideoEqualizer.Slider7.value / 10)))
  If bAvgAdapted > 100 Then bAvgAdapted = 100
  SlideTo(VideoEqualizer.Slider6, (bAvgAdapted), threshold)
  global.myDebug("bAvg = " & bAvg, "bAvgAdapted = " & bAvgAdapted)
End






Public Sub SlideTo(aSlider As Slider, aTarget As Integer, Optional aThreshold As Integer = 7)
  Dim wasdisabled As Boolean = True
  Dim tvalue As Integer = aSlider.value
  Dim waittime As Float = 0.005

  VideoEqualizer.NoOsd = True

  If aSlider.enabled = False Then
    wasdisabled = True
    aSlider.Enabled = True
    Wait
  Endif
  
  If Abs(aSlider.value - aTarget) <= aThreshold Then 
    global.myDebug("Abs(aSlider.value - aTarget) <= aThreshold)")
    global.myDebug("Abs(" & aSlider.value & "-" & aTarget & ")==" & Abs(aSlider.value - aTarget) & " <= " & aThreshold)
    Goto lEnd
  Endif

  If aSlider.value < aTarget Then
    Repeat
      tvalue += 1
      Try aSlider.value = tvalue
      Sleep waittime
    Until (tvalue >= aTarget) 
      Else
    Repeat
     tvalue -= 1
     Try aSlider.value = tvalue
     Sleep waittime
    Until (tvalue <= aTarget) 
    If wasdisabled Then aSlider.Enabled = False
  Endif
  
  lEnd:
  VideoEqualizer.NoOsd = False

End


Private Sub UpdateVolumeTooltip()
  Dim tip As String
  Dim volume As Integer
  Dim overboost As String
  Dim volume_max As Integer = 100
  
  If Not mplayer.ProcessRunningOvr() Then Return


  Try volume_max = CInt(CFloat(mplayer.mpvoptions["volume-max"]))
  If volume_max = Null Then overboost = "100"

  savevolumeslider.maxvalue = volume_max
  Try volume = mplayer.get_property_mpv(mplayer.volumeproperty, True)

  If Error Then Return
  tip = "   Volume: " & CStr(volume) & "% "
  If volume > 100 Then 
    StatusLabelright.Foreground = color.red
  Else
    StatusLabelright.Foreground = color.white
  Endif
  StatusLabelright.text = tip
End

Public Sub ShowVolBtn_enter()
  VolumeFocused = True
  UpdateVolumeTooltip()
End

Public Sub ShowVolBtn_leave()
  VolumeFocused = False
End

Public Sub SaveVolumeSlider_enter()
  If Global.MouseInside(SaveVolumeSlider) Then
    VolumeFocused = True
    UpdateVolumeTooltip()
  Endif
End

Public Sub SaveVolumeSlider_leave()
  VolumeFocused = False
End

Public Sub SaveVolumeSlider_MouseUp()
  If Not (Global.MouseInside(SaveVolumeSlider) Or Global.MouseInside(ShowVolBtn)) Then 'check needed due to a gambas bug with gtk
    VolumeFocused = False
  Endif
End

Public Function makeN(number As String, digits As Integer) As String

  If Len(number) < digits Then
    Repeat
      number = "0" & number
    Until Len(number) = digits
  Endif
  Return number

End

Public Sub VersionCheck()

  Dim UserVersion, UserMajor, UserMinor, RequiredMajor, RequiredMinor, Userminiminor, requiredminiminor As String
  Dim Required As String = Global.requiredversion
  Dim cfruser, cfrrequired As Long
  
  UserVersion = System.fullversion
  
  'Shell "gbx3 -V" Wait To UserVersion
  
  RequiredMajor = makeN(Split(Required, ".")[0], 5)
  RequiredMinor = makeN(Split(Required, ".")[1], 5)
  RequiredMiniminor = makeN(Split(Required, ".")[2], 5)
  UserMajor = makeN(Split(UserVersion, ".")[0], 5)
  UserMinor = makeN(Split(UserVersion, ".")[1], 5)
  Userminiminor = makeN(Trim(Split(UserVersion, ".")[2]), 5)
  
  Try cfruser = UserMajor & UserMinor & Userminiminor
  If Error Then 
    global.myDebug("Couldn't check required version")
    Return
  Endif
  Try cfrrequired = RequiredMajor & RequiredMinor & RequiredMiniminor
  If Error Then 
    global.myDebug("Couldn't check required version")
    Return
  Endif
  If cfruser >= cfrrequired Then Return
  'else...
  MyQuestion.Ask(("WARNING\nYour Gambas version is ") & Trim(UserVersion) & ("\nbut xt7-player requires ") & global.RequiredVersion, ("Understood"), "")
  
End

Public Sub SaveVolumeSlider_Change()
    volume_set(SaveVolumeSlider.value)
End

Public SeekingRestarting As Boolean = False

Public Sub SeekOrSeekAndRestart(Action As String)
  'Restart the stream from a new position on youtube streams instead of seeking.
  
  Dim newpos As Integer
  
  'do as usual for non YT streams:
  
  If Not ((mplayer.getP("fullpath") Like "http://*.youtube.*/*") Or (mplayer.getP("fullpath") Like "https://*.youtube.*/*")) Then
    mplayer.Send(Action) 'WTH?
    Return
  Endif
  
  'or issue restarts to the current stream (youtube)
  needytcookie = True
  If SeekingRestarting Then Return
  'Do as usual on strange errors ?
  Try newpos = CInt(mplayer.CurrentTime()) + Split(Action, " ", "", True, False)[1]
  If Error Then mplayer.Send(Action) 'WTH?
  SeekingRestarting = True
  SeekRestart(newpos)
  SeekingRestarting = False
  
End

Public Sub SeekBar_Change()
  Dim percent As Integer
  If fmain.closing Then Return
  If Not (Seekbar.tag = "timer") Then
    percent = SeekBar.value * 100
    mplayer.do_seek(percent, FsForm.fullscreen)
  Endif
End

Public Sub SeekRestart(newpos As Integer)

  Dim cookieopts As String
  VEqHasBeenSet = False
  If mplayer.ProcessRunningOvr() Then
    ForcedAspectRT = "default"
    ' mplayer.do_restart(mplayer.getP("fullpath"), GetOptionsFromGui() & SetRightCache() & VmetersOptionsAndInitIfNeeded() & " " & cookieopts, False, False, newpos)
    audioform.BarBox.visible = False  'mpv 0.11 removed af_export filter :(
    mplayer.do_restart(mplayer.getP("fullpath"), GetOptionsFromGui() & SetRightCache() & " " & cookieopts, False, False, newpos)
    aspectmenu.visible = Not (mplayer.getP("audioonly") Or fsform.fullscreen)
    CorrectAreaAspect()
    ' LogWindow.clearlogs()
    ' LogWindow.ShowLogs()
  Endif


End


Public Sub GetOptionsFromGui()
  global.myDebug("STUBSTUBSTUBSTUBSTUB")
  global.myDebug("STUBSTUBSTUBSTUBSTUB")
  global.myDebug("STUBSTUBSTUBSTUBSTUB")
  global.myDebug("STUBSTUBSTUBSTUBSTUB")
  global.myDebug("STUBSTUBSTUBSTUBSTUB")
End



Public Sub MenuOpen_Click()

  ButtonOpen_Click()

End

Public Sub MenuQuit_Click()

  FMain.Close

End

Public Sub MenuAbout_Click()

  MyQuestion.ask(Global.aboutmessage, ("GotIt!"), "")
  
End


Public Sub ShowVolBtn_Mouseup()
  Dim last_w As Integer = Last.w
  If Mouse.left Then 
    controlpanelright.autoresize = False
    controlpanelright.w = 120
    'SaveVolumeSlider.Visible = Not SaveVolumeSlider.Visible
    volumecontainer.Visible = Not volumecontainer.Visible
    volumecontainer.autoresize = Not volumecontainer.Visible
    controlpanelright.refresh()
    controlpanelright.autoresize = True
      Else If Mouse.middle Then
        If mplayer.ProcessRunningOvr() Then
          mplayer.mpv_command(["cycle", "mute", "up"])
        Endif
  Endif
  If mplayer.get_property_mpv("mute") = "yes" Then
    ShowVolBtn.picture = Picture["volume-muted-faenza.png"]
      Else
    ShowVolBtn.picture = Picture["volume-faenza.png"]
  Endif
  Last.w = last_w
    CostrainFormSizes()
End
Public Sub ShowVolBtn_MouseWheel()
  If Mouse.delta > 0 Then
    volume_add("+2")
  Else
    volume_add("-2")
  Endif
End


Public Sub ProgressFrame_MouseUp()
  HideThumbler()
  If thumbleractive Then
    If Not Mouse.left Then Return
    If Not global.MouseInside(bottomvbox) Then Return
  Endif
  If Not mplayer.ProcessRunningOvr() Then Return
  If (mplayer.getP("partially-seekable") = "yes") Then 
    CantSeekMessage()
    Return
  Endif
  'seekbar.value = mouse.x / seekbar.w
  seekbar.value = mouse.x / Last.w
  SetProgress(seekbar.value)
  Wait

  global.myDebug("seeking")
  SeekBar_Change()
  'SetProgress(seekbar.value)
End

Public Sub ProgressFrame_DblClick()
  If (mplayer.getP("partially-seekable") = "no") Then Return
  'seekbar.value = mouse.x / seekbar.w
  seekbar.value = mouse.x / Last.w
  SeekBar_Change()
  SetProgress(seekbar.value)
End


Public Sub VideoAreaGroup_MouseDrag()
  Dim threshold As Integer = videobox.w Div 20
  Dim isimgfile As Boolean = global.IsImgFile(mplayer.getP("fullpath")) 
  
  If (Not fsform.FullScreen) And (Not isimgfile) Then
    If SwitchingFullScreen Then Return
    If mouse.left Then
     GuiDragging = True
      fmain.Move(fmain.x + (mouse.x - mouse.StartX), fmain.y + (mouse.y - mouse.Starty))
    Endif
  Else
    global.myDebug(" ")
    If GeneralOptions.PanTagCHK.value Or isimgfile Then
      If isimgfile Then mplayer.do_seek(0)
      'Allow Dragging image if it is panned:
      global.myDebug(resizefactor)
      'If mouse.left And (ResizeFactor > 1) Then
      If mouse.left Then
        GuiDragging = True
        ' NewX = VideoBox.screenx + (mouse.x - mouse.StartX) - outerbox.screenx
        ' NewY = VideoBox.screeny + (mouse.y - mouse.Starty) - outerbox.screeny
        ' If (NewX < (Desktop.w Div 2)) And (NewY < (Desktop.h Div 2)) Then
        '   If (NewX + VideoBox.w) > (Desktop.w Div 2) And (Newy + VideoBox.h) > (Desktop.h Div 2) Then
        '     VideoBox.Move(NewX, NewY)
        '   Endif
        ' Endif

        mplayer.send("no-osd set pause yes")
         If (Mouse.x - Mouse.startx) > threshold Then 
           mplayer.send("no-osd add video-align-x -0.01")
           Goto returnlabel
         Endif
         If (Mouse.StartX - Mouse.x) > threshold Then
           mplayer.send("no-osd add video-align-x +0.01")
           Goto returnlabel
         Endif

         global.mydebug(Mouse.Starty - Mouse.y)
         If (Mouse.y - Mouse.starty) > threshold Then
           mplayer.send("no-osd add video-align-y -0.01") 
           global.myDebug("-Y")
           Goto returnlabel
         Endif
         If (Mouse.Starty - Mouse.y) > threshold Then 
           mplayer.send("no-osd add video-align-y +0.01")
           global.myDebug("+Y")
           Goto returnlabel
         Endif
         
      Endif
    Endif
  Endif
  returnlabel:
  Return
End

Public Function DisableKDECompositing() As Boolean
  
  Dim wasactive As Boolean = False
  Dim t As String

  'kde4:  
    Try wasactive = DBus["org.kde.kwin"]["/KWin"].compositingActive() 
    If Error Then Goto try_kde5
    If wasactive Then
      Shell "dbus-send --type=method_call --dest=org.kde.kwin /KWin org.kde.KWin.toggleCompositing" Wait
      Return wasactive
    Endif
    
  try_kde5:
    Shell "qdbus org.kde.KWin /Compositor active" To t
    If t Begins "true" Then 
      wasactive = True
      Shell "qdbus org.kde.KWin /Compositor suspend" Wait
    Endif
  
  Return wasactive
  
End

Public Function EnableKDECompositing() As Boolean
  
  Dim wasinactive As Boolean = False
  Dim t As String 
  
  Try wasinactive = (DBus["org.kde.kwin"]["/KWin"].compositingActive())
  If Error Then Goto try_kde5
  If wasinactive Then
    Shell "dbus-send --type=method_call --dest=org.kde.kwin /KWin org.kde.KWin.toggleCompositing"
    Return wasinactive
  Endif

  try_kde5:
  Shell "qdbus org.kde.KWin /Compositor active" To t
  If Not (t Begins "true") Then 
    wasinactive = True
    Shell "qdbus org.kde.KWin /Compositor resume"
  Endif
  
  
  Return wasinactive
  
  
  
End

Private KdeEffectsWereActive As Boolean = False

Public Sub FsCommandsExec(Fullscreen As Boolean, fps As String)

  Dim fscommand As String = global.ConfPath & "/switch.fs.command.sh"
  Dim windowcommand As String = global.ConfPath & "/switch.win.command.sh"
  Dim WasPaused As Boolean = False
  Dim sw, sh, mx, my As Integer
  
  sw = Screen.w
  sh = Screen.h
  mx = mouse.Screenx
  my = mouse.screeny
  
  If fullscreen Then
    If Exist(fscommand, True) Then 
      global.myDebug("Executing " & fscommand & " " & fps)
      If Not mplayer.Paused() Then 'pause the video before swhitching fullscreen
        mplayer.do_pause()
        WasPaused = False
      Else
        WasPaused = True
      Endif
      
      Shell ". " & fscommand & " " & fps Wait
      If Not WasPaused Then
        If mplayer.Paused() Then mplayer.do_leave_pause()
      Endif
    Else
      global.myDebug("!!!")
      global.myDebug(("Hint: create (and make executable) a script named") & " " & fscommand)
      global.myDebug(("xt7 will execute it with and pass fps argument when switching to fullscreen"))
      global.myDebug(("Eg: xrandr --rate \"$1\" "))
      global.myDebug("!!!")
    Endif
    Goto ReturnLabel
  Endif
  
  'if windowed
  If Exist(windowcommand, True) Then
    global.myDebug("Executing " & windowcommand)
    If Not mplayer.Paused() Then 'pause the video before swhitching fullscreen
      mplayer.do_pause()
      WasPaused = False
    Else
      WasPaused = True
    Endif
    Shell ". " & windowcommand Wait
    If Not WasPaused Then
      If mplayer.Paused() Then mplayer.do_leave_pause()
    Endif
  Else
    global.myDebug("!!!")
    global.myDebug(("Hint: create (and make executable) a script named ") & " " & windowcommand)
    global.myDebug(("xt7 will execute it when switching from fullscreen to window mode"))
    global.myDebug("!!!")
  Endif
  Goto ReturnLabel
  
ReturnLabel:
  If (sw + sh) <> (Screen.w + Screen.h) Then 'resolution is changed
    mouse.Move(CInt((mx * Screen.w)) / sw, CInt((my * Screen.h) / sh))
  Endif
  Return
  
End

Public Function Screenbypos(x As Integer, y As Integer) As Screen

  Dim s As Screen
  For Each s In Screens
    If (x >= s.x) And x <= (s.x + s.W) Then
      If (y >= s.y) And y <= (s.y + s.h) Then
        Return s
      Endif
    Endif
  Next
  
  'no screen found !? repeat with more tolerance:
  For Each s In Screens
    If (x + 50 >= s.x) And x <= (s.x + s.W + 50) Then
      If (y + 50 >= s.y) And y <= (s.y + s.h + 50) Then
        Return s
      Endif
    Endif
  Next

  'still no screen found? return the first.
  global.myDebug("Couldn 't get the matching screen (!)")
  Return Screens[0]
  
End

Public Sub ArrangeBottmVbox()
  bottomvbox.ignore = True
  bottomvbox.x = 0
  bottomvbox.y = bottomvbox.Parent.h - bottomvbox.h
  bottomvbox.w = bottomvbox.Parent.W
  controlframe.ignore = True
  controlframe.x = 0
  controlframe.y = controlframe.Parent.h - controlframe.h
  controlframe.w = controlframe.Parent.w
End

Private Sub CostrainFormSizes()
  MainToolbar.width = FMain.clientw - 16
  If statusbar1.visible Then
    BottomVbox.h = controlframe.h + Statusbar1.h ' + cachebar.h 
  Else
    BottomVbox.h = controlframe.h '+ cachebar.h 
  Endif
  ' ControlPanel.left = (ControlFrame.width / 2) - (ControlPanel.width / 2)
  ControlPanel.x = controlframe.x + paddingovr 
  ControlPanel.w = controlframe.w - controlpanelright.w - (paddingovr * 2)
  controlpanelright.x = ControlPanel.x + ControlPanel.w
  picturebox1.Move(0, 0, controlframe.w, controlframe.h)
End

Public Sub FullScreenSwitch()
  SwitchingFullScreen = True
  If fsform.fullscreen Then
    SwitchToWindow()
    If global.IsImgFile(mplayer.getP("fullpath")) Then mplayer.do_seek(0)
    If GeneralOptions.NoEffectsCheckbox.value Then
      If KdeEffectsWereActive Then 
        Wait 1 'workaround possible driver bugs
        EnableKDECompositing()
      Endif
    Endif
  Else
    If global.IsImgFile(mplayer.getP("fullpath")) Then mplayer.do_seek(0)
    'Disable kde effects?

    If GeneralOptions.NoEffectsCheckbox.value Then
      Try KdeEffectsWereActive = DisableKDECompositing()
      If Error Then
        global.myDebug("Unable to disable kde effects, are you sure use kwin window manager?")
        KdeEffectsWereActive = False
          Else
        'Wait 0.5 'workaround possible driver bugs
      Endif
    Endif
    SwitchToFS()
  Endif
  ' ' ' zzzfake.cachingbox.x = (outerbox.w Div 2) - 33
  ' ' ' zzzfake.cachingbox.y = (outerbox.h Div 2) - 33
  SwitchingFullScreen = False
  UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
  UpdateSeekSlider()

End



Private winmax As Boolean 


Public Sub SwitchToFS()
 Dim i As Integer
 Dim waspaused As Boolean = False
 Dim dopauseworkaround As Boolean = False
 dopauseworkaround = (generaloptions.CHKpausefullscreen.value = CheckBox.True)
 If dopauseworkaround Then 
   If mplayer.ProcessRunningOvr() Then
     If Not mplayer.getP("audioonly") Then
       waspaused = mplayer.paused(True)
       If Not waspaused Then mplayer.do_pause()
     Endif
   Endif
 Endif
  'save the windowed information
  videobox.hide
  Wait 0.1
  OuterBox.Mouse = mouse.blank
  VideoBox.Mouse = mouse.blank
  Object.Lock(hsplit1)
  winmax = fmain.Maximized
  fmain.hide
  'cachebar removed: cachebar.hide
  If HSplit1.Layout.count > 0 Then
    If Not (Hsplit1.Layout[0] = 0) Then SplitterLayout = Hsplit1.Layout
  Endif

  If Lower(Maintoolbar.parent.name) <> Lower(FsForm.name) Then Maintoolbar.Reparent(FsForm)
  
  'do not move the video window when showing main toolbar
    Maintoolbar.ignore = True
    ToolbarBackground.ignore = True 
  
  FsForm.Background = color.black
  fsform.Move(Screens[fmain.screen].x, Screens[fmain.screen].y, Screens[fmain.screen].w, Screens[fmain.screen].H)

  FsForm.FullScreen = True
  FsForm.Background = color.Default
 
 
  'execute shell commands
  'If mplayer.ProcessRunningOvr() And (Not mplayer.getP("audioonly")) Then FsCommandsExec(True, mplayer.getP("fps"))

  'invert the HSplit with a vSplit
  If Lower(fmain.HSplit1.Parent.name) <> Lower(zzzFake.name) Then fmain.HSplit1.Reparent(zzzFake)
  If Lower(zzzFake.VSplit1.Parent.name) <> Lower(FsForm.name) Then zzzFake.VSplit1.Reparent(FsForm)

  'populate the New VSplit1 With controls
  If Leftsidepanel.parent <> zzzFake.vsplit1 Then Leftsidepanel.Reparent(zzzFake.vsplit1)
  If rightsidepanel.parent <> zzzFake.VSplit1 Then rightsidepanel.Reparent(zzzFake.VSplit1)

  'restore the form position
  LeftsideWasVisible = LeftsidePanel.Visible 
  
  'hide the upper controls
  Leftsidepanel.hide()

  fsform.show '<- fsform has to be shown before constrainfromsizes()
  'let the bottom panel adapts to the new size:
  Wait '<-this wait has to come before ConstrainFormSizes()
  CostrainFormSizes()
  bottomvbox.Hide
  If BottomVbox.parent <> rightsidepanel Then BottomVbox.Reparent(rightsidepanel)
  toolbarbackground.hide
  'cachebar removed: cachebar.raise
  Wait '<-this wait has to come just after ConstrainFormSizes()
  
  'start the timer 
  TimerFullScreen.start
  
  RightSidePanel.SetFocus()

  If zzzfake.PanelNowNext.visible Then 
    PanelNowNextArrange()
  Endif
  
  'show all
  Object.unLock(hsplit1)
  
  If statusbar1.visible Then 
    statusbar1.ignore = True
    statusbar1.y = statusbar1.Parent.h - statusbar1.h
  Endif
  bottomvbox.ignore = True
  controlframe.ignore = True
  bottomvbox.w = Screenbypos(fmain.screenx, fmain.screeny).Width
  controlframe.w = bottomvbox.W

  CostrainFormSizes()
  Maintoolbar.hide

  mousehider.trigger
  videobox.Show
  If Lower(audioform.AudioPanel.parent.name) = Lower(outerbox.name) Then Audioform.AutoresizeAudioForm()
  For i = 1 To 10
    CorrectAreaAspect()
    Wait 0.1
  Next 'i

  fsform.picture = Null

 If dopauseworkaround Then 
   If (Not waspaused) Then mplayer.do_leave_pause()
 Endif

End



Public Sub SwitchToWindow()
  fsform.picture = Picture["black.png"]
  bottomvbox.y = rightsidepanel.h - bottomvbox.h
  BottomVbox.ignore = False
  'execute shell commands
  'FsCommandsExec(False, 60)
  
  'restore maintoolbar and shadow:
  Maintoolbar.background = Color.Default 
  toolbarbackground.background = Color.default
  ToolbarBackground.lower
  Maintoolbar.ignore = False
  toolbarbackground.ignore = False
  
  If Lower(Maintoolbar.parent.name) <> Lower(fmain.name) Then Maintoolbar.Reparent(fmain)
  fsform.Background = color.black
  Wait    

  'invert the VSplit with a HSplit
  If Lower(zzzFake.VSplit1.parent.name) <> Lower(zzzFake.name) Then zzzFake.VSplit1.Reparent(zzzFake)
  If Lower(Hsplit1.parent.name) <> Lower(Fmain.name) Then Hsplit1.Reparent(Fmain)

  'populate HSplit with controls
  If Leftsidepanel.parent <> Hsplit1 Then Leftsidepanel.Reparent(Hsplit1)
  If rightsidepanel.parent <> HSplit1 Then rightsidepanel.Reparent(HSplit1)
  If (SplitterLayout <> Null) Then Hsplit1.Layout = SplitterLayout
  Wait
  'show the menu
  AllmenuVisible(True)
  toolbarbackground.show
  'restore the form position
  LeftsidePanel.Visible = LeftsideWasVisible
  
  UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
  
  'show the bottom controls
  bottomvbox.Raise() '<-make sure it is on the bottom
  bottomvbox.show
  CostrainFormSizes()
  
  TimerFullScreen.Stop()
  
  If zzzfake.PanelNowNext.visible Then 
    PanelNowNextArrange()
    Wait
  Endif
  
  RightSidePanel.SetFocus()
  
  OuterBox.Mouse = mouse.Default
  VideoBox.Mouse = mouse.Default
  
  'make the form windowed
  fsform.Background = color.black
  Wait

  bottomvbox.ignore = False
  controlframe.ignore = False
  statusbar1.ignore = False
  CostrainFormSizes()
  Maintoolbar.hide 'workaround for missing picture at fs switch
  Wait 
  Maintoolbar.show
  Wait 
  'cachebar removed: If cachebar.parent <> rightsidepanel Then cachebar.Reparent(rightsidepanel)
  'cachebar removed: cachebar.Move(0, outerbox.h - cachebar.h + toolbarbackground.h)
  'cachebar removed: cachebar.raise
  'cachebar removed: cachebar.show
  'cachebar removed: wait
  fmain.Stacking = Window.below
  fmain.Maximized = winmax
  fmain.show  
  fmain.Maximized = winmax 'openbox hack
  Wait 0.1
  fmain.Stacking = Window.normal
  FsForm.hide
  FsForm.FullScreen = False

  Hsplit1_MyRefresh()
  If Lower(audioform.AudioPanel.parent.name) = Lower(outerbox.name) Then Audioform.AutoresizeAudioForm()
End


Public Sub AllmenuVisible(AreVisible As Boolean)

  Menuplaylist.visible = AreVisible
  MenuMain.visible = AreVisible
  MenuState.visible = AreVisible
  MenuAbout.Visible = AreVisible
  MainToolBar.visible = AreVisible
  MenuConfigure.visible = AreVisible
  MenuLibrary.Visible = AreVisible
  AspectMenu.Visible = (AreVisible And (Not mplayer.getP("audioonly")))

End

' Private Sub MouseHide()
' 
'   If (Mouse.screenx & "." & Mouse.ScreenY = MousePos) Then
'     OuterBox.Mouse = mouse.blank
'     VideoBox.Mouse = mouse.blank
'   Else
'     OuterBox.Mouse = 0
'     VideoBox.Mouse = 0
'   Endif
'   
'   MousePos = Mouse.screenx & "." & Mouse.ScreenY
'   
' End


Public mousehider As New Timer As "mousehider"

Private Sub HideMouseDelayed()
  mousehider.delay = 500
  If Not (mousehider.Enabled) Then mousehider.start
End

Public Sub mousehider_Timer()
  OuterBox.Mouse = mouse.blank
  VideoBox.Mouse = mouse.blank
  mousehider.stop
End




Public Function MouseInsideFsFormByCoords() As Boolean
  'reports if the cursor is inside fsform by checking the coordinates
  
  If mouse.ScreenX >= fsform.screenx Then
    If mouse.ScreenX <= fsform.screenx + fsform.W Then
      If mouse.ScreenY >= fsform.ScreenY Then
        If mouse.ScreenY <= fsform.ScreenY + fsform.h Then
          Return True
        Endif
      Endif
    Endif
  Endif
  Return False

End



Public Sub TimerFullScreen_Timer()
  
  Dim BottomThreshold As Integer = 96
  Dim TopThreshold As Integer = 48
  Dim AttachZone1 As Boolean 'bottom
  Dim AttachZone2 As Boolean 'top
  Dim ReleaseZone1 As Boolean  'bottom vbox
  Dim ReleaseZone2 As Boolean 'top

  If Not MouseInsideFsFormByCoords() Then Return 'fixme alternativa più leggera?

  Try AttachZone1 = (Mouse.screeny > fsform.screeny + Fsform.h - BottomThreshold) 'bottom
  If Error Then Return
  Try AttachZone2 = (Mouse.screeny < TopThreshold) 'top
  If Error Then Return
  Try ReleaseZone1 = (Mouse.screeny < ControlFrame.screeny - BottomThreshold) 'bottom vbox
  If Error Then Return
  Try ReleaseZone2 = (Mouse.screeny > MainToolbar.Height + TopThreshold)  'top
  If Error Then Return
  '     
  If AttachZone1 Then
    BottomVbox.ignore = True
    bottomvbox.y = rightsidepanel.h - bottomvbox.h
    Audioform.AudioPanel.ignore = True
    BottomVbox.visible = True
    'cachebar removed: cachebar.Move(0, bottomvbox.y - cachebar.h)
    'cachebar removed: cachebar.show
  Endif
  
  If AttachZone2 Then
    MainToolBar.visible = True

    Maintoolbar.show
    toolbarbackground.show
    'do not move the video window on when showing main toolbar
      Maintoolbar.Move(0, 0, fsform.w) 
      toolbarbackground.Move(0, Maintoolbar.h, fsform.w) 
      Maintoolbar.Background = Color.Background 
      toolbarbackground.background = Color.background 
      toolbarbackground.raise 
      Maintoolbar.raise
    

    AllmenuVisible(True)
  Endif
  

  If ReleaseZone1 And Not (thumblebox.visible) Then
    BottomVbox.ignore = False
    BottomVbox.visible = False
    'cachebar removed: cachebar.hide
    Audioform.AudioPanel.ignore = False
    Wait
    If global.IsImgFile(mplayer.getP("fullpath")) Then mplayer.do_seek(0)
  Endif
  
  If ReleaseZone2 And (Not AttachZone1) And (MainToolBar.Visible) Then
    MainToolBar.Visible = False
    toolbarbackground.hide
    AllmenuVisible(False)
    If (Not BottomVbox.visible) Then CorrectAreaAspect
  Endif
  
End

Public Sub SwitchSidePanelBTN_Click()
  
  If Leftsidepanel.visible Then
    If Not fsform.FullScreen Then
      Hsplit1.tag = Hsplit1.layout
      Leftsidepanel.visible = False
      Hsplit1_MyRefresh() 'gb 3.4.0 bug
    Endif
    Leftsidepanel.visible = False
  Else
    Leftsidepanel.visible = True
    'Wait 1
    If Not fsform.FullScreen Then 
      Hsplit1_MyRefresh() 'gb 3.4.0 bug

      If hsplit1.tag = Null Then
        Leftsidepanel.w = 256
        'Wait 1
      Else
        Hsplit1.layout = Hsplit1.tag
        timerhideshowvideo.start 'gb 3.4.0 bug
      Endif 
    Endif
  Endif
  CorrectAreaAspect
  If (Not OuterBox.visible) Then OuterBox.visible = True
  
End

Public Sub LibraryGrid_Drop()
  
  Dim droppedfiles As String[]
  Dim DroppedFile, ext As String
  Dim dragdata As String
  
  Dim IsFile, IsURI, IsDirectory, IsPlayList As Boolean
  
  dragdata = Drag.Paste("text/uri-list")
  droppedfiles = Split(dragdata, "\n\r", "", True)
  global.myDebug("Start at: " & Time)
  'prepare the progressbar
  MyLibraryProgressBar.visible = True
  MyLibraryProgressBar.h = 32
  Wait 0.1
  MyLibrary.FilesToProcess = Global.GetTotalFiles(dragdata, True)
  MyLibraryProgressBar.value = 0 '(it will be update by MyLibrary.add())
  
  MyLibrary.SyncSortedTable() '<-necessary for MyLibrary.isdupe() function
  For Each DroppedFile In Droppedfiles
    If Trim(DroppedFile) <> "" Then
      droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))
      ISFile = False
      IsDirectory = False
      IsUri = False
      Try ISFile = (Stat(droppedfile, True).type = gb.file)
      Try IsDirectory = (Stat(droppedfile, True).type = gb.Directory)
      ext = Upper(File.Ext(DroppedFile))
      Try IsPlaylist = ((ext = "M3U") Or (ext = "PLS") Or (ext = "XPL"))
      IsUri = (droppedfile Like "*://*")
      
      If IsPlayList And (Not isuri) Then 
        MyLibrary.LoadFile(droppedfile, LibraryGrid, True)
      Else If IsFile Then
        MyLibrary.AddFile(LibraryGrid, DroppedFile, False)
      Else If IsDirectory Then
        Try MyLibrary.AddDir(LibraryGrid, DroppedFile, GeneralOptions.NoParseExcludedListbox)
      Else If IsUri Then
        MyLibrary.AddFile(Librarygrid, Droppedfile, GeneralOptions.SlowTagsCHK.value, True)
      Endif
    Endif
  Next
  MyLibrary.SyncSortedTable() '<-necessary for MyLibrary.isdupe() function
  Try MyAlbumsLib.Init(mylibrary, AlbumGridView, searchfieldalbums.text)
  If Error Then global.myDebug("Error while initializing albums view")
  Try MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
  If Error Then global.myDebug("Error while Arranging albums view")
  global.myDebug("End at: " & Time)
  'reset the progressbar
  MyLibraryProgressBar.h = 0
  MyLibraryProgressBar.visible = False
  MyLibrary.FilesToProcess = 0
  MyLibrary.FilesProcessed = 0
  MyLibraryProgressBar.value = 0
  UpdateSearchResults(mylibrary, librarygrid, True, Searchfield.text)
  ScrollLeft()
  fmain.MyLibrary.Save(fmain.LibraryGrid, global.confpath)
End

Public timerscroll As Timer

Public Sub ScrollLeft()
  timerscroll = New Timer As "timerscroll"
  timerscroll.delay = 1
  timerscroll.enabled = True
  
End

Public Sub timerscroll_timer()
  Try librarygrid.MoveTo(0, 0)
  Try playlistgrid.MoveTo(0, 0)
  timerscroll.enabled = False
End

Public Sub MenuVideoAudioChains_Click()
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  NewChains.show
End

Public Sub MenuVideoDriver_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  NewChains.show_video_drivers()
  
End

Public Sub MenuAudioDriver_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  NewChains.show_audio_drivers()
  
End

Public Sub MenuSaveDefault_Click()
  If Lower(global.CurrentProfile) = "factory_defaults" Then
    If MyQuestion.Ask(("You can't modify the current profile\nbecause it is the Factory defaults one"), ("Switch to ''default'' profile and save"), ("Don't save")) = 1 Then
      global.CurrentProfile = "default"
      Try UpdateProfilesTabList()
    Else
      Return
    Endif
  Endif
  Try ReallySaveAllSettings(global.CurrentProfile, True)
  'GetOptionsFromGui() 'commented because it is called by reallysaveallsettings
  If Error Then Message.Error(("Error while saving default settings"))
  Try UpdateProfilesTabList()

End

Public Sub ReallySaveAllSettings(DestinationProfile As String, Optional with_grids As Boolean = True)

  If (Not global.initearlyformsdone) Then InitEarlyForms()
  If (DestinationProfile = "Factory_Defaults") Then ReLoadCurrentProfile()

  Global.SaveAllSettings(DestinationProfile, with_grids)
  GeneralOptions.SaveWatchDir(global.confpath & "/" & DestinationProfile)
  GeneralOptions.SaveExcludeDir(global.confpath & "/" & DestinationProfile)
  HotKeys.SaveHotKeys(global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(Searchfield, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(SearchfieldPLS, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(Searchfieldalbums, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(SearchfieldDVB, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(youSearchfield, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(AddUriForm.UriInsComboBox, global.confpath & "/" & DestinationProfile)
  ComboHistory.SaveHistory(Fmain.Urlbox, global.confpath & "/" & DestinationProfile)
  
End

Public Sub MenuLoadDefault_Click()
  ReLoadCurrentProfile()
  'FMain.cachedopts = "" 'fixmempv se vuoi reimplementare le cachedopts
End

Public Sub MenuRestoreDefaults_Click()
  
  Dim DefaultFile As String
  
  If Not (MyQuestion.ask(("Are you sure you want to reset the default profile\nto factory values?"), ("Don't Reset"), ("Reset")) = 1) Then
    For Each DefaultFile In Dir(Global.confpath, "Default.*")
      Try Kill global.confpath & "/" & DefaultFile
      If Error Then Message.Error(("There was a problem while deleting") & global.confpath & "/" & DefaultFile, "OK")
    Next
    Message(("Default profile has been set to factory values.\nRestart is needed."))
  Endif
  
End

Public Sub MenuConfigureVideoFilters_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  NewChains.show_video_filters()
  
End

Public Sub MenuConfigureAudioFilters_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  NewChains.show_audio_filters()
  
End

Private Function get_apply_opts() As Collection
  'return options needed to apply changes
  Dim temp_opts As New Collection
  Dim new_opts As New Collection
  Dim data As String
  Dim fullpath As String = mplayer.getP("fullpath")

  'fixmempv: questi due sotto servono ancora?
    VEqHasBeenSet = False
    subnotset = True
  
  'create a new set of options
 
    temp_opts = static_options()
    For Each data In temp_opts
      new_opts[temp_opts.key] = data
    Next

    temp_opts = file_options(fullpath)
    For Each data In temp_opts
      new_opts[temp_opts.key] = data
    Next

    temp_opts = user_options(fullpath)

    For Each data In temp_opts
      new_opts[temp_opts.key] = data
    Next  

    new_opts["volume"] = Initialvolume()
    
    'restore the old ytdl option
    Try new_opts["ytdl"] = mplayer.mpvoptions["ytdl"]
    Return new_opts
End

Public Sub Apply(Optional force_restart As Boolean = False)

  If Not mplayer.ProcessRunningOvr() Then Return
  If force_restart Then
    mplayer.do_apply_restart(get_apply_opts())
      Else
    mplayer.do_Apply(get_apply_opts())
  Endif
  
   global.ResetApplyBtnColor()
   audioform.panelvisspacer.Visible = (Left(generaloptions.NoParseVisType2.text) <> "0")
   audioform.PictureBox1.expand = Not (audioform.panelvisspacer.Visible)
   
  mplayer.mpv_command(["load-script", global.tmpdir & "/_mpvstats.lua"])
   
End



Public Sub SubTitlesMenu_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  SubAndOsd.show
  
End

Public Sub HotkeysMenu_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  HotKeys.show
  
End

' Public Sub timer_runtime_infos_timer()
'   Dim prop As New Collection
'   Dim msg As String
'   Dim name, data As String
'   Dim screen_h As Integer
'   Dim max_screen_lines As Integer
'   Dim osd_font_size As Float
'   Dim scale_new As String
'   Dim scale_old As String = "1"
'   Dim msg_time As Integer = 2000
' 
' 
' 
'   prop["Filepath"] = "path"
'   prop["---"] = " "
'   
'   prop["cache size (KB)"] = "cache-size"
'   prop["cache fill state (%)"] = "cache"
'   prop["UnSeekable"] = "partially-seekable"
'   prop["dropped frames"] = "drop-frame-count"
'   prop["dropped frames by vo"] = "vo-drop-frame-count"
'   prop["----"] = " "
'   
'   prop["Hardware decoding: requested"] = "hwdec"
'   prop["Hardware decoding: Active"] = "hwdec-current"
'   
'   prop["-----"] = " "
'   
'   prop["video driver"] = "current-vo"
'   prop["Video filters"] = "vf"
'   prop["------"] = " "
'   
'   prop["video codec"] = "video-codec"
'   'prop["video bitrate (packet)"] = "packet-video-bitrate" '<- deprecated
'   prop["video bitrate (actual)"] = "video-bitrate"
'   prop["Video width"] = "width"
'   prop["Video height"] = "height"
'   prop["Video fps"] = "estimated-vf-fps"
'   prop["-------"] = " "
' 
'   prop["audio driver"] = "current-ao"
'   prop["audio filters"] = "af"  
'   'prop["Audio device in use"] = "audio-out-detected-device"
'   prop["--------"] = " "
'   
'   prop["audio codec"] = "audio-codec"
'   'prop["audio bitrate (packet)"] = "packet-audio-bitrate"  '<-deprecated
'   prop["audio bitrate (actual)"] = "audio-bitrate"  '<-deprecated
'   prop["audio-params/channels"] = "audio-params/channels"
'   prop["---------"] = " "
' 
'   
'   For Each prop
'     name = prop.Key
'     data = prop[name]
'     
'     If name Like "*---*" Then
'       msg &= "\\n"
'         Else
'       msg &= name & "=" & "${" & data & "}"
'       msg &= "\\n"
'     Endif
'   Next
' 
' 
'   'optionally set osd scale so that all of the properties fits into the screen
'   screen_h = Screenbypos(videobox.x + 10, videobox.y - 10).H
'   Try osd_font_size = CFloat(mplayer.get_property_mpv("options/osd-font-size"))
'   If Not Error Then
'     max_screen_lines = CInt((screen_h / osd_font_size)) 
'     max_screen_lines = CInt((screen_h / (osd_font_size * (screen_h / 720)))) 
'     If max_screen_lines < prop.count Then
'       scale_new = CStr(max_screen_lines / (prop.count + 10)) 
'       mplayer.set_property_mpv("osd-scale", scale_new)
'     Endif
'   Endif
'   
'   mplayer.ShowText(msg, 5000)
'   
'   'Wait 0.5
' 
'   'mplayer.set_property_mpv("osd-scale", scale_old)
' End

' Private OSD_SCALE_BEFORE_RUNTIME_INFOS As String
Public Sub Show_runtime_infos()
  
  mplayer.mpv_command(["script-binding", "_mpvstats/display_stats_toggle"])

  
  
  
  
  
  
  
  
  'init
  

  ' If timer_runtime_infos.enabled Then 
  '   timer_runtime_infos.stop
  '   mplayer.ShowText("", 1)
  '   mplayer.set_property_mpv("osd-scale", OSD_SCALE_BEFORE_RUNTIME_INFOS)
  '     Else
  '   OSD_SCALE_BEFORE_RUNTIME_INFOS = mplayer.get_property_mpv("osd-scale", True, 1000)
  '   timer_runtime_infos.trigger
  '   timer_runtime_infos.delay = 1000
  '   timer_runtime_infos.start
  ' Endif
End

Public Sub volume_add(percent As String)
  mplayer.add_property_mpv("volume", percent, True) 'fsform.fullscreen)
  If VolumeFocused Then UpdateVolumeTooltip()
  UpdateVolumeTooltip()
End
Public Sub volume_set(value As String)
  mplayer.set_property_mpv("volume", value, True) 'fsform.fullscreen)
  If VolumeFocused Then UpdateVolumeTooltip()
End

Public Sub keys_to_mpv(gb_Hotkey As String)
  Dim mpv_hotkey As String = ""
  Dim k As String = ""
  Dim i As Integer
  gb_Hotkey = Lower(gb_Hotkey)

  'translate modifiers:
    If gb_Hotkey Like "*shift*" Then mpv_hotkey = "Shift+"
    If gb_Hotkey Like "*ctrl*" Then mpv_hotkey &= "Ctrl+"
    If gb_Hotkey Like "*alt*" Then mpv_hotkey &= "alt+"
    If gb_Hotkey Like "*meta*" Then mpv_hotkey &= "Meta+"
  'extract key
    i = InStr(gb_hotkey, "key=") + 3
    k = Right(gb_Hotkey, -i)
    'translate key:
    Select Case Lower(k)
      Case "backspace"
        k = "BS"
      Case "pageup"
        k = "PGUP"
      Case "pagedown"
        k = "PGDWN"
      Case "enter"
        k = "KP_ENTER"
    End Select
    
    mpv_hotkey &= k
  
  
  global.mydebug(gb_Hotkey & " - gb hotkey Translated to mpv hotkey->> " & mpv_hotkey)
  mplayer.mpv_command(["keypress", mpv_hotkey])
  
  
End




Public Sub HotKeyToMplayer(HotKey As String)

  'will send the action to the running mplayer
  'Some actions such as fullscreen and panscan are treated internally
  Dim currentfile As String
  Dim Action As String 
  Dim osd_level As String = ""
  Dim n As String

  global.myDebug(hotkey)
  Action = HotKeys.ActionRelatedTo(Hotkey)
  
  global.myDebug(Action)
  If Lower(action) = "nope" Then keys_to_mpv(Hotkey)
  
  If Action Like "seek*" Then
    If global.IsImgFile(mplayer.getP("fullpath")) Then
      If action Like "seek +*" Then
        buttonNext_click()
          Else
        ButtonPrev_Click()
      Endif
    Endif
  Endif    
  Select Case Action
    Case "show runtime infos"
      Show_runtime_infos()
    Case "switch fullscreen"
      FullScreenBtn_Click()
    Case "zoom +0.05"
      PanScanCorrect(+0.05)
    Case "zoom -0.05"
      PanScanCorrect(-0.05)
    Case "deinterlace"
      mplayer.DoDeinterlace()
    Case "pause"
      If mplayer.Paused() Then
        mplayer.do_leave_pause()
        ButtonPlay.picture = Picture["media-playback-pause.png"]
      Else
        mplayer.do_pause()
        ButtonPlay.picture = Picture["media-playback-start.png"]
      Endif
      'mplayer.Send(Action)
      
    Case "exit"
      mplayer.Send(Action)
      If fsform.visible Then FullScreenSwitch()
    Case "quit"
      'mplayer.Send(Action)
      ButtonStop_Click()
      If fsform.FullScreen Then FullScreenSwitch()
    Case "volume +1"
      volume_add("+2")
    Case "volume -1"
      volume_add("-2")
    Case "brightness +1"
      VideoEqualizer.slider1.value += 1
    Case "brightness -1"
      VideoEqualizer.slider1.value -= 1
    Case "contrast +1"
      VideoEqualizer.slider2.value += 1
    Case "contrast -1"
      VideoEqualizer.slider2.value -= 1
    Case "gamma +1"
      VideoEqualizer.slider3.value += 1
    Case "gamma -1"
      VideoEqualizer.slider3.value -= 1
    Case "hue +1"
      VideoEqualizer.slider4.value += 1
    Case "hue -1"
      VideoEqualizer.slider4.value -= 1
    Case "saturation +1"
      VideoEqualizer.slider5.value += 1
    Case "saturation -1"
      VideoEqualizer.slider5.value -= 1
    Case "delete current file"
      If mplayer.ProcessRunningOvr() Then
        currentfile = Replace(mplayer.getP("fullpath"), "//", "/")
        currentfile = Replace(mplayer.getP("fullpath"), "//", "/")
        currentfile = Replace(mplayer.getP("fullpath"), "//", "/")
        If Not mplayer.IsNetworkURI Then
          If MyQuestion.Ask(("Are you sure you want to delete:") & "\n" & currentfile & "\n" & ("from disc?"), ("Delete"), ("Don't delete")) = 1 Then
            If DeleteFromActiveQueue(currentfile) Then
              Play(Media_Next_path)
              global.myDebug("")
                Else
              message.Error(("Couldn't delete the file"))
            Endif
          Endif
        Endif
      Endif
    Case Like "seek *"
      n = Split(Action, " ")[1]
      mplayer.do_seek_by(n, fsform.FullScreen)
    Case "osd-level"
      'mplayer.Send(Action)
      mplayer.mpv_command(["no-osd", "cycle", "osd-level", "up"])
      Try osd_level = mplayer.get_property_mpv("osd-level")
      Select Case osd_level
        Case "0" 
          mplayer.ShowText(("OSD disabled"), 1000)
        Case "1"
          mplayer.ShowText(("OSD enabled"), 1000)
      End Select
 
    Case Else
      mplayer.Send(Action)
  End Select
  
  
  Translate_to_mpv_hotkey(Hotkey)  
End


Public Sub Translate_to_mpv_hotkey(hotkey As String)
  'look into translation grid, if something matches
  'send the correspondent shortcut to mpv
  Dim g As Gridview = hotkeys.gridtranslate
  Dim c, r As Integer
  
  c = 0
  For r = 0 To g.rows.Count - 1
    If g[r, c].text = hotkey Then      
      mplayer.mpv_command(["keypress", g[r, 1].text])
      global.myDebug("translated " & hotkey & " to " & g[r, 1].text & ", sending it to mpv")
    Endif
  Next
  
  
  
End


Public Sub fileview1Myreload()
  'refresh fileview keeping the scroll position and "current" item (full selection not possible in gambas)
  Dim achild As Object
  Dim sx, sy As Integer
  Dim current As String

  Try current = fileview1.current
  For Each achild In FileView1.Children
    If achild Is Columnview Then
      Try sx = achild.scrollx
      If Not Error Then
        Try sy = achild.scrolly
        Try achild.scrollx = sx
        If Not Error Then achild.scrolly = sy
      Endif
    Endif
  Next 'child
  fileview1.Reload()
      If fmain.fullyloaded Then Wait 'important ...but gambas crashes exactly here with null object, why?
  FileView1.Current = current
      If fmain.fullyloaded Then Wait 0.1 '...just in case ...but gambas crashes exactly here with null object, why?
      FileView1.Current = current '...just in case

End


Public Function DeleteFromActiveQueue(item As String) As Boolean
  'will delete a file from disk and update the local view
  'will return 1 in case of successfull delete, 0 otherwise.
  Try Kill item
  If Error Then Return 0 

  
 ' Stop
  If fileview1.dir = File.Dir(item) & "/" Then 
    fileview1Myreload()
      Else If fileview1.dir = File.Dir(item) Then 
        fileview1Myreload()
  Endif

  myplaylist.DeleteFromPath(item, playlistgrid)
  mylibrary.DeleteFromPath(item, librarygrid)
  
  Wait
  Select Case GetActivePlayQueue()
    Case "browse"
      BrowseSelectPrev()
      BrowseSelectNext()
    Case "playlistgrid"
      myplaylist.SelectPrev(playlistgrid)
      Wait 
      myplaylist.Selectnext(playlistgrid)
      Wait 
    Case "librarygrid"
      mylibrary.SelectPrev(librarygrid)
      Wait
      mylibrary.Selectnext(librarygrid)
      Wait
  End Select
  
  Return 1
End



Public Sub PanScanCorrect(delta As Float)
  Dim MaxRFactor As Float = 5
  Dim MinRFactor As Float = -0.9
  forcedzoomrt = ""

  ResizeFactor = Resizefactor + delta
  CorrectAreaAspect()
  realtimeform.PanscanSlider.value = resizefactor * 10000
  If ResizeFactor > MaxRFactor Then 
    resizefactor = MaxRFactor
      Else If ResizeFactor < MinRFactor Then 
    resizefactor = MinRFactor
  Endif
End
Private WasPausedOnMouseDown As Boolean = False
Public Sub VideoAreaGroup_MouseDown()
  If mplayer.ProcessRunningOvr() Then WasPausedOnMouseDown = mplayer.paused(True)
  mouseleft = mouse.left
  If FMain.mplayer.ProcessRunningOvr() Then fmain.videoboxproxy.SetFocus 'needed to get keypress events
  IgnoreMouse = False
  HotKeysHelper.MouseDown()
End

Public Sub PanelNowNextShow()
  PanelNowNextArrange()
  zzzfake.PanelNowNext.show()
End

Public Sub PanelNowNextArrange(Optional Exdended As Boolean = False)

  With zzzfake
    If .PanelNowNext.parent <> outerbox Then .PanelNowNext.Reparent(outerbox)
    .PanelNowNext.ignore = True
    .hbox1.h = .Label1.Font.TextHeight("|") + (desktop.scale * 4)
    .hbox2.h = .hbox1.h
    .hbox3.h = .hbox1.h
    .hbox1.y = .PanelNowNext.padding
    .Separator1.y = .HBox1.y + .HBox1.h
    .HBox2.y = .Separator1.y + .Separator1.h
    .HBox3.y = .HBox1.y + .HBox1.h
    .PanelNowNext.h = .hbox1.h + .hbox2.h + .hbox3.h + .Separator1.h + (.PanelNowNext.padding * 2)
    If .LabelNowInfo.visible Then .PanelNowNext.h += .LabelNowInfo.h + .LabelNextInfo.h
    .PanelNowNext.w = CInt(outerbox.w * 0.8)
    .PanelNowNext.x = (outerbox.w / 2) - (.PanelNowNext.w / 2)
    .PanelNowNext.y = -.PanelNowNext.padding
  End With

End

Public VideoAreaGroup_keypress_timer As Timer 
Private VideoAreaGroup_keypress_timer_keycode As Integer
Public Sub VideoAreaGroup_KeyPress() 
  Dim HotKey As String
  HotKeysHelper.KeyPress()
  If Not fmain.fullyloaded Then Return
  VideoAreaGroup_keypress_timer.trigger
End

Public Sub VideoAreaGroup_keypress_timer_timer()
  Dim HotKey As String
  If VideoAreaGroup_keypress_timer_keycode = -9999 Then 
    Xt7Egg.show
    Return
  Endif

  Try HotKey = HotKeysHelper.GetLastHotKey()
  If Error Then 
    Stop
    global.myDebug("GetKey failed")
    Return
  Endif
  HotKeyToMplayer(HotKey)  
End


Public Sub VideoAreaGroup_MouseUp()

  Dim HotKey As String
  Dim mx, my As Integer
  If GuiDragging Then
    guidragging = False
    Return
  Endif
  HotKeysHelper.MouseUp()
  If Not IgnoreMouse And mplayer.ProcessRunningOvr() Then
    'HotKey = HotKeyGrab.GetMouse(False)
    Hotkey = HotKeysHelper.GetLastHotKey()
    HotKeyToMplayer(HotKey)
  Endif
  
  IgnoreMouse = True
  guidragging = False
  
  'move the mouse so that a mousemove event is triggered inside the videoarea.
  'this avoids stuck mouse buttons (gambas bug)
  mx = mouse.screenx
  my = mouse.screeny
  mouse.Move(mx + 1, my) 
  mouse.Move(mx, my)
  
End

Private last_wheel As Float = 0
Private last_name As String = ""

Public Sub VideoAreaGroup_MouseWheel()
  Dim HotKey As String
  Dim tNow As Float
  
  videoboxproxy.SetFocus()
  
  ' oct, 25, 2024: system updated.
  ' For reasons I ignore, fast wheel movements
  ' can cause the flooding of events which repeats for no apparent
  ' reason. Stop Event seems to take care of that.
  Stop Event

  If global.MouseInside(fmain.BottomVbox) Then Return 'don't process events from there
  'Hacky workaround for a bug in gambas that sends multiple mousewheel events
  'when there are multiple objects in a group.
        tNow = Timer
        If ((tNow - last_wheel) < 1) Then 
          If last_name <> Last.name Then Return
        Endif
        last_wheel = tnow
        last_name = Last.name
  
  If Not mplayer.ProcessRunningOvr() Then Return
  'HotKey = HotKeyGrab.GetMouse(True)
  HotKeysHelper.MouseWheel()
  Hotkey = HotKeysHelper.GetLastHotKey()
  IgnoreMouse = True
  HotKeyToMplayer(HotKey)
End

'/HotKeys Handling *******************************************

Public Sub VideoAreaGroup_DblClick()
  Dim timenow As Float = Timer
  Dim hotkey As String
  
  If ((hotkeys.dblclick_fs_checkbox.value) Or mplayer.getP("audioonly")) Then
    If mouseleft And Not TagEditMode Then 
      If WasPausedOnMouseDown Then 
        mplayer.do_pause()
          Else
        mplayer.do_leave_pause()
      Endif
      FullScreenSwitch()
    Endif
        Else 
      'handle special case when dblclicking and not going fullscreen.
      'gambas does not generate mouseup nor mousedown events if doubleclicking
      HotKeysHelper.MouseDown()
      hotkey = HotKeysHelper.GetLastHotKey()
      HotKeyToMplayer(HotKey)
    Endif
Debug
End

Public Sub GeneralOptionsMenu_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.show
  
End


Public Sub ButtonNext_Click()
  SelectNext(False, GetActivePlayQueue())
End

Public Sub WhosNext() As String
  'hackish! 
  Dim out As String
  Dim playqueue As String
  playqueue = GetActivePlayQueue()
  If playqueue = "browse" Then
    BrowseSelectNext(True)
    out = media_next_path
    BrowseSelectprev(True)
    Return out
  Endif

  If playqueue = "playlistgrid" Then
    MyPlaylist.SelectNext(PlaylistGrid, ShufflePls.value)
    out = media_next_path
    MyPlaylist.SelectPrev(PlaylistGrid) 
    Return out
  Endif
  
  If playqueue = "librarygrid" Then
    mylibrary.SelectNext(libraryGrid, ShufflePls.value)
    out = media_next_path
    MyPlaylist.SelectPrev(librarygrid) 
    Return out
  Endif
  
  
End



Public Sub SelectNext(Optional forcerunning As Boolean = False, Optional CurrentQueue As String = "", Optional do_play As Boolean = True)
  Dim mplayerwasrunning As Boolean 
  Dim togglepls_value As Boolean = TogglePls.value
  Try mplayerwasrunning = mplayer.ProcessRunningOvr() Or forcerunning
  If mplayer.subsequent_failures > max_failures Then do_play = False
  TogglePls.value = False 'or else mykill will play the next
  
  Stopmthumbler()
  If do_play Then
    fmain.mouse = mouse.wait
    Object.Lock(fmain.SeekBar)
    fmain.SeekBar.Value = 0
    SetProgress(seekbar.value)
    SetProgressCache(0)
    Object.unLock(fmain.SeekBar)
  Endif

  If (TabSelectedPlaylist() And CurrentQueue = "") Or CurrentQueue = "playlistgrid" Then
    MyPlaylist.SelectNext(PlaylistGrid, ShufflePls.value)
    Wait 0.025
    If mplayerwasrunning Then 
      If do_play Then Play(Media_Next_path)
    Endif
  
  
  Else If (TabSelectedLibrary() And CurrentQueue = "") Or CurrentQueue = "librarygrid" Then
    MyLibrary.SelectNext(LibraryGrid, ShufflePls.value)
    Wait 0.025
    If mplayerwasrunning Then
      If do_play Then Play(Media_Next_path)
    Endif
  
  
  Else If TabSelectedDVB() And CurrentQueue = "" Then
    MyDVBTList.SelectNext(dvbtGrid, False)
    Wait 0.025
    If mplayerwasrunning Then
      If do_play Then Play(Media_Next_path)
    Endif
  

  Else If (TabSelectedBrowse() And CurrentQueue = "") Or CurrentQueue = "browse" Then
    Try BrowseSelectNext()
    Wait 0.025
    If mplayerwasrunning Then
      If do_play Then Play(Media_Next_path)
    Endif
  
  
  Else If (TabSelectedCDDA() And CurrentQueue = "") Or CurrentQueue = "cdda" Then
    CDDANext()
    Wait 0.025

  Else If (TabSelectedCHAPTERS() And CurrentQueue = "") Or CurrentQueue = "chapters" Then
    CHAPTERNEXT()
    Wait 0.025


  Else If (TabSelectedYoutube() And CurrentQueue = "") Or CurrentQueue = "youtube" Then
    If mplayerwasrunning Then mplayer.do_stop() 'needed to see infos about next youtube item while it loads up
    Youtube.Select_NextTreeItem(youtubetree)
    Wait 0.025
    If mplayerwasrunning Then 'Or (TogglePls.value) Then
      Try customtitle = youtubetree.Current.text
      global.myDebug("mpv was off so hit play from here")
      mplayer.do_stop()
      If do_play Then Play(Media_Next_path)
    Endif
  
  Else If (TabSelectedDVD() And CurrentQueue = "") Or Lower(CurrentQueue) = "dvd" Then
    DVDNEXT()
    Wait 0.025
  
  Else If TabSelectedShoutcast() And CurrentQueue = "" Then
    If NOSAVEVBox3.visible Then  'shoutcastTree
      MyRadio.Select_NextTreeItem(genresTree)
      Wait 0.025
      If mplayerwasrunning Then Play(Media_Next_path,, GenresTree.Current.text)
    Else 'gridview
      MyRadio.Select_NextGridItem(ShutResultGrid)
      Wait 0.025
      If mplayerwasrunning Then Play(Media_Next_path,, ShutResultGrid[ShutResultGrid.row, 0].text)
    Endif
  Endif
  TogglePls.value = togglepls_value
  fmain.mouse = mouse.normal
End



Private TRIESBROWSESELECTNEXT As Integer = 0
Public Sub BrowseSelectNext(Optional nowait As Boolean = False)
  Dim filelist As String[]
  Dim current As String
  Dim CurrentIndex, ToSelectIndex As Integer
  Dim nextfile As String
  Try current = fileview1.selection[0]
  fileview1.SelectAll
  filelist = fileview1.Selection
  If filelist.count = 0 Then Return
  CurrentIndex = filelist.Find(current)
  If currentindex = -1 Then Return
  If currentindex = filelist.Max Then 
    ToSelectIndex = 0
    global.isnextselected = False
      Else
        ToSelectIndex = currentindex + 1
        global.isnextselected = True
  Endif
  Try nextfile = fileview1.dir & "/" & filelist[ToSelectIndex]
  If IsDir(nextfile) Then 
    fileview1.current = filelist[ToSelectIndex]
    If (Not nowait) Then Wait
    If TRIESBROWSESELECTNEXT < 10 Then  'stack overflow prevention
      TRIESBROWSESELECTNEXT += 1
      BrowseSelectNext()
      Return
    Endif
      Else
    TRIESBROWSESELECTNEXT = 0
    Try Media_Next_path = fileview1.dir & "/" & filelist[ToSelectIndex]
    Try Media_Next_path = Replace(Media_Next_path, "//", "/")
    fileview1.current = filelist[ToSelectIndex]
    If (Not nowait) Then Wait
  Endif
End


Public Sub BrowseSelectPrev(Optional nowait As Boolean = False)
  Dim filelist As String[]
  Dim current As String
  Dim CurrentIndex, ToSelectIndex As Integer
  Try current = fileview1.selection[0]
  fileview1.SelectAll
  filelist = fileview1.Selection
  If filelist.count = 0 Then Return
  CurrentIndex = filelist.Find(current)
  If currentindex = -1 Then Return
  If currentindex = 0 Then 
    ToSelectIndex = filelist.Max
      Else 
        ToSelectIndex = currentindex - 1
  Endif

  Try Media_Next_path = fileview1.dir & "/" & filelist[ToSelectIndex]
  Try Media_Next_path = Replace(Media_Next_path, "//", "/")
  fileview1.current = filelist[ToSelectIndex]

End



Public Sub ButtonPrev_Click()
  
  Dim mplayerwasrunning As Boolean = False

  Try mplayerwasrunning = mplayer.ProcessRunningOvr()
  Stopmthumbler()
  fmain.mouse = mouse.wait
  Object.Lock(fmain.SeekBar)
  fmain.SeekBar.Value = 0
  SetProgress(seekbar.value)
  SetProgressCache(0)
  Object.unLock(fmain.SeekBar)
  If TabSelectedPlaylist() Then
    MyPlaylist.SelectPrev(PlaylistGrid) ', ShufflePls.value)
    Wait 0.025
    If mplayer.ProcessRunningOvr() Then Play(Media_Next_path)
  Else If TabSelectedLibrary() Then
    MyLibrary.SelectPrev(LibraryGrid) ', ShufflePls.value)
    Wait 0.025
    If mplayerwasrunning Then Play(Media_Next_path)
  Else If TabSelectedDVB() Then
    MyDVBTList.SelectPrev(dvbtGrid)
    Wait 0.025
    If mplayerwasrunning Then playselecteddvb()
  Else If TabSelectedCDDA() Then
    CDDAPrev()
    Wait 0.025
  Else If (TabSelectedCHAPTERS()) Then
    CHAPTERPREV()
    Wait 0.025

  Else If TabSelectedDVD() Then
    DVDPREV()
  Else If TabSelectedBrowse() Then
    Try BrowseSelectPrev()
    If mplayerwasrunning Then Play(Media_Next_path)
  Else If TabSelectedYoutube() Then
    If mplayerwasrunning Then mplayer.do_stop() 'needed to see infos about next youtube item while it loads up
    Youtube.Select_PrevTreeItem(youtubetree)
    Wait 0.025
    If mplayerwasrunning Then 
      Try customtitle = youtubetree.Current.text
      global.myDebug("mpv was off so hit play from here")
      Play(Media_Next_path)
    Endif
  Else If TabSelectedShoutcast() Then
    If NOSAVEVBox3.visible Then  'shoutcastTree
      MyRadio.Select_PrevTreeItem(genresTree)
      Wait 0.025
      If mplayerwasrunning Then Play(Media_Next_path,, GenresTree.Current.text)
    Else 'gridview
      MyRadio.Select_PrevGridItem(ShutResultGrid)
      Wait 0.025
      If mplayerwasrunning Then Play(Media_Next_path,, ShutResultGrid[ShutResultGrid.row, 0].text)
    Endif
  Endif
  fmain.mouse = mouse.normal

End

'-----------------------------------
Private Sub GridKeyRelease(LibraryGrid As GridView, MyLibrary As PlaylistClass)
  
  Dim PrevScrollX, PrevScrollY As Integer
  
  If Key.code = Key.delete Then
    PrevScrollX = LibraryGrid.scrollx
    PrevScrollY = LibraryGrid.scrollY
    LibraryGrid.visible = False
    
    MyLibrary.DeleteSelected(LibraryGrid)
    
    LibraryGrid.scrollx = PrevScrollX
    LibraryGrid.scrollY = PrevScrollY
    LibraryGrid.visible = True
    LibraryGrid.SetFocus
  Endif
  
End

' Public Sub DvbTGridToChanFile()
'   Dim channelconf As String[]
'   Dim i, j As Integer
'   Dim fullpath, name As String
'   'will:
'   '1- Save the grid
'   '2- find fullpath items in chanfile and rename them according to the grid
'   '3- delete any channel not found
'   '4- update the epg form (or close it and mark as not updated
'   
'   
'   '1- save dvbtgrid:
'   fmain.MyDVBTList.Save(Fmain.dvbtgrid, global.confpath)
'   
'   '2- find fullpath items in chanfile and rename them according to the grid
' 'metti channels.conf in una stringa[]
' 
' '
' 'per ogni fullpath (dvb://xxx) nella griglia:
' 'se il corrispondente nome è diverso, allora:
' '   cerca il canale in channels.conf e rinominalo in quello che hai trovato nella colonna nome
' '   rinomina pure il fullpath
' 
' 
'   channelconf = Split(file.Load(DVBTuner.mplayerchannelsfile), "\n",, True)
'   For i = 0 To dvbtgrid.Rows.count - 1
'     fullpath = MyDVBTList.CellValue(dvbtgrid, i, MyDVBTList.ColumnIndex["Full Path"])
'     name = MyDVBTList.CellValue(dvbtgrid, i, MyDVBTList.ColumnIndex["Filename"])
'     If Replace(fullpath, "dvb://", "") <> fullpath Then
'       For j = 0 To channelconf.max
'         If Split(channelconf[j], ":", "", False)[0] = Replace(fullpath, "dvb://", "") Then
'           channelconf[i] = Replace(channelconf[i], Split(channelconf[j], ":", "", False)[0], name)
'           Break
'         Endif
'       Next 'j
'       If j <= channelconf.max Then
'         
'       Endif
'     Endif
'   Next
' 
' 
' '3- delete any channel not found
' 'per ogni nome canale trovato In channels.conf
' 'se non lo trovi nella colonna griglia di fullpath
' 'rimuovi la linea dal channels.conf
' 
' 
' 
' 
' 
' '   salva channels.conf
' 
' End

Public Sub dvbtgrid_Keypress()

  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    playselecteddvb()
    Return
  Endif
  If Key.code = Key.delete Then
    If (MyQuestion.Ask(("Delete Selected channel(s)?"), ("Delete"), ("Don't delete")) = 1) Then
      MyDVBTList.DeleteSelected(DVBTGrid)
    Endif
  Endif
  DVBTGrid_select()

End

Public Sub PlayListGrid_Keypress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    Play(PlayListGrid[Playlistgrid.row, MyPlayList.Columnindex["Full Path"]].text)
    Return
  Endif
  GridKeyRelease(PlayListGrid, MyPlaylist)
  Playlistgrid_Select()
  
End

Public Sub Librarygrid_Keypress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    Play(librarygrid[librarygrid.row, mylibrary.Columnindex["Full Path"]].text)
    Return
  Endif
  GridKeyRelease(librarygrid, mylibrary)
  librarygrid_Select()

End


Public Sub PlayListGrid_DblClick()

  Dim SelectedPath As String
  Dim myradiolabel As String

  Try customtitle = PlayListGrid[PlayListGrid.row, myplaylist.ColumnIndex["Filename"]].text
  Last.mouse = mouse.wait
  Try SelectedPath = PlaylistGrid[Playlistgrid.row, MyPlaylist.Columnindex["Full Path"]].text
  If (Not Error) Then
    MyLibrary.AlreadyPlayedString.Push(SelectedPath)
  Endif
  If MouseInsideGrid(PlayListGrid) Then
    If global.IsPlaylist(selectedpath) Then myradiolabel = PlaylistGrid[Playlistgrid.row, MyPlaylist.Columnindex["Filename"]].text
    SetActivePlayQueue("playlistgrid")
    Try Play(SelectedPath,, myradiolabel)
  Endif
  playlistgrid.mouse = mouse.Default

End

Public Sub LibraryGrid_DblClick()
  
  Dim SelectedPath As String
  Dim myradiolabel As String

  Try customtitle = librarygrid[librarygrid.row, myplaylist.ColumnIndex["Filename"]].text
  Last.mouse = mouse.wait
  Try SelectedPath = LibraryGrid[LibraryGrid.row, MyLibrary.Columnindex["Full Path"]].text
  If (Not Error) Then
    MyLibrary.AlreadyPlayedString.Push(SelectedPath)
  Endif
  If MouseInsideGrid(Librarygrid) Then
    If global.IsPlaylist(selectedpath) Then myradiolabel = LibraryGrid[librarygrid.row, MyLibrary.Columnindex["Filename"]].text
    SetActivePlayQueue("librarygrid")
'findme tolto il try
    Play(SelectedPath,, myradiolabel)
  Endif
  Try Last.mouse = mouse.Default
  
End

Public Sub ButtonNowNext_Click()

  If zzzfake.PanelNowNext.visible Then 
    zzzfake.PanelNowNext.hide
    TimerUpdateNowNext.Stop
  Else
    UpdateNowNextInfo()
    PanelNowNextShow()
    TimerUpdateNowNext.Start
  Endif

End

Private Function Usedvb_set_channel() As Boolean

  Dim Userpreference As String = ""
  Try Userpreference = generaloptions.ComboboxFastZapping.Text
  If Error Then Return False
  If Not mplayer.ProcessRunningOvr() Then Return False
  If Not (Lower(mplayer.getP("fullpath")) Like "dvb://*") Then Return False
  
  If Userpreference Like "*0*" Then Return False 'never use
  If Userpreference Like "*2*" Then Return True 'always use
  
  If Userpreference Like "*1*" Then 'let xt7 choose
    Return Not (mplayer.AudioSwitched)
  Endif
  
  Return False 'the default,safer, choice.

End

Public Sub PlaySelectedDvb(Optional channel As String = ":::")
  
  Dim SelectedPath As String

  'start from a blank panel
  zzzfake.LabelNowName.text = ("Not available")
  zzzfake.LabelNextName.text = ("Not available")
  zzzfake.LabelNextStart.text = ""
  zzzfake.LabelNextStart.visible = False
  zzzfake.VBox4.visible = False
  
  'start epg in background
  If Not epgform.initdone Then 
    epgform.Init()
  Else
    epgform.StopScan()
  Endif
  epgform.dvbsnoop.Stopit()
  epgform.dvbsnoop.Startit()
  
  Last.mouse = mouse.wait
  If channel = ":::" Then 
    Try SelectedPath = dvbtGrid[dvbtGrid.row, MyDVBTList.Columnindex["Full Path"]].text
  Else
    selectedpath = "dvb://" & channel
  Endif
  
  'Here we will reuse the same mplayer instance if at least one of this conditions are met:
  '1) User has never switched audio
  '2) User explicitely want to try fast zapping
  If Usedvb_set_channel() Then
    mplayer.dvb_set_channel(Replace(Lower(SelectedPath), "dvb://", ""), CInt(generaloptions.spinboxcard.value) - 1) 'fixmempv is stub
    'simulate a dry run:
    FillStreamsMenu()
    CorrectAreaAspect()
    FillPropertiesGrid()
    LogWindow.ShowLogs()
    Last.mouse = mouse.Default
    Goto ReturnLabel
  Endif
  Try Play(SelectedPath)
  
  Try Last.mouse = mouse.Default
  Goto ReturnLabel
  
  Return
ReturnLabel:
  
End

Public Sub dvbtGrid_DblClick()
  
  playselecteddvb()
  
End

Private Function MouseInsideGrid(Librarygrid As Gridview) As Boolean
  
  With LibraryGrid
    If (Mouse.screeny > .screeny + .Columns.Height + 1) And (Mouse.screeny < .screeny + .clientH + .Columns.Height + 1) Then
      If (Mouse.screenX < .screenx + .ClientW) Then
        Return True
      Endif
    Endif
  End With
  Return False
  
End
'-----------------------------------

Public Sub RefreshVisibleRows(mygrid As Gridview, mylibrary As Playlistclass)
  
  Dim R, FirstR, LastR As Integer
  Dim FirstC, LastC As Integer
  
  If fmain.closing Then Return
  If MyGrid.Rows.count <= 0 Then Return
  'FirstR = MyGrid.RowAt(MyGrid.y)
  'LastR = MyGrid.RowAt(MyGrid.h)
  FirstR = global.MyRowAt(mygrid, MyGrid.y)
  LastR = global.MyRowAt(mygrid, MyGrid.h)
  If LastR = -1 Then LastR = Mygrid.rows.count - 1
  If firstR = -1 Then firstR = 0
  
  FirstC = 0
  LastC = MyGrid.Columns.Count - 1
  
  For R = FirstR To LastR
    Gridviews_Data(mygrid, mylibrary, R, 0)
  Next 'R
  
End

Public Sub RefreshVisibleCovers(mygrid As Gridview)
  
  Dim FirstR, LastR As Integer
  Dim FirstC, LastC As Integer
  
  If fmain.closing Then Return
  If MyGrid.Rows.count <= 0 Then Return
  'FirstR = MyGrid.RowAt(MyGrid.y)
  'LastR = MyGrid.RowAt(MyGrid.h)
  FirstR = Global.MyRowAt(mygrid, MyGrid.y)
  LastR = Global.MyRowAt(mygrid, MyGrid.h)
  If LastR = -1 Then LastR = Mygrid.rows.count - 1
  If firstR = -1 Then firstR = 0
  
  FirstC = 0
  LastC = MyGrid.Columns.Count - 1
  
  global.myDebug("Doing from " & FirstR & " - to " & LastR)
  If Lower(mygrid.name) = "playlistgrid" Then
    Try PlaylistGrid.refresh
  Else
    Try libraryGrid.refresh
  Endif
  
End

Public Sub UpdateSearchResults(MyLibrary As PlaylistClass, LibraryGrid As Gridview, Optional autosize As Boolean = True, searchterm As String)
  'some gtk component problem here

  Dim crow As Integer
  HideGrid(LibraryGrid)
  If (Not fmain.fullyloaded) Then
    If Not (librarygrid.tag = "FORCEUPDATE") Then Return
  Endif
  LibraryGrid.clear
  MyLibrary.Search(LibraryGrid, Searchterm)
  If autosize Then
    MyLibrary.AutoSizeColumns(LibraryGrid)
    ' [GB2:FNTH] LibraryGrid.Rows.h = LibraryGrid.Font.Textheight("^_") + global.rowpadding
    'LibraryGrid.Rows.h = LibraryGrid.Font.TextHeight("^_") + global.rowpadding
  Endif
   If fmain.fullyloaded Then 
    ShowGrid(LibraryGrid)
    'Wait
    If mplayer.ProcessRunningOvr() Then
      'Wait
      crow = mylibrary.FindRowByPath(librarygrid, mplayer.getP("fullpath"))
      If crow <> -1 Then
        librarygrid.MoveTo(crow, 0)
        librarygrid.Rows[crow].selected = True
        librarygrid[crow, 0].EnsureVisible()
      Endif
    Endif
    Select Case Lower(librarygrid.name)
      Case "librarygrid"
        LibrarySelInfo.visible = False
      Case "playlistgrid"
        CalcTotalLengthInfoOn(myplaylist, playlistgrid, PlayListSelInfo)
    End Select
  Endif

End

Public Sub searchfield_change()
  Dim previous_search As String
  previous_search = Searchfield.text
  Wait 0.5
  If previous_search = Searchfield.text Then
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
  Else
    Return
  Endif
  MenuLibraryZapSelected.enabled = (LibraryGrid.row > 0)
End



  Public Sub SearchFieldPLS_change()
  Dim previous_search As String
  previous_search = Searchfieldpls.text
  Wait 0.5
  If previous_search = Searchfieldpls.text Then
    UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  Else
    Return
  Endif
  MenuPlaylistZapSelected.enabled = (PlaylistGrid.row > 0)
End

Public Sub SearchField_Activate()

  Try customtitle = librarygrid[librarygrid.row, myplaylist.ColumnIndex["Filename"]].text
  If Error Then Return
  Try Play(LibraryGrid[Librarygrid.row, MyLibrary.Columnindex["Full Path"]].text)
  If Error Then Return
  SetActivePlayQueue("librarygrid")
  ComboHistory.AddHistory(Searchfield, Searchfield.text)

End

Public Sub SearchFieldPLS_Activate()

  Try customtitle = PlayListGrid[PlayListGrid.row, myplaylist.ColumnIndex["Filename"]].text
  If Error Then Return
  Try Play(PlayListGrid[Playlistgrid.row, MyPlayList.Columnindex["Full Path"]].text)
  If Error Then Return
  SetActivePlayQueue("playlistgrid")
  ComboHistory.AddHistory(SearchfieldPLS, SearchfieldPLS.text)

End

Public Sub SearchField_Click()

  UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
  MenuLibraryZapSelected.enabled = (LibraryGrid.row > 0)

End

Public Sub SearchFieldPLS_Click()

  UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  MenuPlaylistZapSelected.enabled = (PlaylistGrid.row > 0)

End

'-----------------------------------
Public Sub LibraryGrid_ColumnClick(Column As Integer)

  ColumnClick(LibraryGrid, Mylibrary, column, Searchfield.text)

End

Public Sub PlaylistGrid_ColumnClick(Column As Integer)

  ColumnClick(PlayListGrid, MyPlaylist, column, SearchfieldPLS.text)

End

Public Sub dvbtGrid_ColumnClick(Column As Integer)
  
  ColumnClick(Dvbtgrid, MyDVBTList, column, SearchFieldDVB.text)
  
End

Public Sub ColumnClick(Grid As GridView, pls As PlaylistClass, column As Integer, search As String)

  Dim ClickedColumn As String = Grid.Columns[column].text
  Dim PrevScrollX As Integer = Grid.scrollX

  Grid.mouse = mouse.Wait
  pls.DoSort(ClickedColumn, pls.searchtable)
  pls.AutoSizeColumns(grid)
  grid.scrollX = PrevScrollX
  grid.mouse = mouse.Default
  
  If column = 0 Then Try Object.SetProperty(grid, "sorted", False) 
  If ((column <> 0) And Not (Object.GetProperty(grid, "sorted"))) Then
    Try Object.SetProperty(grid, "sorted", True) 'use setproperty to make it compile with gb 3.0 too
  Endif

End
'-----------------------------------

Private Hsplit1ResizeDelayed As New Timer

Public Sub Hsplit1ResizeDelayed_timer()
  
  If Not fsform.fullscreen Then Hsplit1_MyRefresh
End

Public Sub Hsplit1_MyRefresh()

  Dim RightPanel As Integer = 0

  CostrainFormSizes()

  If mplayer.ProcessRunningOvr() Then 
    If (Not mplayer.getP("audioonly")) Then CorrectAreaAspect()  
    UpdateStatusBar(CUSTOMTITLE_OLD, CTIME_OLD, CACHEVALUE_OLD)
    UpdateSeekSlider()
    Update_cache_percent(mplayer.get_property_mpv("demuxer-cache-duration", True, 1, True))
  Endif

  Try RightPanel = HSplit1.layout[1]
  If RightPanel < 10 Then
    OuterBox.Background = Me.Background
    toolbarbackground.hide
    VideoBox.visible = False
    audioform.AudioPanel.visible = False
    rightsidepanel.Background = Color.default 'Background
  Else
    If Not TagEditMode Then
      OuterBox.Background = Color.black
      rightsidepanel.Background = Color.background
    Endif
    If Not VideoBox.visible Then videobox.show
    rightsidepanel.visible = True
    audioform.AudioPanel.visible = True
    toolbarbackground.show
  Endif
  YouVideoInfo.w = scrollviewyt.w - 64
  If TabSelectedAlbums() Then 
    Try MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
  Endif

  If zzzFake.PanelNowNext.visible Then 
    Wait
    PanelNowNextArrange()
  Endif

  If audioform.AudioPanel.Parent = outerbox Then 
    audioform.AutoresizeAudioForm()
  Endif



End

Public Sub LibraryGrid_Menu()
  Dim onlyoneselected As Boolean = False
  Dim selectedalbum As String = ""

  MenuLibraryZapSelected.Enabled = (LibraryGrid.row >= 0) 'popup removefromdisc menu item only of something is selected
  MenuOpenContainingFolderPopUp.visible = True
  MenuSortLibraryPopup.enabled = True
  MenuSortLibraryPopup.visible = True

  onlyoneselected = MyLibrary.OnlyOneSelected(librarygrid)
  MenuOpenContainingFolderPopUp.visible = onlyoneselected

  MenuLibrarySearchAlbum.Visible = False
  If onlyoneselected Then
      selectedalbum = mylibrary.CellValue(librarygrid, librarygrid.row, mylibrary.ColumnIndex["Album"])
      If Trim(selectedalbum) <> "" Then
        MenuLibrarySearchAlbum.visible = True
        MenuLibrarySearchAlbum.text = selectedalbum
        MenuLibrarySearchAlbum.picture = librarygrid.Current.Picture
      Endif
  Endif
  Menupopuplibrary.Popup
End

Private Sub CurrentLibraryItemToLibrary(myappend As Boolean)
  Dim selectedalbum As String 
  selectedalbum = mylibrary.CellValue(librarygrid, librarygrid.row, mylibrary.ColumnIndex["Album"])
  If myappend Then 
    Searchfield.text &= "|" & selectedalbum
      Else
    Searchfield.text = selectedalbum
  Endif
  SearchField_Click()
End


Public Sub MenuLibraryAlbumTracksAppendLibrary_Click()
  Try CurrentLibraryItemToLibrary(True)
  If Error Then Message.Error("An error occurred")
End

Public Sub MenuLibraryAlbumTracksReplaceLibrary_Click()
 Try CurrentLibraryItemToLibrary(False)
 If Error Then Message.Error("An error occurred")
End


Public Sub MenuLibraryAlbumTracksAppendPlaylist_Click()
  Dim selectedalbum As String = mylibrary.CellValue(librarygrid, librarygrid.row, mylibrary.ColumnIndex["Album"])
  Dim results As String[]
  
  Try results = mylibrary.PtableFromSearch(selectedalbum, ["Album"])
  If Error Then Goto ErrorLabel
  Try myplaylist.DoSort("Track", ByRef results)
  If Error Then Goto ErrorLabel
  Try myplaylist.ptable = myplaylist.ptable.Insert(results, True)
  If Error Then Goto ErrorLabel
  
  Searchfieldpls.text &= "|" & selectedalbum
  SearchFieldPLS_Click()
  Return

  ErrorLabel:
  Message.Error("An error occurred")
End

Public Sub MenuLibraryAlbumTracksReplacePlaylist_click()



  Try myplaylist.clear(playlistgrid)
  If Error Then Goto ErrorLabel
  
  Try MenuLibraryAlbumTracksAppendPlaylist_Click()
  If Error Then Goto ErrorLabel
  ' 
  ' 
  ' Dim selectedalbum As String = mylibrary.CellValue(librarygrid, librarygrid.row, mylibrary.ColumnIndex["Album"])
  ' Dim results As String[]
  ' Stop
  ' Try results = mylibrary.PtableFromSearch(selectedalbum, ["Album"])
  ' If Error Then Goto ErrorLabel
  ' Try myplaylist.DoSort("Album", ByRef results)
  ' If Error Then Goto ErrorLabel
  ' Try myplaylist.ptable = myplaylist.ptable.Insert(results, True)
  ' If Error Then Goto ErrorLabel
  ' 
  ' Searchfieldpls.text = selectedalbum
  ' SearchFieldPLS_Click()
  ' Return
  
  Return
  ErrorLabel:
  Message.Error("An error occurred")
End




Public Sub MenuOpenContainingFolderPopUp_Click()
  
  Dim item As String
  
  Try item = librarygrid[librarygrid.row, Mylibrary.ColumnIndex["Full Path"]].text
  If Error Then Return
  desktop.open(File.Dir(item))
  MenuOpenContainingFolderPopUp.visible = False

End

Public Sub MenuplaylistOpenFolder_Click()
  
  Dim item As String
  
  Try item = playlistgrid[playlistgrid.row, Myplaylist.ColumnIndex["Full Path"]].text
  If Error Then Return
  desktop.open(File.Dir(item))
  MenuplaylistOpenFolder.visible = False
  
End

Public Sub Playlistgrid_Menu()

  MenuplaylistOpenFolder.visible = True
  MenuplaylistOpenFolder.enabled = MyPlaylist.OnlyOneSelected(playlistgrid)
  MenuPlaylistZapSelected.Enabled = (PlaylistGrid.row >= 0) 'popup removefromdisc menu item only of something is selected
  MenuPlaylist.popup

End

Public Sub CleanVideoThumbs()
  
  Dim videofilter, videofile As String
  Dim videofiles As String[]
  Dim coverfile As String
  
  Dim safeplace As String

  safeplace = global.confpath & "/coverstmp"
  Try Mkdir safeplace
  'get a list of video files:
  videofilter = global.videofilter & global.UncommonVideoFilters & Upper(global.videofilter) & Upper(global.UncommonVideoFilters)
  videofilter = Replace(videofilter, "*", "")
  videofilter = Replace(videofilter, ";", ",")
  videofilter = Replace(videofilter, ",,", ",")
  videofilter = "*{" & videofilter & "}"
  videofiles = mylibrary.GetFullPaths(videofilter).Insert(myplaylist.GetFullPaths(videofilter))
  'generate coverfiles name and move them into a safe place
  For Each videofile In videofiles
    coverfile = (covermanager.Coverfile("", "", videofile))
    If Exist(coverfile, True) Then Shell "mv  '" & coverfile & "' " & safeplace & "/ &>/dev/null" Wait
  Next
  'remove all of the thumbnails
  Shell "rm " & global.confpath & "/covers/" & videofilter & ".jpg* &>/dev/null" Wait 
  'move the existing ones back
  Shell "mv " & safeplace & "/* " & global.confpath & "/covers/ " Wait
  'clean up
  Shell "rm -R " & safeplace
End

Public Sub MenuLibraryUpdate_popup_Click()
  
  MenuLibraryUpdate_Click()
  
End

Public Sub MenuLibraryUpdate_Click()
  
  Dim removedfiles As String[]
  Dim Watcheddirs As String = ""
  Dim ExcludedDirs As String = ""
  Dim i, j, AnswerRemove As Integer
  
  If Not global.LSyncing Then
    'show the progressbar and disable library:
    Leftsidetabs[0].visible = True
    Leftsidetabs.Index = 0
    fmain.WaitPanel.visible = True
    MyLibraryProgressBar.value = 0
    MyLibraryProgressBar.visible = True
    MyLibraryProgressBar.h = 32
    playlistgrid.Enabled = False
    LibraryGrid.Enabled = False
    Librarygrid.visible = False
    Panel2.visible = False
    
    Searchfield.Enabled = False
    Application.busy = True
    global.LSyncing = True
    fmain.WaitPanel.text = Global.LSyncingMessage
    fmain.mouse = mouse.Wait
    GeneralOptions.NOPARSEVBox2.mouse = Mouse.Wait
    GeneralOptions.NOPARSEVBox2.enabled = False
    Wait 0.1
    FMain.MenuLibraryUpdate_Click()
    global.myDebug("Started at: " & Time)
    'ask user if he wants to delete non existend files

    AnswerRemove = MyQuestion.Ask(("Do you also want to remove non existent files from library?"), ("Remove"), ("Don't remove"))
    If AnswerRemove = 1 Then
      'remove non existing files
      removedfiles = MyLibrary.RemoveNonExisting()
      global.myDebug("Removing old video thumbnails")
      CleanVideoThumbs()
      global.myDebug("Done")
    Endif
    
    For i = 0 To GeneralOptions.NoParseWatchedListbox.count - 1
      WatchedDirs = Watcheddirs & GeneralOptions.NoParseWatchedListbox[i].text & "\n"
    Next 'i
    
    For i = 0 To GeneralOptions.NoParseExcludedListbox.count - 1
      'check if excludeddir is matched by included one, we need this to calculate total files number for progressbar...
      For j = 0 To GeneralOptions.NoParseWatchedListbox.count - 1
        If (GeneralOptions.NoParseExcludedListbox[i].text) Like (GeneralOptions.NoParseWatchedListbox[j].text & "/*") Then
          ExcludedDirs = ExcludedDirs & GeneralOptions.NoParseExcludedListbox[i].text & "\n"
          Break
        Endif
      Next 'j
      
    Next 'i
    MyLibrary.FilesToProcess = Global.GetTotalFiles(WatchedDirs, False) - Global.GetTotalFiles(ExcludedDirs, False)
    MyLibraryProgressBar.value = 0 '(it will be updated by MyLibrary.add())
    
    'add every file found in watchedDirs
    For i = 0 To GeneralOptions.NoParseWatchedListbox.count - 1
      MyLibrary.SyncSortedTable() '<-necessary for MyLibrary.isdupe() function
      Try MyLibrary.AddDir(LibraryGrid, GeneralOptions.NoParseWatchedListbox[i].text, GeneralOptions.NoParseExcludedListbox)
    Next 'i
    
    MyLibrary.SyncSortedTable() '<-necessary for MyLibrary.isdupe() function
    
    'reset the progressbar
    MyLibraryProgressBar.h = 0
    MyLibraryProgressBar.visible = False
    MyLibrary.FilesToProcess = 0
    MyLibrary.FilesProcessed = 0
    MyLibraryProgressBar.value = 0
    playlistgrid.Enabled = True
    LibraryGrid.Enabled = True
    LibraryGrid.visible = True
    Panel2.visible = True
    fmain.WaitPanel.visible = False
    Searchfield.Enabled = True
    fmain.Mouse = mouse.Default
    
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
    global.LSyncing = False
    GeneralOptions.NOPARSEVBox2.mouse = Mouse.Default
    GeneralOptions.NOPARSEVBox2.enabled = True
    
    Try MyAlbumsLib.Init(mylibrary, AlbumGridView, searchfieldalbums.text)
    If Error Then global.myDebug("Error while initializing albums view")
    Try MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
    If Error Then global.myDebug("Error while Arranging albums view")
    global.myDebug("Ended at: " & Time)
  Endif
  fmain.MyLibrary.Save(fmain.LibraryGrid, global.confpath)
End

Public Sub MenuLibraryWatch_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.show
  GeneralOptions.TabStrip1.index = Global.TabIndexByName(("Library"), GeneralOptions.TabStrip1)
  
End

Public Sub SearchLabel_DblClick()
  
  Searchfields.show
  
End

Public Sub MenuItemsUpdate_Click()
  global.myDebug("start at " & Time)
  If LibraryGrid.Rows.count > 0 Then
    MyLibrary.UpdateSelected(LibraryGrid)
    'UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
  Endif
  global.myDebug("end at " & Time)
End

Public Sub MenuItemsUpdatePls_Click()

  If PlaylistGrid.Rows.count > 0 Then
    MyPlaylist.UpdateSelected(PlaylistGrid)
    'SearchFieldPLS_Click()
  Endif

End

Public Sub CopyRow(SourceList As PlaylistClass, SourceRow As Integer, DestList As PlaylistClass)
  'Append SearchTable row from sourcelist into Ptable DestList

  DestList.Ptable.add(SourceList.SearchTable[SourceRow])
  
End

Private Sub FromLibraryToPlaylist()

  Dim r As Integer
  For r = 0 To LibraryGrid.Rows.count - 1
    If LibraryGrid.Rows[r].Selected Then CopyRow(MyLibrary, r, MyPlaylist)
    Wait
  Next 'r
  UpdateSearchResults(MyPlaylist, PlaylistGrid, fmain.FullyLoaded, SearchfieldPLS.text)

End

Public Sub MenuLibraryAddToPlaylist_Click()
  
  FromLibraryToPlaylist()
  
End

'-----------------------------------

Public Sub CalcTotalLengthInfoOn(MyLibrary As Playlistclass, Playlistgrid As Gridview, InfoWidget As Label)
  
  Dim Answer As String[]
  Dim pretext, PostText As String
  
  answer = Split(MyLibrary.GetSelectedAndLength(Playlistgrid), ";")
  PreText = ("Selected: ") & answer[0] & "/" & answer[1]
  PostText = "[" & answer[2] & "] / [" & answer[3] & "]"
  InfoWidget.text = PreText & "  -  " & PostText
  
End

Public Sub LibraryGrid_Select()
  
  TimerCalcTotalLengthLib = New Timer As "TimerCalcTotalLengthLib"
  TimerCalcTotalLengthLib.delay = 100
  TimerCalcTotalLengthLib.stop
  TimerCalcTotalLengthLib.start
  
  Try Media_Next_path = LibraryGrid[LibraryGrid.row, MyLibrary.Columnindex["Full Path"]].text
  Try filetaglabel.text = MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Full Path")
  
  If Error Then Return
  tagbox1.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Album"))
  tagbox2.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Artist"))
  tagbox3.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Title"))
  tagbox4.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Year"))
  tagbox5.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Genre"))
  tagbox6.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Track"))
  tagbox7.text = Trim(MyLibrary.GetValue(MyLibrary.SearchTable[librarygrid.row], "Comment"))

End

Public TimerCalcTotalLengthLib As Timer 

Public Sub TimerCalcTotalLengthLib_Timer()

  Dim howmany As Integer
  HowMany = MyLibrary.HowManySelected(librarygrid)
  If howmany > 1 Then
    LibrarySelInfo.visible = True
    CalcTotalLengthInfoOn(Mylibrary, Librarygrid, LibrarySelInfo)
    Media_Next_path = LibraryGrid[LibraryGrid.row, MyLibrary.Columnindex["Full Path"]].text
  Else
    LibrarySelInfo.visible = False
  Endif
  TimerCalcTotalLengthLib.stop

End

Public TimerCalcTotalLengthPls As Timer 

Public Sub TimerCalcTotalLengthPls_Timer()

  PlayListSelInfobox.visible = True
  CalcTotalLengthInfoOn(myplaylist, playlistgrid, PlayListSelInfo)
  Try Media_Next_path = playlistgrid[playlistgrid.row, myplaylist.Columnindex["Full Path"]].text
  TimerCalcTotalLengthPls.stop

End

Private movingitems As Boolean = False

Public Sub PlayListGrid_Select()

  If Not fmain.fullyloaded Then Return
  If Movingitems Then Return 'spare cpu cycles when changing playlist items order
  
  TimerCalcTotalLengthPls = New Timer As "TimerCalcTotalLengthPls"
  TimerCalcTotalLengthPls.delay = 100
  TimerCalcTotalLengthPls.stop
  TimerCalcTotalLengthPls.start
  
  Try Media_Next_path = PlaylistGrid[PlaylistGrid.row, MyPlaylist.Columnindex["Full Path"]].text
  Try filetaglabel.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Full Path")
  
  If Error Then Return
  tagbox1.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Album")
  tagbox2.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Artist")
  tagbox3.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Title")
  tagbox4.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Year")
  tagbox5.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Genre")
  tagbox6.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Track")
  tagbox7.text = myplaylist.GetValue(myplaylist.SearchTable[playlistgrid.row], "Comment")
  
End

Public Sub dvbtgrid_Select()
  
  Try Media_Next_path = dvbtgrid[dvbtgrid.row, MyDVBTList.Columnindex["Full Path"]].text
  Try filetaglabel.text = MyDVBTList.GetValue(MyDVBTList.SearchTable[dvbtgrid.row], "Full Path")
  If Error Then Return
  
End

Public Sub MenuSearch_Click()
  
  Searchfields.show
  
End

Public Sub UpdateTabs()

  'force a select to handle the correct item to tag
  If audioform.tag <> "visible" Then Timer_mediainfo.stop()
  If TabSelectedLibrary() Then
    LibraryGrid_Select()
  Else If TabSelectedPlaylist() Then
    PlaylistGrid_Select()
  Else If TabSelectedShoutcast() Then
    If fullyloaded Then ShoutCast_Select()
  ' Else If TabSelectedyoutube() Then
  '   If fullyloaded Then Youtube_Select()
  Else If TabSelectedAlbums() Then
    If fullyloaded Then Albums_Select()
   Else If TabSelectedMediaInfo() Then
      Timer_mediainfo_Timer()
      Timer_mediainfo.Start()
  Endif
  
  HBox2.visible = (TabSelectedLibrary() Or TabSelectedPlaylist() Or tabselectedcdda() Or TabSelectedBrowse() Or TabselectedAlbums())
  SearchLabel.enabled = Not (tabselectedcdda() Or tabselectedbrowse())
  Searchfield.enabled = SearchLabel.enabled
  SearchfieldPLS.enabled = SearchLabel.enabled
  shufflepls.enabled = SearchLabel.enabled

End

Public Sub Leftsidetabs_MouseWheel()
  
  UpdateTabs()
  
End

Public Sub EnableDisableTagBtn()

  Dim tablib, tabpls, tabalbum As Boolean
  tablib = TabSelectedLibrary()
  tabpls = TabSelectedPlaylist() 'Or TabSelectedBrowse()
  tabalbum = TabSelectedAlbums()
  
  UpdateTabs()
  If TabSelectedyoutube() Then 
    If TogglePls.parent <> hbox13 Then TogglePls.Reparent(hbox13)
  Else 
    If TogglePls.parent <> hbox2 Then TogglePls.Reparent(hbox2)
  Endif
  
  If fmain.fullyloaded Then 
    TagEditorBtn.enabled = TabLib Or TabPls
  Endif
  
  Searchfield.Visible = tablib
  SearchfieldPLS.Visible = tabpls
  searchfieldalbums.visible = tabalbum
  
  If Not (tabpls Or tablib) Then
    If EditTagModeSwitch1.Checked Then TagEditorBtn_click()
  Endif 
  
End

Public Sub LeftSideTabs_Click()
  EnableDisableTagBtn()
  resizerows(librarygrid)
  resizerows(playlistgrid)
  resizerows(dvbtgrid)
  If TabSelectedAlbums() Then
    If fullyloaded Then 
      Wait
      MyAlbumsLib.Init(mylibrary, AlbumGridView, SearchFieldAlbums.text)
      MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
    Endif
      Return
  Endif

  If tabselectedbrowse() Then
    Wait 
    gridpanels_arrange()
  Endif

End

Public Sub LeftSideTabs_KeyRelease()

  UpdateTabs()

End

Public Sub MenuAddUri_Click()
  AddUriForm.show
End

Public Sub MenuOpenUri_Click()
  
  AddUriForm.show
  
End

'---Playlist Cut/copy/paste/delete-------------------------------

Private ClipboardRows As New String[]

Public Sub MoveUpPlsBTN_MouseWheel()
  
  If mouse.Delta > 0 Then
    MoveUpPlsBTN_Click()
  Else
    MoveDownPlsBTN_Click()
  Endif
  
End

Public Sub MoveDownPlsBTN_MouseWheel()
  
  If mouse.Delta > 0 Then
    MoveUpPlsBTN_Click()
  Else
    MoveDownPlsBTN_Click()
  Endif
  
End

Public Sub MoveUpPlsBTN_Click()
  
  Dim howmanyselected As Integer
  Dim i, j As Integer = 0
  
  MovingItems = True
  'find the index of the first selected row:
  While Not (playlistgrid.Rows[i].Selected Or i = playlistgrid.Rows.count)
    i = i + 1
  Wend
  
  If i > 0 Then
    MovingItems = True
    CutSelectedRows()
    howmanyselected = ClipboardRows.Count
    playlistgrid.scrolly = playlistgrid.scrolly - playlistgrid.Rows.H
    PasteSelectedRows(i - 1)
    
    'SELECT the items again:
    playlistgrid.UnSelectAll()
    For j = (i - 1) To (i + HowManySelected - 2)
      playlistgrid.Rows[j].selected = True
    Next 'j
  Endif
  Wait 0.2
  MovingItems = False
  
End

Public Sub MoveDownPlsBTN_Click()
  
  Dim howmanyselected As Integer
  Dim i, j As Integer
  MovingItems = True
  'find the index of the Last selected row:
  i = playlistgrid.Rows.count - 1
  While Not (playlistgrid.Rows[i].Selected Or i = 0)
    i = i - 1
  Wend
  If i < (playlistgrid.Rows.count - 1) Then
    CutSelectedRows()
    howmanyselected = ClipboardRows.Count
    PasteSelectedRows(i - howmanyselected + 2)
    playlistgrid.scrolly = playlistgrid.scrolly + playlistgrid.Rows.H
    'SELECT the items again:
    playlistgrid.UnSelectAll()
    For j = (i - howmanyselected + 2) To (i + 1)
      playlistgrid.Rows[j].selected = True
    Next 'j
  Endif
  Wait 0.2
  MovingItems = False
  
End

Public Sub PasteSelectedRows(Optional TargetRowOverride As Integer = -1)
  
  Dim i As Integer
  
  Dim TargetRow As Integer
  Dim TotalRows As Integer = ClipboardRows.count - 1
  
  If TargetRowOverride <> -1 Then
    TargetRow = TargetRowOverride
  Else
    TargetRow = Playlistgrid.row + 1
  Endif
  
  For i = 0 To (ClipboardRows.count - 1)
    If targetrow = -1 Then targetrow = PlayListGrid.Rows.count
    
    MyPlaylist.SearchTable.Add(ClipboardRows[totalrows - i], targetrow + i)
    MyPlaylist.PTable.Add(ClipboardRows[i], targetrow + i)
    PlayListGrid.Rows.Insert(targetrow + i)
    playlistgrid.Rows[targetrow + i].text = ClipboardRows[totalrows - i]
  Next 'i
  ClipboardRows.clear
  playlistgrid.row = targetrow
  'playlistgrid.Rows.h = LibraryGrid.Font.TextHeight("^_") + global.rowpadding
  
End

Public Function CopySelectedRows()
  'prepare the dragging, fill draggingrows
  
  Dim i As Integer = PlayListGrid.Rows.count - 1

  ClipboardRows.clear
  While i >= 0 'for every selected rows in playlistgrid
    If PlayListGrid.Rows[i].selected Then
      ClipboardRows.Add(MyPlaylist.SearchTable[i]) 'copy the row from searchtable
    Endif
    i = i - 1
  Wend
  
End

Public Sub CutSelectedRows()
  
  CopySelectedRows()
  'playlistgrid.Rows.h = LibraryGrid.Font.TextHeight("^_") + global.rowpadding
  MyPlaylist.DeleteSelected(Playlistgrid, True)
  
End

Public Sub MenuCopyRows_Click()
  
  CopySelectedRows()
  
End

Public Sub MenuCut_Click()
  
  CutSelectedRows()
  
End

Public Sub MenuPlaylistDelete_Click()

  MyPlaylist.DeleteSelected(Playlistgrid, True)

End

Public Sub MenuLibraryDeleteSelected_Click()

  MyLibrary.DeleteSelected(Librarygrid, True)

End

Public Sub MenuPaste_Click()
  
  PasteSelectedRows()
  
End

Public Sub MenuClearLibrary_Click()
  
  If Not (MyQuestion.ask(("Are you sure you want to clear your library?"), ("Don't clear my library"), ("Clear my library")) = 1) Then
    MyLibrary.clear(LibraryGrid)
    LibraryGrid_Select()
    UpdateSearchResults(mylibrary, librarygrid, True, Searchfield.text)
  Endif
  
End

Public Sub MenuPlaylistDeleteAll_Click()

  If Not (Message.delete(("Are you sure you want to clear the Playlist?"), ("Don't clear the playlist"), ("Clear the playlist")) = 1) Then
    MyPlaylist.clear(Playlistgrid)
    PlaylistGrid_Select()
    UpdateSearchResults(myplaylist, playlistgrid, True, SearchfieldPLS.text)
  Endif

End

'/---Playlist Cut/copy/paste/delete-------------------------------

Public Sub PlaylistGrid_Drop()
  
  Dim droppedfile, ext As String
  Dim droppedfiles As String[] = Split(Drag.Paste("text/uri-list"), "\n\r", "", True)
  Dim IsFile, IsDirectory, IsUri, IsPlayList As Boolean
  
  MyPlaylist.SyncSortedTable()  '<-necessary for MyPlaylist.isdupe() function
  For Each DroppedFile In Droppedfiles
    If Trim(DroppedFile) <> "" Then
      droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))
      ISFile = False
      IsDirectory = False
      IsUri = False
      Try ISFile = (Stat(droppedfile, True).type = gb.file)
      Try IsDirectory = (Stat(droppedfile, True).type = gb.Directory)
      ext = Upper(File.Ext(Droppedfile))
      Try IsPlaylist = ((ext = "M3U") Or (ext = "PLS") Or (ext = "XPL"))
      IsUri = (droppedfile Like "*://*")
      If IsPlayList And (Not isuri) Then
        MyPlaylist.LoadFile(droppedfile, PlayListGrid, True)
      Else If IsFile Then
        MyPlaylist.AddFile(Playlistgrid, DroppedFile, False, False)
      Else If IsURI Then
        MyPlaylist.AddFile(Playlistgrid, Droppedfile, GeneralOptions.SlowTagsCHK.value, True)
      Else If IsDirectory 'we won't add directories to playlist
      Endif
    Endif
  Next
  UpdateSearchResults(myplaylist, playlistgrid, True, SearchfieldPLS.text)
  ScrollLeft()
  fmain.MyPlaylist.Save(fmain.PlaylistGrid, global.confpath)
End

Function BigFactorTable(w As Integer) As Integer

  Select Case w
    Case 16
      Return 4
    Case 24
      Return 4
    Case 32
      Return 3
    Case 48
      Return 3
    Case 64
      Return 2
    Case 96
      Return 2
    Case 128
      Return 2
    Case 160
      Return 2
    Case Else
      Return 2
  End Select

End

Public Sub resizerows(mygrid As Gridview)

  Dim rowheight As Integer
  Dim rowpadding As Integer = global.rowpadding
  
  If mygrid.name <> "DVBTGrid" Then
    rowheight = CInt(generaloptions.IconWidthCombobox.text) '+ rowpadding 
  Else
    rowheight = dvbtgrid.Font.TextHeight("|")
    rowheight *= 1.2
  Endif
  If mygrid.Rows.h <> ((rowheight) + rowpadding) Then mygrid.Rows.h = ((rowheight) + rowpadding)

End

Public Sub Gridviews_Data(MyGrid As GridView, MyLibrary As Playlistclass, Row As Integer, Column As Integer)

  Dim fullpath As String
  Dim artist, album As String
  Dim rowheight As Integer
  Dim rowpadding As Integer = global.rowpadding
  
  Dim bigfactor As Integer = 1
  Dim filefound As Boolean = True
  
  If mygrid.data = Null Then Return
  If Not fmain.FullyLoaded Then Return
  If Not (fmain.visible Or fsform.FullScreen) Then Return
  
  If mygrid.name <> "DVBTGrid" Then
    rowheight = CInt(generaloptions.IconWidthCombobox.text) '+ rowpadding 
  Else
    rowheight = dvbtgrid.Font.TextHeight("|")
    rowheight *= 1.2
    mygrid.Columns[0].Width = dvbtgrid.Font.TextWidth("0") * 120
  Endif
  
  'draw an icon (or a cover) on the first column
  If column = 0 Then
    Try fullpath = Mylibrary.CellValue(MyGrid, Row, Myplaylist.Columnindex["Full Path"])
    
    If mygrid.name <> "DVBTGrid" Then
      artist = mylibrary.CellValue(mygrid, row, mylibrary.ColumnIndex["Artist"])
      album = mylibrary.CellValue(mygrid, row, mylibrary.ColumnIndex["Album"])
      
      If Not myplaylist.ISURI(fullpath) Then
        If covermanager.filesnotfound.Find(fullpath) <> -1 Then
          mygrid.Data.picture = picture["icon:/" & CStr((rowheight - rowpadding + covermanager.shadowoffset) * bigfactor) & "/error"]
          filefound = False
        Endif
      Endif
      '---
      If filefound Or (Lower(fullpath) Like "*dvb*://*") Then
        If GeneralOptions.ShowCoversInListChk.value Then  'the user want covers
          If Not Exist(covermanager.Coverfile(artist, album, fullpath), True) Then 'se il coverfile non esiste
            If covermanager.IsUncovered(fullpath) Then '...e non puòessere creato
              MyGrid.Data.Picture = covermanager.coverpicture(covermanager.Coverfile(artist, album, fullpath), fullpath, (rowheight - rowpadding) * bigfactor) 'ritorna la coverdi Default
            Else 'il coverfile non esiste, ma potrebbe essere creato
              covermanager.QueueThumb(MyGrid, fullpath, artist, album, row, (rowheight - rowpadding) * bigfactor) 'prova a crearlo
            Endif
          Else 'il coverfile c'è
            MyGrid.Data.Picture = covermanager.coverpicture(covermanager.Coverfile(artist, album, fullpath), fullpath, (rowheight - rowpadding) * bigfactor)
          Endif
        Else 'the user don't want any cover
          MyGrid.Data.Picture = covermanager.DefaultLibraryIcon(fullpath, (rowheight - rowpadding) * bigfactor)
        Endif 'user wanted covers
      Endif 'filefound was true
      
    Else 'for dvbt
      MyGrid.Data.Picture = covermanager.DefaultLibraryIcon(fullpath, (rowheight - rowpadding) * bigfactor)
    Endif
    
  Endif 'column was 0
  
  If (row Mod 2) = 0 Then
    MyGrid.data.background = MyGrid.Background
  Else
    MyGrid.data.background = Global.Alternatecolor
  Endif
  If row = hirow Then mygrid.Data.Font.bold = True

  MyGrid.data.text = MyLibrary.CellValue(MyGrid, row, column)
  mygrid.Data.Foreground = GeneralOptions.ColorChooseBTN1.Background
  
End


Public Sub LibraryGrid_Data(Row As Integer, Column As Integer)
  Gridviews_Data(LibraryGrid, mylibrary, Row, Column)
End

Public Sub PlaylistGrid_Data(Row As Integer, Column As Integer)

  Gridviews_Data(PlayListGrid, myplaylist, Row, Column)

End

Public Sub DVBTGRID_Data(Row As Integer, Column As Integer)
  
  Gridviews_Data(DVBTGrid, MyDVBTList, Row, Column)
  
End

Public Sub MenuManageProfiles_Click()
  
  ProfileManager.show
  
End

Public Sub CopySelectedToClipboard(MyLibrary As Playlistclass, MyGrid As Gridview)
  
  Dim i As Integer = MyGrid.Rows.count - 1
  Dim MyClipboard As String = ""
  Dim URI As String = ""
  
  While i >= 0 'for every selected rows in playlistgrid
    If MyGrid.Rows[i].selected Then
      URI = MyLibrary.GetValue(MyLibrary.SearchTable[i], "Full Path")
      If Not (URI Like "*://*") Then URI = "file://" & URI
      URI = URI & "\r\n"
      MyClipboard = MyClipboard & URI
    Endif
    i = i - 1
  Wend
  Clipboard.copy(MyClipboard, "text/uri-list")
  
End

Public Sub MenuPlsCopyToClipboard_Click()
  
  CopySelectedToClipboard(MyPlaylist, Playlistgrid)
  
End

Public Sub MenuLibCopyToClipboard_Click()
  
  CopySelectedToClipboard(MyLibrary, Librarygrid)
  
End



Public Sub SwitchSubBtn_Click()
  If Not (mplayer.ProcessRunningOvr()) Then Return
  streamssubtitlesmenu.Popup
End

Public Sub SwitchAudioBTN_Click()

  If Not (mplayer.ProcessRunningOvr()) Then Return
  If Streamsaudiomenu.enabled Then
    Streamsaudiomenu.Popup
  Else
    mplayer.Send("Switch_Audio")
  Endif
  
End

Public Sub Form_Leave()
  
  MouseOnFmain = False
  
End

Public Sub Form_Enter()

  MouseOnFmain = True
End

Public Sub Statusbar_MouseDown()
  'Cycle through possible Timeformats:
  TimeFormat = TimeFormat + 1
  If Timeformat = 4 Then TimeFormat = 0
End

Public Sub FullScreenBtn_Click()
  
  If Not Tageditmode Then 
    FullScreenSwitch()
  Endif

End

Public Sub SlideTimer_Timer()
  'Hide and show bottom vbox smoothly
  
  Dim MaxHeigth As Integer = controlframe.h + Statusbar1.h
  
  If Not (BottomVbox.visible) Then BottomVbox.H = 0
  If DoslideUp Then
    If BottomVbox.H < MaxHeigth Then
      If (Not BottomVbox.visible) Then BottomVbox.visible = True
      If BottomVbox.h + 8 < MaxHeigth Then
        BottomVbox.h = BottomVbox.h + 8
      Else
        BottomVbox.h = MaxHeigth
      Endif
    Else
      SlideTimer.stop
    Endif
    
  Else If BottomVbox.H >= 8 Then
    BottomVbox.h = BottomVbox.h - 8
  Else
    SlideTimer.stop
    BottomVbox.Visible = False
  Endif
  
End

Public Sub MenuConfigureGeneralVideo_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.MenuLoadDefault_Click()
  GeneralOptions.AlreadyLoaded = True
  Try GeneralOptions.TabStrip1.index = Global.TabIndexByName(("Video"), GeneralOptions.TabStrip1)
  GeneralOptions.show
  
End

Public Sub MenuConfigureGeneralAudio_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.MenuLoadDefault_Click()
  GeneralOptions.AlreadyLoaded = True
  Try GeneralOptions.TabStrip1.index = Global.TabIndexByName("Audio", GeneralOptions.TabStrip1)
  GeneralOptions.show
  
End

Public Sub MenuPlaylistZapSelected_Click()

  playlistgrid.enabled = False
  If (PlaylistGrid.row >= 0) Then
    If (MyQuestion.ask(("Are you sure you want to delete selected item(s) from disk?"), ("Don't Delete"), ("Yes, Delete")) = 2) Then
      MyPlaylist.EraseSelected(PlaylistGrid)
      MyPlaylist.DeleteSelected(Playlistgrid, True)
      Try playlistgrid.Current.EnsureVisible()
    Endif
  Endif
  playlistgrid.enabled = True

End

Public Sub MenuLibraryZapSelected_Click()
  librarygrid.enabled = False
  If (LibraryGrid.row >= 0) Then
    If (MyQuestion.Ask(("Are you sure you want to delete selected item(s) from disk?"), ("Don't Delete"), ("Yes, Delete")) = 2) Then

      MyLibrary.EraseSelected(Librarygrid)
      MyLibrary.DeleteSelected(Librarygrid, True)
      Try LibraryGrid.Current.EnsureVisible()
    Endif
  Endif
  librarygrid.enabled = True
End

Public Sub MenuCodecs_Click()
  
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  
End

Public Sub Mysocket_Connection(RemoteHostIP As String)
  'just accept on localhost.
  
  host = Mysocket.Accept()
  
End

Public Sub socket_Read()
  Dim command As String = ""
  Line Input #Last, command
  global.myDebug("command= " & command)
  Mysocket.close
  ExecuteRemote(command)
  Mysocket.Listen(1)
End

Public Sub ExecuteRemote(command As String)

  Dim parameter As String
  
  parameter = Mid(command, InStr(command, " ") + 1)
  global.myDebug("command= " & command)
  global.myDebug("parameter= " & parameter)
  If command Like "append *" Then
    parameter = NoQuotes(parameter)
    global.myDebug("URI= " & parameter)
    MyPlaylist.AddFile(playlistgrid, parameter, MyPlaylist.ISURI(parameter), MyPlaylist.ISURI(parameter))
    MyPlaylist.AutoSizeColumns(playlistgrid)
    GridRefreshWorkaround(playlistgrid)
  Else If command Like "play *" Then
    parameter = NoQuotes(parameter)
    global.myDebug("URI= " & parameter)
    ButtonStop_Click()
    
    If Not global.IsAudioFile(parameter) Then 'raise xt7 only on video files
      fmain.raise
      fmain.Minimized = False
      fmain.Show
    Endif
    Play(parameter)
    If TabSelectedLibrary() Then
      Try librarygrid.rows[librarygrid.row].Selected = False
      Try librarygrid.row = mylibrary.FindRowByPath(librarygrid, parameter)
      Try librarygrid.rows[librarygrid.row].Selected = True
    Else If TabSelectedPlaylist() Then 
      Try playlistgrid.rows[playlistgrid.row].Selected = False
      Try myplaylist.row = myplaylist.FindRowByPath(playlistgrid, parameter)
      Try playlistgrid.rows[playlistgrid.row].Selected = True
    Endif
  Endif

End

Public Function NoQuotes(quoted As String) As String
  ' '/home/user/song.mp3' ->/home/user/song.mp3
  
  Dim out As String
  
  If Left(quoted) = "'" And Right(quoted) = "'" Then
    out = Mid(quoted, 2, Len(quoted) - 2)
    Return out
  Else
    Return quoted
  Endif
  
End

Public Function Requote(toquote As String) As String
  ' 'ciao' -> 'ciao'
  ' "ciao" -> "ciao"
  ' ciao -> 'ciao'
  ' 'ciao -> ''ciao'
  ' 'ciao" -> ''ciao"'
  
  Dim out As String
  
  If Left(toquote) = "'" And Right(toquote) = "'" Then
    Return out
  Endif
  If Left(toquote) = "\"" And Right(toquote) = "\"" Then
    Return out
  Endif
  Return "'" & toquote & "'"
  
End

Public Sub MenuShowLog_Click()
  LogWindow.show

End

Public VolumeFocused As Boolean = False

Public Sub VideoAreaGroup_Enter()
  If mplayer.ProcessRunningOvr() Then fmain.videoboxproxy.SetFocus
End


Public Sub ShowVideoEq_Click()
  VideoEqualizer.visible = Not (VideoEqualizer.visible)
End

Public Sub ShowAudioEq_Click()
  If NewChains.visible Then
    NewChains.hide
      Else
    NewChains.show_audio_filters()                
    NewChains.show_audio_filter("anequalizer")
  Endif  
End

Public Sub MenuHomepage_Click()
  
  Desktop.Open("https://github.com/kokoko3k/xt7-player-mpv")
  
End

Public Sub MenuToolBarLocked_Click()
  
  MenuToolBarLocked.checked = Not MenuToolBarLocked.checked
  SetFlexSpaceVisibility(Not MenuToolBarLocked.checked)
  
End


Private Function want_dvd_menu() As Boolean
  Return False
  'Return MyQuestion.Ask(("How do you want to play the dvd?"), ("main title"), ("menu")) = 2
End


Public Sub MenuDvdDrive_Click()
  
   If (Not (Exist(GeneralOptions.DVDDeviceText.text))) Or (Trim(GeneralOptions.DVDDeviceText.text) = "") Then
    PopupDVDError()
    SetDvdTabVisibility(False)
    Return
  Endif
  
  
  Me.mouse = mouse.wait
  If Not GeneralOptions.AlreadyLoaded Then 
    GeneralOptions.MenuLoadDefault_Click()
    GeneralOptions.AlreadyLoaded = True
  Endif
  If want_dvd_menu() Then 
    Play("dvd://menu/" & generaloptions.DVDDeviceText.text)
      Else
    Play("dvd:///" & generaloptions.DVDDeviceText.text)
  Endif
  
  Me.mouse = mouse.default
  
End

Public Sub MenuDvdFolder_Click()
  Dim dpath As String
  If myDialog.SelectDirectory() Then Return
  dpath = DConv(myDialog.Path)
  If want_dvd_menu() Then 
    Play("dvd://menu/" & dpath)
      Else
    Play("dvd:///" & dpath)
  Endif
End

Public Sub MenuDvdFile_Click()
  Dim dpath As String
  myDialog.filter = ["*.iso;*.ISO;*.Iso", ("iso files"), "*", ("All files")]
  If myDialog.OpenFile() Then Return
  dpath = DConv(myDialog.Path)
  If want_dvd_menu() Then 
    Play("dvd://menu/" & dpath)
      Else
    Play("dvd:///" & dpath)
  Endif

End

Public Sub ButtonTag_Click()

  Dim tl As TagLib
  'Dim audiotag As New TagLib
  Dim MyGrid As GridView
  Dim Table As Playlistclass
  Dim row As Integer = 0
  Dim Filename As String
  
  Dim Err As Boolean = False
  Dim errormsg As String

  Librarygrid.enabled = False
  PlaylistGrid.enabled = False
  Last.enabled = False
  Fmain.mouse = mouse.Wait
  
  If TabSelectedLibrary() Then
    MyGrid = Librarygrid
    Table = MyLibrary
  Else If TabSelectedPlaylist() Then
    MyGrid = PlaylistGrid
    Table = MyPlaylist
  Else
    errormsg = ("Sorry, Audio tagging is only possible for library and playlist items\n")
    errormsg &= ("To tag this item, please add it to library or playlist first.")
    Message.Error(errormsg, ("Ok"))
    Return
  Endif
  'Tag the selected items
  For row = 0 To MyGrid.Rows.count - 1
    tl = New Taglib
    Filename = Table.GetValue(Table.SearchTable[row], "Full Path")
    filename = String$(1, filename) 'force a cast from string to string (?!)
    If MyGrid.Rows[row].selected Then
      If tl.Init(filename) Then 
        If AlbumCHK.value Then Err = (Err Or Not (tl.SetAlbum(tagbox1.text)))
        If ArtistCHK.value Then Err = (Err Or Not (tl.SetArtist(tagbox2.text)))
        If TitleCHK.value Then Err = (Err And Not (tl.SetTitle(tagbox3.text)))
        If GenreCHK.value Then Err = (Err And Not (tl.SetGenre(tagbox5.text)))
        If CommentCHK.value Then Err = (Err And Not (tl.SetComment(tagbox7.text)))
        If TrackCHK.value Then 
          If (Trim(tagbox6.text) <> "") Then Err = (Err And Not (tl.SetTrack(Trim(tagbox6.text))))
        Endif
        If YearCHK.value Then 
          If (Trim(tagbox4.text) <> "") Then Err = (Err And Not (tl.SetYear(Trim(tagbox4.text))))
        Endif
        If Not (err) Then
          tl.Save()
        Else
          Try tl.tlFree()
          Librarygrid.enabled = True 
          PlaylistGrid.enabled = True
          Last.enabled = True
          Fmain.mouse = mouse.default
          Return 
        Endif
        Mylibrary.UpdateTableAndGridTags(Librarygrid, Filename, tl.Album, tl.Artist, tl.Title, tl.MyYear, tl.Genre, tl.Track, tl.Comment)
        MyPlaylist.UpdateTableAndGridTags(Playlistgrid, Filename, tl.Album, tl.Artist, tl.Title, tl.MyYear, tl.Genre, tl.Track, tl.Comment)
      Endif
    Endif
  Next 'r
  If TabSelectedLibrary() Then
    Librarygrid.refresh
  Else If TabSelectedPlaylist() Then
    PlaylistGrid.refresh
  Endif
  Last.enabled = True
  Librarygrid.enabled = True
  PlaylistGrid.enabled = True  
  'SearchField_Click() '16/04/2012: useless?
  MyLibrary.AutoSizeColumns(Librarygrid)
  MyPlaylist.AutoSizeColumns(PlayListGrid)
  Fmain.mouse = mouse.default
  Wait 0.001

End

Public Sub EditTagModeSwitch1_Click()
  
  If Not fsform.FullScreen Then
    
    EditTagModeSwitch1.Checked = Not EditTagModeSwitch1.Checked
    TagEditMode = EditTagModeSwitch1.Checked
    If TagEditMode Then
      ShowAudioPanel(False)
      HBox4.background = Color.textbackground
      HBox4.Foreground = Color.TextForeground
      Rightsidepanel.background = rightsidepanel.Parent.Background
      If Lower(BottomVbox.parent.name) <> Lower(zzzfake.name) Then BottomVbox.Reparent(zzzfake)
      If tagpanel.parent <> Rightsidepanel Then tagpanel.Reparent(Rightsidepanel)
      If BottomVbox.parent <> rightsidepanel Then BottomVbox.Reparent(rightsidepanel)
      tagpanel.visible = True
      
      OuterBox.visible = False
    Else
      Rightsidepanel.background = Color.Black
      tagpanel.visible = False
      OuterBox.visible = True
      If mplayer.ProcessRunningOvr() Then
        If mplayer.getP("audioonly") Then
          FillPropertiesGrid()
          CoverRefresh()
          ShowAudioPanel(True)
        Endif
      Else
        ShowAudioPanel(False)
      Endif
    Endif
  Endif
  
End

Public Sub Clearer_Click()
  
  Try Last.NEXT.text = " "
  
End

Public Sub Button2_Click()
  
  If TabSelectedPlaylist() Then
    PlayListGrid_Select()
  Else If TabSelectedLibrary() Then
    LibraryGrid_Select()
  Endif
  
End

Public Sub TagsCHK_Click()
  
  Last.next.next.enabled = Last.value
  
End

Public Sub TagsBox_GotFocus()
  
  Last.SELECTAll
  
End

Public Sub TagsBox_Activate()
  
  ButtonTag_Click()
  If AdvanceCHK.value Then
    If TabSelectedLibrary() Then
      MyLibrary.SelectNext(LibraryGrid, False)
    Else If TabSelectedPlaylist() Then
      MyPlayList.SelectNext(PlayListGrid, False)
    Endif
  Endif
  Last.setfocus
  
End

Public Sub MenuSavePls_Click()
  
  Dim PrevTitle As String
  Dim PrevFilter As String[]
  
  With Global
    Dialog.Path = .StartFolder & "/"
    PrevFilter = Dialog.filter
    Prevtitle = Dialog.title
    Dialog.Title = "Export a playlist"
    Dialog.filter = ["*.xpl", "Xt7 playlist", "*.m3u", "m3u playlist", "*.pls", "Winamp playlist"]
  End With
  If Dialog.SaveFile() Then Return
  Dialog.filter = PrevFilter
  Dialog.title = PrevTitle
  Try MyPlaylist.SaveAs(Dialog.Path)
  If Error Then Message.error(("There was an error while saving the playlist"), ("Ok"))

End

Public Sub MenuLoadPls_Click()
  
  Dim PrevTitle As String
  Dim PrevFilter As String[]
  
  With Global
    myDialog.Path = .StartFolder
    PrevFilter = myDialog.filter
    Prevtitle = myDialog.title
    myDialog.Title = "Load a playlist"
    myDialog.filter = ["*.xpl", "Xt7 playlist", "*.m3u", "m3u playlist", "*.pls", "Winamp playlist"]
  End With
  If myDialog.OpenFile() Then Return
  myDialog.filter = PrevFilter
  myDialog.title = PrevTitle
  MyPlaylist.LoadFile(myDialog.path, PlayListGrid)
  UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  
End

Public Sub MenuAppendPls_Click()
  
  Dim PrevTitle As String
  Dim PrevFilter As String[]
  
  With Global
    myDialog.Path = .StartFolder
    PrevFilter = myDialog.filter
    Prevtitle = myDialog.title
    myDialog.Title = "Load a playlist"
    myDialog.filter = ["*.xpl", "Xt7 playlist", "*.m3u", "m3u playlist", "*.pls", "Winamp playlist"]
  End With
  If myDialog.OpenFile() Then Return
  myDialog.filter = PrevFilter
  myDialog.title = PrevTitle
  MyPlaylist.LoadFile(myDialog.path, PlayListGrid, True)
  UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  
End

Public Sub SetACover(Album As String, Artist As String, filepath As String)
  
  Dim timeout As Integer = 15 ' how much to wait for the other fetch to finish
  Dim tmpmessage As String
  Dim JustFileCover As Boolean = False 'are we going to set a cover for just this file?
  Dim tl As New Taglib

  PreviousCoverFile = "NOPE"
  If CoverManager.fetching Then
    CoverManager.HitCancel = True
    Repeat
      Wait 0.1
      timeout = timeout - 1
    Until (CoverManager.fetching = False) Or (timeout = 0)
  Endif
  
  If Upper(filepath) Like "*.FLAC" Then
    If (Trim(Artist) = "") And (Trim(Album) = "") Then
      tl.init(filepath)
      Artist = tl.Artist
      Album = tl.Album
      tl.tlfree()
    Endif
  Endif
  
  If (Trim(Artist) = "") And (Trim(Album) = "") Then
    JustFileCover = True
    tmpmessage = ("\nso you are going to set a cover for this particular file/stream")
    Message.Info(("Artist Or Album tag information are required to set a cover") & tmpmessage, ("Ok"))
  Endif
  CoverManager.cachebar.value = 0
  If CoverManager.fetching Then
    Message.Info(("Another cover search is in progress, please wait for it to finish!"), "Ok")
    Return
  Endif
  If (CoverManager.ArtistText.text & CoverManager.AlbumText.text) <> Trim(Artist) & Trim(Album) Then
    Try CoverManager.CoverList.Clear
    Try CoverManager.CachePicture.Picture = picture.Load("null.png")
    Try CoverManager.CoverList.Refresh
    Try CoverManager.CachePicture.refresh
    CoverManager.ArtistText.text = Trim(Artist)
    CoverManager.AlbumText.text = Trim(Album)
    CoverManager.TextBox1.text = CoverManager.ArtistText.text & "," & CoverManager.AlbumText.text
    CoverManager.CachePicture.picture = AudioForm.CoverBox.Picture
    CoverManager.CachePicture.refresh
    CoverManager.Show()
    Wait 0.1
    If (Not Exist(CoverManager.Coverfile(CoverManager.ArtistText.text, CoverManager.AlbumText.text), True)) And Not JustFileCover Then
      CoverManager.SearchBox1_Click() 'start a fetch
    Endif
  Endif
  CoverManager.JustFileCover = JustFileCover
  CoverManager.MediaFileFullPath = filepath
  CoverManager.Show
  
End

Public Sub CoverBox_DblClick()

  covermanager.SetACover(mplayer.getP("fullpath"), mplayer.getP("artist"), mplayer.getP("album"))

End

Public Sub CloseTagEdBtn_Click()
  
  EditTagModeSwitch1_Click()
  
End

Public Sub DynaGuiToolbar_Menu()
  
  MenuConfigure.Popup()
  
End

Public Sub CompizHackTimer_Timer()
  
  'why compiz does not update itself?
  Fmain.x = fmain.screenx
  Fmain.y = fmain.screeny
  
End

Public Sub ShutOff_Click()
  
  ShutOFF.Checked = True
  ShutMEDIA.Checked = False
  ShutPLS.Checked = False
  Shutdown = "FALSE"
  Statusbar1.foreground = &F0F0F0&
  
End

Public Sub ShutMEDIA_Click()
  
  ShutOFF.Checked = False
  ShutMEDIA.Checked = True
  ShutPLS.Checked = False
  Shutdown = "MEDIA"
  Statusbar1.foreground = &FF5555&
  
End

Public Sub ShutPLS_Click()
  
  If ShufflePls.value Then
    Message.Warning(("Please, disable random playing first!"))
  Else
    If TogglePls.value = False Then TogglePls.value = True
    ShutOFF.Checked = False
    ShutMEDIA.Checked = False
    ShutPLS.Checked = True
    Shutdown = "PLS"
    Statusbar1.foreground = &FF8888&
  Endif
  
End

Public Sub Shutcfg_Click()
  
  GeneralOptions.Show()
  GeneralOptions.OptionsList["Misc"].selected = True
  
End



Public Sub TrayIcon2_Scroll(Delta As Float, Orientation As Integer)
  If delta > 0 Then
    v = "UP"
    'volume_add("+2")
  Else
    v = "DOWN"
    'volume_add("-2")
  Endif
  timervolume.Trigger()
End
Private v As String
Public Sub timervolume_Timer()
  If v = "UP" Then 
    volume_add("+2")
      Else
    volume_add("-2")
  Endif
End





Public Sub TrayIcon2_click()
  Dim iconified As Boolean = False
  iconified = (fmain.minimized And fmain.SkipTaskbar)
    If iconified Then 
      fmain.Minimized = False
      fmain.SkipTaskbar = False
      fmain.show
    Else
      fmain.Minimized = True
      fmain.SkipTaskbar = True
    Endif
End



Public TimerHideTray As New Timer As "TimerHideTray"

Public Sub TrayIcon2_middleclick() 'fixme trayicon (tutto commentato)
  Dim iconsize As Integer = 48 'hack.
  Stop
  If mplayer.ProcessRunningOvr() Then
    OverlaytrayTip.Redraw("..:xt7-player::.", mouse.screenx - (iconsize), mouse.screeny - (iconsize))
    TimerHideTray.delay = 5000
    TimerHideTray.start
  Endif
End

Public Sub TimerHideTray_Timer()

  OverlaytrayTip.hide
  TimerHideTray.stop

End

Public Function ObjectByName(Objectname As String) As Object
  
  Dim obj As Object
  
  For Each obj In Me.Controls
    If Upper(obj.name) = Upper(Objectname) Then
      global.myDebug("found" & objectname)
      Return obj
    Else
      Print Upper(objectname) & " differ from " & Upper(obj.name)
    Endif
  Next
  Return Null
End


Public Sub LeftSideTabs_Menu()
  UpdateMenuTabVisibility() 
  MenuTabs.popup
End

Private TabsonLeftMenu As Menu

Public Sub UpdateMenuTabVisibility()
  'enable/disable menu voices
  
  Dim i, j As Integer
  
  Dim submenu, submenu2, pmenu As Menu '(hide/show,go to tab)
  Dim HideShowTabsMenu As Menu '(visibility)
  
  Dim WasInvisible As Boolean
  
  MenuTabs.Children.Clear
  TabsonleftMenu = New Menu(Menutabs) As "tabsonleftmenu"
  TabsonLeftMenu.text = ("Use vertical tabs")
  TabsonleftMenu.Picture = picture["icon:/16/previous"]
  
  HideShowTabsMenu = New Menu(menutabs)
  HideShowTabsMenu.name = "HideShowTabsMenu"
  HideShowTabsMenu.Text = ("Hide/Show tabs")
  HideShowTabsMenu.Picture = picture["icon:/16/watch"]
  
  For i = 0 To Leftsidetabs.count - 1
    WasInvisible = Not (Leftsidetabs[i].visible) 'we need the caption of the tab which is lost if it is invisible,
    Leftsidetabs[i].visible = True
    
    If Not (TabSelectedDVDAt(i) Or TabSelectedCDDAAt(i)) Then
      submenu2 = New Menu(menutabs) As "menutabs"
      SubMenu = New Menu(HideShowTabsMenu) As "HideShowTabMenu"
      Submenu.name = Leftsidetabs[i].text
      Submenu.text = ("Show") & " " & Leftsidetabs[i].text
      Submenu2.text = Leftsidetabs[i].text
      Submenu2.name = Leftsidetabs[i].text
      Submenu2.picture = Leftsidetabs[i].Picture
      Submenu.picture = Leftsidetabs[i].Picture
      If WasInvisible Then Leftsidetabs[i].Visible = False
      SubMenu.checked = Leftsidetabs[i].Visible
      submenu2.enabled = Leftsidetabs[i].Visible
    Endif
    If WasInvisible Then Leftsidetabs[i].Visible = False
    If IsProfileTab(i) Then 
      ' pmenu = New Menu(submenu2)
      ' pmenu.text = "prova"
      For j = 0 To ProfilesListBox.count - 1
        pmenu = New Menu(submenu2) As "menuprofileselect"
        pmenu.text = ProfilesListBox[j].Text
        pmenu.tag = ProfilesListBox[j].Text
        pmenu.Checked = (global.CurrentProfile = pmenu.tag)
        If (Not pmenu.checked) Then pmenu.picture = picture["icon:/16/properties"]
      Next
    Endif
    
  Next 'i
  
End


Public Sub menutabs_click()
  
  Dim ClickedtabID As Integer
  Stop
  ClickedtabID = Global.TabIndexByName(Last.name, Leftsidetabs)
  Leftsidetabs.Refresh
  If (ClickedTabId <> -1) Then Leftsidetabs.index = ClickedtabID
  
End

Public Function IsProfileTab(i As Integer) As Boolean

  Dim theobject As Object
  For Each theobject In Leftsidetabs[i].Children
    If theobject Is Label Then
      If theobject.tag = "profiles" Then Return True
    Endif
  Next 'theobject
  Return False

End



Public Sub menuprofileselect_Click()
  Global.CurrentProfile = Last.tag
  ReLoadCurrentProfile()
  Try UpdateProfilesTabList()
End

Private Sub TabOrientation()
  
  Dim tmplayout As Integer[] = hsplit1.layout
  
  If fsform.FullScreen Then Return 
  If Leftsidetabs.Orientation = 19 Then 
    Leftsidetabs.Orientation = 1
  Else
    Leftsidetabs.Orientation = 19
  Endif
  If fmain.fullyloaded Then  'force an update
    tmplayout[1] = tmplayout[1] - 1
    tmplayout[0] = tmplayout[0] + 1
    hsplit1.Layout = tmplayout
  Endif
  
End

Public Sub tabsonleftmenu_Click()

  If fmain.fullyloaded Then TabOrientation()

End

Public Sub HideShowTabMenu_click()
  
  Dim i As Integer
  Dim WasInvisible As Boolean
  Dim ClickedtabID As Integer
  Dim text_check As String = ""
  Dim howmanyvisible As Integer = 0
 
  'Avoid hiding the tab if it is the only visible one.
    If Last.checked Then
      For i = 0 To Leftsidetabs.count - 1
        If Leftsidetabs[i].visible = True Then 
          howmanyvisible += 1
          If howmanyvisible > 1 Then Break
        Endif
      Next
      If howmanyvisible = 1 Then
        Message.Info(("You cannot hide all of the tabs.\nJust hide the whole tabs panel, if needed."))
        Return     
      Endif
    Endif
  
  'check for missing text
    Try text_check = Leftsidetabs[0].text 
    If text_check = "" Then 
      Message.Info(("Cannot locate current tab,\nIf you disabled tab text, then enable it first to change tab visibility."))
      Return
    Endif
   
  Last.checked = Not Last.checked
  For i = 0 To Leftsidetabs.count - 1
    WasInvisible = Not (Leftsidetabs[i].visible) 'we need the caption of the tab which is lost if it is invisible,
    Leftsidetabs[i].visible = True                'so make it temporally visible, and remember
    If Leftsidetabs[i].text = Last.name Then
      Leftsidetabs[i].Visible = Last.checked
    Else
      If WasInvisible Then Leftsidetabs[i].Visible = False
    Endif
  Next 'i
  'Focus the clicked Tab
  ClickedtabID = Global.TabIndexByName(Last.name, Leftsidetabs)
  If (ClickedTabId <> -1) Then Leftsidetabs.index = ClickedtabID
  Leftsidepanel.visible = False
  Wait
  Leftsidepanel.visible = True
End

Public Function IsTabVisible(tabname As String) As Boolean
  
  Dim i As Integer
  
  For i = 0 To Leftsidetabs.count - 1
    Print tabname
    If Leftsidetabs[i].text = tabname Then
      If Leftsidetabs[i].Visible Then Return True
    Endif
  Next 'i
  Return False
  
End

Public Sub UpdateProfilesTabList()
  Dim profilename As String
  Dim i As Integer
  ProfilesListBox.clear
  For Each profilename In Dir(global.confpath & "/", "*.profile")
    If Exist(global.confpath & "/" & profilename, True) Then
      If Stat(global.confpath & "/" & profilename, True).type = gb.Directory Then
        ProfilesListBox.Add(Split(profilename, ".")[0])
      Endif
    Endif
  Next
  ProfilesListBox.sorted = True
  For i = 0 To ProfilesListBox.count - 1
    If ProfilesListBox[i].text = Global.currentprofile Then ProfilesListBox[i].selected = True
  Next 'i
  CurrentProfileLabel.text = ("Current profile: ") & " " & Global.currentprofile
  MakeProfileMenu()
End

Public Sub ProfileDeleteBTN_Click()
  
  Dim profilename As String

  Try ProfileName = ProfilesListBox.Current.text & ".profile"
  If Not Error Then
    If ProfileName <> "Factory_Defaults.profile" Then
      If ProfileName = Global.currentprofile & ".profile" Then
        Message.Error(("You can't delete the current profile!"), ("Understood"))
        Return
      Endif
      If MyQuestion.Ask(("Are you sure you want to delete ") & ProfilesListbox.Current.Text & "?", ("Yes, Delete"), ("Don't delete")) = 1 Then
        Try RDelete(global.confpath & "/" & ProfileName)
        Try UpdateProfilestablist()
        Try ProfileManager.UpdateProfilelist()
      Endif
    Else
      Message.Error(("This is a read-only profile"))
    Endif
  Endif
  
End

Public Sub RDelete(directory As String)
  
  Dim subfile As String
  
  For Each subfile In RDir(directory)
    Try Kill directory & "/" & subfile
    Try Rmdir directory & "/" & subfile
  Next
  For Each subfile In RDir(directory)
    Try Kill directory & "/" & subfile
    Try Rmdir directory & "/" & subfile
  Next
  Try Rmdir directory
  
End

Public Sub ProfilesListBox_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    ProfilesListBox_DblClick()
  Endif
  
End

Public Sub ProfilesListBox_DblClick()
  
  ProfileLoadBTN_Click()
  
End

Public Sub ReLoadCurrentProfile()

  Try Global.ReallyLoadAllSettings() 'current profile is the default

  Try GeneralOptions.LoadWatchDir(global.confpath & "/" & global.CurrentProfile)
  Try GeneralOptions.LoadExcludeDir(global.confpath & "/" & global.CurrentProfile)
  Try HotKeys.LoadHotKeys(global.confpath & "/" & global.CurrentProfile)
  
  Try ComboHistory.LoadHistory(Searchfield, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(SearchfieldPLS, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(Searchfieldalbums, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(Searchfielddvb, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(youSearchfield, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(AddUriForm.UriInsComboBox, global.confpath & "/" & global.CurrentProfile)
  Try ComboHistory.LoadHistory(Fmain.UrlBox, global.confpath & "/" & global.CurrentProfile)


  FMain.SetStyle_early()
  FMain.SetStyle_later()
  UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, Searchfield.text)
  UpdateSearchResults(MyPlaylist, PlaylistGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  
End

Public Sub ProfileLoadBTN_Click()

  Dim i As Integer
  Dim MySettings As New SettingsClass

  Try Global.CurrentProfile = ProfilesListBox.Current.text
  If Error Then
    For i = 0 To ProfilesListBox.count - 1
      If ProfilesListBox[i].selected Then 
        Global.CurrentProfile = ProfilesListBox[i].text
        Break
      Endif
    Next
  Endif
  ReLoadCurrentProfile()
  UpdateProfilesTabList()
  MySettings.WriteLastProfile(Global.confpath, global.CurrentProfile)
  global.myDebug("wrote last profile")

End

Public Sub ProfileRenameBTN_Click()
  
  Dim Source, Destination, DestinationAnswer As String
  
  If ProfilesListbox.Current.Text <> "Factory_Defaults" Then
    DestinationAnswer = Replace(Trim(MyAskName.Ask(("Enter the new profile name"))), ".", "_")
    If Trim(DestinationAnswer) <> "" Then
      Source = global.confpath & "/" & ProfilesListbox.Current.Text & ".profile"
      Destination = global.confpath & "/" & DestinationAnswer & ".profile"
      Move Source To Destination
      If Not Error Then
        If ProfilesListbox.Current.Text = Global.currentProfile Then Global.currentProfile = DestinationAnswer
      Endif
    Endif
    Try UpdateProfilestablist()
  Else
    Message.Error(("This is a read-only profile"))
  Endif
  
End

Public Sub ProfileSaveBTN2_Click()
  
  If ProfilesListbox.Current.Text <> "Factory_Defaults" Then
    If MyQuestion.Ask(("You are going to overwrite the selected profile\nwith the current settings."), ("I know, proceed"), ("Cancel")) = 1 Then
      ReallySaveAllSettings(Replace(ProfilesListbox.Current.Text, ".", "_"))
    Endif
  Else
    Message.Error(("This is a read-only profile"))
  Endif
  
End

Public Sub ProfileSaveBTN_Click()
  
  Dim NewProfileName As String
  
  NewProfileName = MakeNewProfile()
  If NewProfileName <> "" Then
    ReallySaveAllSettings(NewProfileName)
  Endif
  
End

Public Sub ProfileMakeNewBTN_Click()
  
  Dim NewProfileName, Source, Destination As String
  
  NewProfileName = MakeNewProfile()
  If NewProfileName <> "" Then
    Source = global.confpath & "/" & "Factory_Defaults.profile"
    Destination = global.confpath & "/" & NewProfileName & ".profile"
    Try Shell "cp -a " & Source & "/* " & Destination Wait
  Endif
  
End

Public Function MakeNewProfile() As String
  
  Dim DestinationAnswer As String = ""
  
  DestinationAnswer = Trim(MyAskName.Ask(("Enter a name for the new profile:")))
  If Trim(DestinationAnswer) <> "" Then
    DestinationAnswer = Replace(DestinationAnswer, ".profile", "")
    DestinationAnswer = Replace(DestinationAnswer, " ", "_")
    DestinationAnswer = Replace(DestinationAnswer, ".", "_")
    If Trim(DestinationAnswer) <> "" Then
      Try Mkdir global.confpath & "/" & (Replace(DestinationAnswer, ".", "_")) & ".profile"
      If Not Error Then
        Try UpdateProfilesTabList()
        Return DestinationAnswer
      Else
        Return ""
      Endif
    Endif
  Endif
  
End

Public Sub PropertiesGrid_Menu()
  
End

Public Sub ProfilesListBox_Menu()
  
End

Public Sub ToolPanel1_Click()
  
End

Public Sub Button3_Click()
  play("dvd://menu" & dvd_device(mplayer.last_media))
End

Private SHOUTCAST_INITIALIZED As Boolean = False
Private ICECAST_INITIALIZED As Boolean = False

Public Sub UpdateGenresTree(Optional force As Boolean = True)
  If (Not force) Then
    If (SHOUTCAST_INITIALIZED Or ICECAST_INITIALIZED) Then
      global.myDebug("Already initialized, exiting")
    Endif
  Endif
  Leftsidepanel.mouse = mouse.wait
  If buttonshoutcast.value Then
      Try MyRadio.GetGenres(GenresTree, ((Not force) And (SHOUTCAST_INITIALIZED)))
      SHOUTCAST_INITIALIZED = True
    Else
      Try ICECAST_INITIALIZED = IceRadio.FillGenresTree(Genrestree, (Not force)) ' And ICECAST_INITIALIZED)
  Endif
  Leftsidepanel.mouse = mouse.normal
End

Public Sub ShoutCast_Select()
  UpdateGenresTree(False)
End


Public Sub ButtonGetGenres_Click()
  Leftsidepanel.mouse = mouse.wait
  UpdateGenresTree(True)
  Leftsidepanel.mouse = mouse.normal
End


Public Sub ButtonRadios_click()
  If Not fmain.fullyloaded Then Return
  UpdateGenresTree(False)
  Last.mouse = mouse.Normal
End

Public Sub GenresTree_Click()
  Dim IsChild As Boolean = False
  IsChild = Not (GenresTree.moveparent())
  GenresTree.MoveCurrent
  If IsChild Then
    Media_Next_path = GenresTree.Current.key
  Endif
End


Public Sub GenresTree_Activate()
  Dim IsChild As Boolean = False
  Dim genre As String

  GenresTree.MoveCurrent
  IsChild = Not (GenresTree.moveparent())
  If IsChild Then
    TogglePls.value = False
    Play(GenresTree.Current.key,, GenresTree.Current.text)
  Else
    If buttonicecast.value Then Return
    Last.mouse = mouse.wait
    Genre = GenresTree.Current.Text
    'Genre = Split(GenresTree.Current.Text, MyRadio.ts)[0]
    If Not Global.NeedTreeViewWorkaround() Then GenresTree.Current.Expanded = True
    Wait
    MyRadio.GetStationsFromGenre(Genre, GenresTree)
    If (GenresTree.Current.Children > 0) Then 
    If Not Global.NeedTreeViewWorkaround() Then GenresTree.Current.expanded = True 'gambas 3.4.0 bug
    Endif
   Last.mouse = mouse.normal
  Endif
End

Public Sub starticesearch()
  Leftsidepanel.mouse = mouse.wait
  NOSAVEHBox10.mouse = mouse.wait
  SearchBox1.enabled = False

  IceRadio.search(SearchBox1.text, ShutResultGrid)

  NOSAVEVBox2.visible = True
  NOSAVEVBox3.visible = False
  Highlight_shout_results()
  Leftsidepanel.mouse = mouse.normal
  NOSAVEHBox10.mouse = mouse.normal
  SearchBox1.enabled = True
  ShutResultGrid.Rows.h = ShutResultGrid.Font.TextHeight("^_") + global.rowpadding
End


Public Sub startshoutSearch()
  
  Leftsidepanel.mouse = mouse.wait
  NOSAVEHBox10.mouse = mouse.wait
  SearchBox1.enabled = False
  If MyRadio.GetStationsFromSearch(SearchBox1.text, ShutResultGrid) <> False Then
    Message.Error(("Error reading from shoutcast server"))
  Endif
  NOSAVEVBox2.visible = True
  NOSAVEVBox3.visible = False
  Highlight_shout_results()
  Leftsidepanel.mouse = mouse.normal
  NOSAVEHBox10.mouse = mouse.normal
  SearchBox1.enabled = True
  ShutResultGrid.Rows.h = ShutResultGrid.Font.TextHeight("^_") + global.rowpadding

End

Public Sub ShutResultGrid_DblClick()
  
  Dim SelectedPath As String
  
  Try SelectedPath = Last[Last.row, 3].text
  If Error Then Return
  If MouseInsideGrid(Last) Then
    Play(SelectedPath,, Last[Last.row, 0].text)
  Endif
  
End

Public Sub ShutResultGrid_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    ShutResultGrid_DblClick()
  Endif
  
End

Public Sub CloseTagEdBtn2_Click()
  
  NOSAVEVBox2.visible = False
  NOSAVEVBox3.visible = True
  If fullyloaded Then
    If TabSelectedShoutcast() Then ShoutCast_Select()
  Endif
  
End

Public Sub ShoutCastGridAddToLibrary_Click()
  
  Dim r As Integer
  Dim AnERROR As Boolean = False
  Dim QuickMode As Boolean
  
  QuickMode = (MyQuestion.Ask(("How do you want to add?"), ("Add quickly"), ("Get Stream info")) = 1)
  For r = 0 To ShutResultGrid.Rows.count - 1
    If ShutResultGrid.Rows[r].Selected Then
      Try MyLibrary.AddFile(LibraryGrid, ShutResultGrid[r, 3].text, QuickMode, True, ShutResultGrid[r, 0].text)
      If Error Then AnERROR = True
    Endif
  Next 'r
  If AnError Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, searchfield.text)
  Endif
  
End

Public Sub ShoutCastGridaddtoplaylist_Click()
  
  Dim r As Integer
  Dim AnERROR As Boolean = False
  Dim QuickMode As Boolean
  
  QuickMode = (MyQuestion.Ask(("How do you want to add?"), ("Add quickly"), ("Get Stream info")) = 1)
  For r = 0 To ShutResultGrid.Rows.count - 1
    If ShutResultGrid.Rows[r].Selected Then
      Try MyPlaylist.AddFile(PlaylistGrid, ShutResultGrid[r, 3].text, QuickMode, True, ShutResultGrid[r, 0].text)
      If Error Then AnERROR = True
    Endif
  Next 'r
  If AnError Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyPlaylist, PlaylistGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  Endif
  
End

Public Sub FilterTextBox_Change()

  Dim previous_search As String = FilterTextBox.text
  Wait 0.5
  If previous_search <> FilterTextBox.text Then Return
  Highlight_shout_results()
  
End

Public Sub Highlight_shout_results()
  
  Dim r, c, c1 As Integer
  Dim savedcolor As Integer ' = ShutResultGrid.background
  
  If Len(FilterTextBox.text) >= 3 Or Trim(FilterTextBox.text) = "" Then
    MyRadio.Alternatecolor(ShutResultGrid)
    For r = 0 To ShutResultGrid.rows.count - 1
      savedcolor = ShutResultGrid[r, 0].background
      For c = 0 To ShutResultGrid.columns.count - 2
        If (ShutResultGrid[r, c].text Like "*" & Trim(FilterTextBox.text) & "*") And (Trim(FilterTextBox.text) <> "") Then
          For c1 = 0 To ShutResultGrid.columns.count - 1
            ShutResultGrid[r, c1].background = color.gradient(ShutResultGrid.Background, Color.red)
          Next 'c1
          Break
        Else
          For c1 = 0 To ShutResultGrid.columns.count - 1
            ShutResultGrid[r, c1].background = savedcolor
          Next 'c1
        Endif
      Next 'c
    Next 'r
  Endif
  
End



Public Sub SearchBox1_Click()
  If Trim(SearchBox1.text) <> "" Then 
    If buttonshoutcast.value Then 
      startshoutSearch()
    Else
      starticesearch()
    Endif
  Endif
End

Public Sub SearchBox1_KeyPress()
  If (KEY.code = Key.return Or KEY.code = Key.enter) Then
    If buttonshoutcast.value Then 
      startshoutSearch()
    Else
      starticesearch()
    Endif
  Endif
End


Public Sub ShutResultGrid_Select()
  
  Try Media_Next_path = ShutResultGrid[ShutResultGrid.row, 3].text
  
End

Public Sub ShutResultGrid_Menu()
  
  Dim tmptext As String
  
  Try tmptext = ShutResultGrid.Current.text
  If Error Then Return
  Shoutcastgridpopup.Popup
  
End

Public Sub GenresTree_Select()
  
  Try Media_Next_path = GenresTree.Current.key
  
End

Public Sub GenresTree_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    GenresTree_Select()
    GenresTree_Activate()
  Endif
  
End

Public Sub GenresTree_Menu()
  
  Dim IsChild As Boolean = False
  'if the item has no parent then refresh it, else play it
  GenresTree.MoveCurrent
  IsChild = Not (GenresTree.moveparent())
  If IsChild Then ShoutcastTreepopup.Popup
  
End

Public Sub ShoutCastTreeAddToLibrary_Click()
  
  Dim QuickMode As Boolean
  
  QuickMode = (MyQuestion.Ask(("How do you want to add?"), ("Add quickly"), ("Get Stream info")) = 1)
  Try MyLibrary.AddFile(LibraryGrid, GenresTree.Current.key, QuickMode, True, GenresTree.Current.text)
  If Error Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, searchfield.text)
  Endif
  
End

Public Sub ShoutCastTreeaddtoplaylist_Click()
  
  Dim QuickMode As Boolean
  
  QuickMode = (MyQuestion.Ask(("How do you want to add?"), ("Add quickly"), ("Get Stream info")) = 1)
  Try MyPlaylist.AddFile(PlaylistGrid, GenresTree.Current.key, QuickMode, True, GenresTree.Current.text)
  If Error Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyPlaylist, PlaylistGrid, fmain.FullyLoaded, SearchfieldPLS.text)
  Endif
  
End

Public Sub CDDANext()
  If cddagrid.row = -1 Then cddagrid.row = 0
  If cddagrid.row = (cddagrid.Rows.count - 1) Then
    Try cddagrid.row = 0
    Global.IsNextSelected = False
  Else
    Try cddagrid.row = cddagrid.row + 1
    Global.IsNextSelected = True
  Endif
  Try cddagrid.Rows[cddagrid.row].selected = True
  If Not mplayer.ProcessRunningOvr() Or (Not global.IsCdaudio(mplayer.getP("fullpath"))) Then 
    play("cdda://") 'device gets added by Play()
  Endif
  mplayer.set_property_mpv("chapter", cddagrid.row)
End

Public Sub CDDAPrev()
  If cddagrid.row = -1 Then cddagrid.row = 0
  If cddagrid.row = 0 Then
    Try cddagrid.row = (cddagrid.Rows.count - 1)
  Else
    Try cddagrid.row = cddagrid.row - 1
  Endif
  Try cddagrid.Rows[cddagrid.row].selected = True
  If Not mplayer.ProcessRunningOvr() Or (Not global.IsCdaudio(mplayer.getP("fullpath"))) Then 
    play("cdda://") 'fixmempv: serve il device?
  Endif
  mplayer.set_property_mpv("chapter", cddagrid.row)
End




Public Sub CHAPTERNext()
  If chaptersgrid.row = -1 Then chaptersgrid.row = 0
  If chaptersgrid.row = (chaptersgrid.Rows.count - 1) Then
    Try chaptersgrid.row = 0
    Global.IsNextSelected = False
  Else
    Try chaptersgrid.row = chaptersgrid.row + 1
    Global.IsNextSelected = True
  Endif
  Try chaptersgrid.Rows[chaptersgrid.row].selected = True
  If Not mplayer.ProcessRunningOvr() Then
    play(chaptersgrid.tag)
  Endif
  mplayer.set_property_mpv("chapter", chaptersgrid.row)
End

Public Sub CHAPTERPrev()
  If chaptersgrid.row = -1 Then chaptersgrid.row = 0
  If chaptersgrid.row = 0 Then
    Try chaptersgrid.row = (chaptersgrid.Rows.count - 1)
  Else
    Try chaptersgrid.row = chaptersgrid.row - 1
  Endif
  Try chaptersgrid.Rows[chaptersgrid.row].selected = True
  If Not mplayer.ProcessRunningOvr() Then
    play(chaptersgrid.tag)
  Endif
  mplayer.set_property_mpv("chapter", chaptersgrid.row)
End







Public Sub DVDNEXT()
  treeview1.movecurrent
  If treeview1.MoveBelow() Then 
    Try treeview1.MoveFirst()
  Endif
  If Not Error Then
    Try treeview1.Item.selected = True
  Endif
  Try Media_Next_path = treeview1.Item.key
  Wait
  TreeView1_Activate()
End

Public Sub DVDPREV()
  treeview1.movecurrent
    If treeview1.MoveAbove() Then Try treeview1.MoveLast()
  If Not Error Then
    Try treeview1.Item.selected = True
  Endif
  Try Media_Next_path = treeview1.Item.key
  TreeView1_Activate()
End


Public Function PopupCddaError() As Boolean
  
  If MyQuestion.Ask(("Cannot access a valid cd audio or Cd device"), ("Configure it"), ("Never mind")) = 1 Then
    GeneralOptions.Show
    GeneralOptions.TabStrip1.index = Global.TabIndexByName(("CD/DVD"), GeneralOptions.TabStrip1)
  Endif
  
End

Public Function PopupDVDError() As Boolean
  
  If MyQuestion.Ask(("Cannot access a valid dvd device"), ("Configure it"), ("Never mind")) = 1 Then
    GeneralOptions.Show
    GeneralOptions.TabStrip1.index = Global.TabIndexByName(("CD/DVD"), GeneralOptions.TabStrip1)
  Endif
  
End



Public Sub MenuCDDA_Click()
  Dim cdtrack, trackname, l As String
  Dim i As Integer  
  'controllare se il dispositivo esiste ed è accessibile, altrimenti mostra messaggio d'errore
  'ed esci.
  If (Exist(GeneralOptions.CDDADeviceText.text)) Then
    If Stat(GeneralOptions.CDDADeviceText.text).Type = gb.Directory Then
      PopupCddaError()
      SetCDDATabVisibility(False)
      Return
    Endif
  Endif
  If (Not (Exist(GeneralOptions.CDDADeviceText.text))) Or (Trim(GeneralOptions.CDDADeviceText.text) = "") Then
    PopupCddaError()
    SetCDDATabVisibility(False)
    Return
  Endif
  
  fmain.mouse = mouse.wait
  CDDAGrid.clear
  CDDAGrid.Rows.count = 1
  CDDAGrid.columns.count = 3
  cddagrid[0, 0].text = ("Please, wait while getting disc information")
  cddagrid.Columns[0].width = -1 'cddagrid.Font.TextWidth("Please, wait while getting disc information")
  SetCddaTabVisibility(True)
  
  
  'play media
  Play("cdda://")
  
  
  CDDAGrid.Header = GridView.Horizontal
  CDDAGrid.Rows.count = 0
  CDDAGrid.columns.count = 3
  CDDAGrid.Columns[0].text = ("Track")
  CDDAGrid.Columns[1].text = ("Name")
  CDDAGrid.Columns[2].text = ("Length")
  CDDAGrid.Clear
  
  i = 1

  For Each cdtrack In mplayer.getP("cddbtracks")
    l = Split(cdtrack, Chr(8), "", False)[1]
    Try l = mplayer.FormatTime(l)
    trackname = Split(cdtrack, Chr(8), "", True)[0]
    
    CDDAGrid.Rows.count = CDDAGrid.Rows.count + 1
    CDDAGrid[CDDAGrid.Rows.count - 1, 0].text = ("cdda://") & i
    CDDAGrid[CDDAGrid.Rows.count - 1, 1].text = trackname
    CDDAGrid[CDDAGrid.Rows.count - 1, 2].text = l
    
    i += 1
  Next
  
  cddagrid.Columns[0].width = cddagrid.Font.TextWidth("cdda://000000")
  cddagrid.Columns[1].width = -1

  Try cddagrid.Rows[cddagrid.row].selected = False
  Try cddagrid.row = 0
  Try cddagrid.Rows[cddagrid.row].selected = True

  fmain.mouse = mouse.normal
  
End





Public Sub CDDAGrid_DblClick()
  Dim r As Integer
  r = cddagrid.row
  If Not mplayer.ProcessRunningOvr() Or (Not global.IsCdaudio(mplayer.getP("fullpath"))) Then 
    play("cdda://") 'device gets added by Play()
  Endif
  Wait
  mplayer.set_property_mpv("chapter", r)

  'Try Media_Next_path = CDDAGrid[CDDAGrid.row, 0].text
  'Play(Media_Next_path)
  SetActivePlayQueue("cdda")
End

Public Sub CDDAGrid_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    CDDAGrid_DblClick()
  Endif
  
End

Public Sub PodcastTree_Menu()
  
  Podcastmenu.popup
  
End

Public Sub Button1_Click()
  
  PodCastMenuNew_Click()
  Try fmain.mypodcast.SavePods(global.confpath & "/mypods.txt", fmain.PodcastTree)
End

Public Sub PodcastTree_Activate()
  
  Dim IsChild As Boolean = False
  'if the item has no parent then refresh it, else play it
  PodcastTree.MoveCurrent
  IsChild = Not (PodcastTree.moveparent())
  If IsChild Then
    If global.IsNetworkURI(PodcastTree.current.key) Then
      Try fmain.Play(PodcastTree.current.key)
    Endif
  Else
    If (PodcastTree.Current.Children = 0) Then
      'TRY mypodcast.Refresh(PodcastTree.Current.key, PodcastTree)
      mypodcast.Refresh(PodcastTree.Current.key, PodcastTree)
      If Error Then
        Message.Error(("Error refreshing the feed"))
        Last.mouse = mouse.default
      Endif
      If (PodcastTree.Current.Children > 0) Then 
        If Not Global.NeedTreeViewWorkaround() Then PodcastTree.Current.Expanded = True
      Endif
    Endif
  Endif
  
End

Public Sub Button4_Click()
  
  mypodcast.Refreshall(PodcastTree)
  
End

Public Sub PodcastTree_KeyPress()
  
  If (key.code = key.delete) And key.shift Then
    Try podcasttree.current.delete
  Endif
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    PodcastTree_Activate()
  Endif
  
End

Public Sub PodcastTree_Drop()
  
  Dim droppedfiles As String[]
  Dim DroppedFile As String
  
  droppedfiles = Split(Drag.Paste("text/uri-list"), "\n\r", "", True)
  For Each DroppedFile In Droppedfiles
    If Trim(DroppedFile) <> "" Then
      droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))
      If global.IsNetworkURI(droppedfile) Then Try mypodcast.Add(droppedfile, PodCastTree)
    Endif
  Next
  Try fmain.mypodcast.SavePods(global.confpath & "/mypods.txt", fmain.PodcastTree)
End

Public Sub PodCastMenuNew_Click()
  
  Dim NewUrl As String = ""
  NewUrl = MyAskName.Ask(("Enter a new podcast url"))
  If Trim(NewUrl) <> "" Then
    Try mypodcast.add(NewUrl, PodcastTree)
    podcasttree.mouse = Mouse.default
    If Error Then
      Message.Error(("Error adding new feed"))
    Endif
  Endif
End

Public Sub PodcastMenuRefresh_Click()
  
  Dim IsChild As Boolean = False
  
  podcasttree.MoveCurrent()
  IsChild = Not (podcasttree.moveparent())
  podcasttree.MoveBack
  If Not IsChild Then
    mypodcast.Refresh(PodcastTree.Current.key, PodCastTree)
  Endif
  
End

Public Sub PodCastMenuDelete_Click()
  
  Dim IsChild As Boolean = False
  
  podcasttree.MoveCurrent()
  IsChild = Not (podcasttree.moveparent())
  podcasttree.MoveBack
  If Not IsChild Then
    Try podcasttree.Current.delete
  Else
    MyQuestion.Ask(("Cannot delete child items!"), "Ok", "")
  Endif
  
End

Public Sub WalkTreePrint()
  'just an example to print all tree items...
  
  podcasttree.movefirst()
  Repeat
    If podcasttree.item.Children > 0 Then
      Print podcasttree.Item.key
      podcasttree.MoveChild()
    Endif
    Print podcasttree.Item.key
  Until podcasttree.MoveBelow()
  
End

Public Sub PodCastMenuDownload_Click()
  
  Dim CurrentUrl, CurrentText As String
  
  Try CurrentUrl = podcasttree.Current.Key
  If Error Then
    Message.Error(("Error: Cannot get current item"), ("Damn!"))
    Return
  Endif
  CurrentText = podcasttree.Current.text & "." & file.Ext(CurrentUrl)
  StreamDownload(CurrentUrl, CurrentText)
  
End

Public Sub PodCastMenuAddLibrary_Click()
  
  podcasttree.movefirst()
  Repeat
    If podcasttree.item.Children > 0 Then podcasttree.MoveChild()
    If podcasttree.Item.selected Then
      If Not (podcasttree.Item.text Like "[*]*") Then
        MyLibrary.AddFile(librarygrid, podcasttree.Item.key, True, True, podcasttree.Item.text)
      Endif
    Endif
  Until podcasttree.MoveBelow()
  GridRefreshWorkaround(librarygrid)
  
End

Public Sub PodCastMenuAddPlaylist_Click()
  
  podcasttree.movefirst()
  Repeat
    If podcasttree.item.Children > 0 Then podcasttree.MoveChild()
    If podcasttree.Item.selected Then
      If Not (podcasttree.Item.text Like "[*]*") Then
        MyPlaylist.AddFile(playlistgrid, podcasttree.Item.key, True, True, podcasttree.Item.text)
      Endif
    Endif
  Until podcasttree.MoveBelow()
  GridRefreshWorkaround(playlistgrid)
  
End

Public Sub LibraryGrid_Enter()

  Application.ShowTooltips = Buttonshowtooltips.value

End

Public Sub PlaylistGrid_Enter()

  Application.ShowTooltips = Buttonshowtooltips.value

End

Public Sub LibraryGrid_Leave()

  Application.ShowTooltips = GeneralOptions.ToolTipsCHK.value

End

Public Sub PlaylistGrid_Leave()

  Application.ShowTooltips = GeneralOptions.ToolTipsCHK.value

End

Private Sub HideScrollbars(librarygrid As Gridview)

  librarygrid.Scrollbar = Scroll.none
  Wait
  GridPanels_Arrange() 'pre

End

Private Sub ShowScrollbars(librarygrid As Gridview)

  librarygrid.Scrollbar = Scroll.both
  GridRefreshWorkaround(librarygrid)

End

Public hirow As Integer = -1

Public Sub ChengeToggleColor(Tbutton As Object)
  
  If Tbutton.value Then
    Tbutton.BackGround = Color.Blend(Color.Blend((Tbutton.BackGround), Color.red), Tbutton.BackGround)
  Else
    Tbutton.BackGround = Tbutton.Parent.Background
  Endif
  
End

Public Sub ShufflePls_Click()
  
  If ShutPLS.Checked And ShufflePls.value Then
    Message.Warning(("Please, disable playlist shutdown option first!"))
    ShufflePls.value = False
  Else
    If ShufflePls.value Then TogglePls.value = True
  Endif
  
End

Public Sub MenuLibrarySearchAlbum_Click()
  
  
  
End


Public Sub MenuLibrarySetCover_click()

  Dim artist, album, filepath As String
  With librarygrid
    If .row < 0 Then 
      Message.Error(("Nothing selected!"))
      Return
    Endif
    Artist = librarygrid[.row, MyLibrary.ColumnIndex["Artist"]].text
    Album = librarygrid[.row, MyLibrary.ColumnIndex["Album"]].text
    filepath = librarygrid[.row, MyLibrary.ColumnIndex["Full Path"]].text
  End With
  covermanager.SetACover(filepath, Artist, Album, True)

End

Public Sub MenuUpdateCover_click()

  UpdateCoverFromSelected(librarygrid, mylibrary)

End

Public Sub MenuEmbeddedCoversPls_click()
Stop
  UpdateCoverFromSelected(playlistgrid, myplaylist)
End

Public Sub MenuPlsSetCover_click()

  Dim artist, album, filepath As String
  With playlistgrid
    If .row < 0 Then 
      Message.Error(("Nothing selected!"))
      Return
    Endif
    Artist = playlistgrid[.row, Myplaylist.ColumnIndex["Artist"]].text
    Album = playlistgrid[.row, Myplaylist.ColumnIndex["Album"]].text
    filepath = playlistgrid[.row, Myplaylist.ColumnIndex["Full Path"]].text
  End With
  covermanager.SetACover(filepath, Artist, Album, True)

End

Public Sub UpdateCoverFromSelected(mygrid As Gridview, mylibrary As Playlistclass)
  Dim r As Integer
  Dim coverfilename As String
  Dim fullpath, album, artist As String
  If MyQuestion.Ask(("xt7 will try to update the cover,\nBeware that covers set by you will be lost."), "Ok", "Cancel") = 2 Then Return
  mygrid.mouse = mouse.wait
  mygrid.enabled = False
  For r = 0 To mygrid.rows.count - 1
    If mygrid.Rows[r].Selected Then
       fullpath = mygrid[r, myplaylist.Columnindex["Full Path"]].text
      coverfilename = covermanager.Coverfile("", "", fullpath) 'generate a coverfilename using just filename (not album/artist)
       covermanager.RemoveCoverCache(coverfilename, True)
      
      artist = mylibrary.CellValue(mygrid, r, mylibrary.ColumnIndex["Artist"])
      album = mylibrary.CellValue(mygrid, r, mylibrary.ColumnIndex["Album"])  
      coverfilename = covermanager.Coverfile(artist, album, fullpath) 'generate a coverfilename using album/artist
      Try covermanager.RemoveCoverCache(coverfilename, True)
    
      covermanager.UnMarkUncovered(fullpath) 'unvalidate uncovered state
      
      mygrid[r, 0].text = ""
      mygrid[r, 0].Clear
    Endif
  Next 'r
  mygrid.mouse = mouse.Default
  mygrid.enabled = True

End

Public ForcedAspectRT As String = "default"

Public Sub AspectDefaultmenu_Click()
  
  mplayer.set_property_mpv("video-aspect", "2.35")
  ForcedAspectRT = "2.35"
  CorrectAreaAspect()
  
End

Public Sub Aspect1menu_Click()
  
  mplayer.set_property_mpv("video-aspect", "1.7778")
  ForcedAspectRT = "1.7778"
  CorrectAreaAspect()
  
End

Public Sub Aspect10menu_Click()
  
  mplayer.set_property_mpv("video-aspect", "1.6")
  ForcedAspectRT = "1.6"
  CorrectAreaAspect()
  
End

Public Sub Aspect11menu_Click()
  
  mplayer.set_property_mpv("video-aspect", "1.6")
  ForcedAspectRT = "1"
  CorrectAreaAspect()
  
End

Public Sub Aspect2menu_Click()
  
  mplayer.set_property_mpv("video-aspect", "1.3333")
  ForcedAspectRT = "1.3333"
  CorrectAreaAspect()
  
End

Public Sub AspectOtherMenu_Click()
  
  Dim ExAr As String
  
  ExAr = mplayer.get_property_mpv("video-aspect")
  ChooseAspect.show
  Repeat
    Wait 0.1
  Until ChooseAspect.visible = False
  If ChooseAspect.choice <> "-1" Then
    mplayer.set_property_mpv("video-aspect", ChooseAspect.choice)
    ForcedAspectRT = ChooseAspect.choice
  Else
    ForcedAspectRT = ExAr
    mplayer.set_property_mpv("video-aspect", ExAR)
  Endif
  CorrectAreaAspect()
  
End

Public Sub ButtonUp_Click()
  Object.Lock(urlbox)
  If String.Right(FileView1.dir, 1) = "/" Then FileView1.dir = String.Left(FileView1.dir, Len(FileView1.dir) - 1)
  FileView1.dir = File.dir(FileView1.dir)
  urlbox.text = Replace(FileView1.dir, "//", "/")
  Wait
  gridpanels_arrange()
  Object.unLock(urlbox)
End

Public Sub ButtonRefresh_Click()
  fileview1.UnselectAll()
  global.myDebug(fileview1.dir)
  fileview1Myreload()
End

Public Sub Buttonviewmenu_Click()
  viewmenu.popup
End


Public Sub view_menu_check_item_click()
  apply_view_menu()
  save_view_menu()
End


Public Sub apply_view_menu()
  FileView1.ShowHidden = menu_show_hidden_files.Checked
  If menu_show_only_media.Checked Then
    fileview1.filter = Split(global.ALLFilters, ";")
      Else
    fileview1.Filter = ["*"]
  Endif
  fileview1Myreload()
  Wait
  gridpanels_arrange()
End



Private Sub save_view_menu()
  Dim sSettings As String
  sSettings &= "showrecent=" & menu_show_recent.Checked & "\n"
  sSettings &= "showhidden=" & menu_show_hidden_files.checked & "\n"
  sSettings &= "showmedia=" & menu_show_only_media.checked & "\n"
  File.Save(global.ViewMenufile, sSettings)
End

Private Sub load_view_menu()
  Dim sSettings, l, s, p As String
  Dim bP As Boolean
  If Exist(global.ViewMenufile, True) Then
    Try sSettings = File.Load(global.ViewMenufile)
    If Error Then Return
    For Each l In Split(sSettings, "\n", "", True)
      s = Split(l, "=")[0]
      p = Split(l, "=")[1]
      bP = False
      If p = "T" Then bP = True
      Select Case s
        Case "showrecent"
           menu_show_recent.Checked = bP
        Case "showhidden"
          menu_show_hidden_files.checked = bP
        Case "showmedia"
           menu_show_only_media.checked = bP
      End Select
    Next 's
  Endif
End


Public Sub find_play_Click()
  Dim fp As String
  If mplayer.ProcessRunningOvr() Then
    fp = mplayer.getP("fullpath")
    ShowBrowseTabTo(fp, False)
  Endif  
End


Public Sub ActivateFile(fullpathitem As String)
  Dim selecteditem As String
  Try selecteditem = FileView1.Selection[0]
  If IsDir(fullpathitem) Then
    FileView1.dir = fullpathitem
    Wait
    gridpanels_arrange()
    urlbox.text = Replace(FileView1.dir, "//", "/")
    If String.Right(urlbox.text, 1) = "/" Then urlbox.text = String.Left(urlbox.text, Len(urlbox.text) - 1)
  Else
    If Not global.isimgfile(fullpathitem) Then ComboHistory.AddHistory(urlbox, FileView1.dir)
    Try fileview1.current = selecteditem
    SetActivePlayQueue("browse")
    Play(fullpathitem)
  Endif
  
End

Public Sub FileView1_Activate()
  Dim fullpathitem As String = Replace(FileView1.dir & "/" & FileView1.Current, "//", "/")
  ActivateFile(fullpathitem)
  fileview1Myreload()
End

Public Sub Urlbox_KeyPress()
  
  If (key.code = key.enter) Or (key.code = key.Return) Then
    If Urlbox.text <> FileView1.dir Then
      FileView1.dir = Urlbox.text
      Wait
      gridpanels_arrange()
    Endif
  Endif
  
End

Public Sub FileView1_Icon(Path As String)
  Dim sep As String = Chr(8)
  Dim r As String
  Dim iconsize As Integer = FileView1.Font.TextHeight("|èJj")
  
  If Not fmain.fullyloaded Then Return 
  
  If fileview1.visible = False Then Return
  If IsDir(path) Then
    FileView1.icon = stock[CStr(iconsize) & "/directory"]
    Return
  Endif
  
  FileView1.icon = covermanager.DefaultLibraryIcon(path, iconsize, True)
  
  'mark recent files?
  If menu_show_recent.checked Then
    If global.IsMediaFile(path) Then
      For Each r In historyarray
        r = Split(r, sep)[0]
        If path = r Then 
            fileview1.icon = stock[iconsize & "/ok"]
          Break
        Endif
      Next
    Endif
  Endif  
End


Public Sub ItemsFromBrowseTo(theplaylist As Playlistclass, thegrid As Gridview, filterstring As String)

  Dim nulllistbox As New ListBox(zzzfake)
  Dim selecteditem As String
  Dim StatType As Integer
  Dim t1 As Float = Timer()

  For Each selecteditem In FileView1.Selection
    SelectedItem = Replace(FileView1.dir & "/" & selecteditem, "//", "/")
    If Exist(selecteditem, True) Then
      StatType = Stat(selecteditem, True).type
      If StatType = gb.file Then
        theplaylist.AddFile(thegrid, SelectedItem, False, False)
        'UpdateSearchResults(theplaylist, thegrid, filterstring)
      Else If StatType = gb.Directory Then
        If MyQuestion.Ask(("Are you sure you want to recursively add this directory?\n") & selecteditem, ("Add"), ("Cancel")) = 1 Then
          thegrid.enabled = False
          Fileview1.enabled = False
          'theplaylist.AddDir(librarygrid, selecteditem, nulllistbox)
          theplaylist.AddDir(thegrid, selecteditem, nulllistbox)
          Fileview1.enabled = True
          thegrid.enabled = True
          'UpdateSearchResults(theplaylist, thegrid, filterstring)
        Endif
      Endif
    Endif
    Wait
  Next 'selecteditem
  UpdateSearchResults(theplaylist, thegrid, filterstring)
  global.myDebug(Timer() - t1)
End

Public Sub menubrowseaddtolibrary_Click()

  Try MyAlbumsLib.Init(mylibrary, AlbumGridView, searchfieldalbums.text)
  ItemsFromBrowseTo(mylibrary, librarygrid, Searchfield.text)
  If Error Then global.myDebug("Error while initializing albums view")
  Try MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
  If Error Then global.myDebug("Error while Arranging albums view")

End

Public Sub menubrowseaddtoplaylist_Click()

  ItemsFromBrowseTo(myplaylist, playlistgrid, SearchfieldPLS.text)

End

Public Sub FileView1_Menu()
  Dim selecteditem As String
  Wait 'needed to allow the item to be selected on right click
  Try SelectedItem = Replace(FileView1.dir & "/" & FileView1.selection[0], "//", "/")
  MenuAddToHistory.Enabled = IsDir(selecteditem)
  MenuBrowseDelete.Enabled = Not (IsDir(selecteditem))
  Menubrowse.popup
End

Public Sub MenuBrowseOpenContaining_Click()
  
  Dim selecteditem As String
  
  SelectedItem = Replace(FileView1.dir & "/" & FileView1.current, "//", "/")
  If IsDir(selecteditem) Then
    desktop.open(Selecteditem)
  Else
    desktop.open(FileView1.dir)
  Endif
  
End

Public Sub UrlBox_Click()
  
  If Trim(Urlbox.text) = "" Then Urlbox.text = "/"
  FileView1.dir = Urlbox.text
  Wait
  gridpanels_arrange()
End

Public Sub MenuAddToHistory_Click()
  
  Dim selecteditem As String
  
  SelectedItem = Replace(FileView1.dir & "/" & FileView1.current, "//", "/")
  If IsDir(selecteditem) Then ComboHistory.AddHistory(urlbox, selecteditem)
  
End

Public Sub MenuBrowseDelete_Click()

  Dim selecteditem As String
  Dim therewasanerror As Boolean = False
  If (MyQuestion.ask(("Are you sure you want to delete selected item(s) from disk?"), ("Don't Delete"), ("Yes, Delete")) <> 2) Then Return

  For Each selecteditem In FileView1.Selection 
    selectedItem = Replace(FileView1.dir & "/" & selecteditem, "//", "/")
    If Exist(selecteditem, True) Then
      If Not (IsDir(selecteditem)) Then        
        Try Kill selecteditem
        If Not Error Then
          myplaylist.DeleteFromPath(selecteditem, playlistgrid)
          mylibrary.DeleteFromPath(selecteditem, librarygrid)
        Else
          therewasanerror = True
        Endif
      Endif
    Endif
  Next 'selecteditem
  fileview1.UnselectAll()
  fileview1Myreload()
  If therewasanerror Then Message.Error(("There was an error while trying to delete the item"), ("Ok"))
End

Public hAsyncClient As HttpClient

Private Sub YTPanel_myrefresh()
  Dim AR As Float = 1.3333333
  Try AR = zzzfake.ytpic.tag
  zzzFake.YTPanel.Move(0, 0, outerbox.w, outerbox.h)
  'zzzfake.ytpic.w = zzzfake.ytpic.parent.w
  zzzfake.ytpic.h = CInt(zzzfake.ytpic.Picture.w / 1.333333)
  
  
   zzzfake.vbox7.w = zzzfake.ytpic.Picture.w
   zzzfake.vbox6.w = zzzfake.YTPanel.w - zzzfake.vbox7.w - (Desktop.scale * 2)

End




Public Sub ShowYtBox(infos As Variant)
  Dim yt_item As YoutubeItem = infos
  Dim dfile As String = Temp()
  Dim o As Object = fmain.outerbox
  Dim sW As Integer
  
  sW = Screenbypos(o.screenx + (o.w Div 2), o.screeny + (o.h Div 2)).W
  zzzfake.YTText.Font.size = CInt(sW / 66)
  zzzfake.YTDesc.Font.size = CInt(sW / 89)
  
  zzzfake.ytpic.Picture = Picture["black.png"]
  Wait

  'make 4:3 space for the pic:
  'zzzfake.ytpic.w = zzzfake.ytpic.parent.w
  zzzfake.ytpic.h = CInt(zzzfake.ytpic.Picture.w / 1.333333)

  'title text
  zzzfake.YTText.text = yt_item.title

  'description text
  zzzfake.YTDESC.text = yt_item.description

  'zzzfake.Spinner1.start

  'show
  If zzzFake.YTPanel.parent <> outerbox Then zzzFake.YTPanel.Reparent(outerbox)
  zzzFake.YTPanel.Move(0, 0, outerbox.w, outerbox.h)
  zzzFake.YTPanel.raise()
  
  
  'defer image download
  HAsyncClient = New HttpClient As "hAsyncClient"
  hAsyncClient.URL = yt_item.thumbnail_big
  hAsyncClient.TimeOut = 5
  hAsyncClient.Async = True
  hAsyncClient.TargetFile = dfile
  hAsyncClient.Get()

End

Public Sub hAsyncClient_Finished()
  Dim AR As Float
  Dim tmppic As Picture

  zzzfake.ytpic.Stretch = False
  Try tmppic = Picture.Load(Last.TargetFile)
  If Not Error Then
    AR = tmppic.Image.w / tmppic.Image.h
    zzzfake.ytpic.tag = AR
    zzzfake.ytpic.Picture = tmppic
    'zzzfake.ytpic.w = zzzfake.ytpic.parent.w
    zzzfake.ytpic.h = CInt(zzzfake.ytpic.Picture.w / AR)
    Wait
  Endif
  Try Kill Last.TargetFile
  YTPanel_myrefresh()
  'zzzfake.YTPanel_Arrange()
End


Public Sub youtubeTree_Activate()
  Dim yt_item As YoutubeItem
  Dim video_url, query, pagetoken, parentkey As String
  Dim more_text As String
  Dim current_key As String
  fmain.mouse = mouse.wait
  'if is custom_search_results node, populate it
  If youtubetree.Current.key = "custom_search_results" Then
    youtube_custom_search()
    Goto returnlabel
  Endif

  'if is a network uri, them play it
  youtubeTree.MoveCurrent
  Try yt_item = youtubetree.tag[youtubeTree.current.key]
  Try video_url = yt_item.playurl
  If video_url <> "" Then
    If global.IsNetworkURI(video_url) Then
      ShowYtBox(youtubetree.tag[youtubeTree.current.key])
      SetActivePlayQueue("youtube")
      play(video_url)
      Try customtitle = yt_item.title
      Goto returnlabel
    Endif
  Endif

  'is not a network uri.
  'if is a moreresult link, search for more results
  If InStr(youtubetree.Current.key, "__MORERESULTS__") Then
    'more_text = InStr(youtubetree.Current.key,&q)
    Try query = Right(Split(Right(youtubetree.Current.key, -InStr(youtubetree.Current.key, "&q=")), "&")[0], -2)
    If Error Then 
      global.myDebug("error")
      Goto returnlabel
    Endif
    pagetoken = Split(youtubetree.Current.key, Chr(8))[2]
    parentkey = youtubetree.Current.ParentKey

    Try youtubetree.MoveAbove
    Try current_key = youtubetree.Item.Key
    Try youtubetree.Movebelow

    youtubetree.Current.Delete()
    Try Youtube.GetResults(youtubetree, parentkey, youtube_query_opts(), pagetoken,, (desktop.h Div 12))
    Try youtubetree[current_key].Selected = True
    Goto returnlabel
  Endif


  ReturnLabel:
  fmain.mouse = mouse.normal
End


Public Struct YoutubeItem
  duration As Integer
  published As String
  channelId As String
  channeltitle As String
  title As String
  description As String
  thumbnail As String
  thumbnail_big As String
  playurl As String
End Struct

Public Sub youtubetree_Select()
  Dim yt_item As YoutubeItem
  Dim video_url As String
  Dim IsChild As Boolean = False
  'if the item has no parent then refresh it, else play it
  youtubeTree.MoveCurrent
  Try yt_item = youtubetree.tag[youtubeTree.current.key]
  Try video_url = yt_item.playurl
  
  IsChild = Not (youtubeTree.moveparent())
  If IsChild Then
    If video_url <> "" Then
      If global.IsNetworkURI(video_url) Then
        Try fillyoutubeinfo(yt_item)
        If Not mplayer.ProcessRunningOvr() Then ShowYtBox(yt_item)
      Endif
    Endif
  Endif

  Try Media_Next_path = video_url
  Try YouVideoInfo.w = scrollviewyt.w - 64

End


Public Sub YouSearchfield_Activate()
  youtube_custom_search()
End

Public Sub buttonstartytsearch_Click()
  youtube_custom_search()
End

Public Sub fillyoutubeinfo(ytitem As YoutubeItem)
  
  Dim title, category, description, published, updated, author, seconds As String
  Dim outtext As String = ""
  Dim ytsite As String 

  'Try updated = Youtube.feedsinfo[videoid & ".updated"] 'fixme?
  'Try category = ytitem.category 'fixme?
  Try title = ytitem.title
  Try seconds = mplayer.FormatTime(ytitem.duration)
  Try description = ytitem.description
  Try published = ytitem.published
  Try author = ytitem.channeltitle
  Try ytsite = ytitem.playurl

  YouVideoInfo.w = scrollviewyt.w - 64

  'outtext = outtext & "<b>Category:</b> " & category & "<br>"
  'outtext = outtext & "<b>Updated:</b> " & updated & "<br>"
  outtext = outtext & "<font color='white'>"
  outtext = outtext & "<b>Title:</b> " & title & "<br>"
  outtext = outtext & "<b>Link:</b> "
  outtext = outtext & "<font color='#8888FF'>"
  outtext = outtext & "<u>" & ytsite & "</u><br>"
  outtext = outtext & "</font>"
  outtext = outtext & "<b>Author:</b> " & author & "<br>"
  outtext = outtext & "<b>Published:</b> " & published & "<br>"
  outtext = outtext & "<b>Duration:</b> " & seconds & "<br>"
  outtext = outtext & "<b>Description:</b><br> " & description & "<br>"
  outtext = outtext & "</font>"
  outtext = Replace(outtext, "\n", "<br>")
  YouVideoInfo.tag = ytsite
  YouVideoInfo.text = outtext
  YouVideoInfo.visible = True
  blinktimer.start

End

Private blinknum As Integer = 0

Public Sub blinktimer_Timer()
  
  If blinknum < 4 Then
    If Not scrollviewyt.visible Then
      If buttondetail.background = Color.default Then
        buttondetail.background = Color.red
        blinknum = blinknum + 1
      Else
        buttondetail.Background = Color.default
      Endif
    Endif
  Else
    buttondetail.Background = Color.default
    blinktimer.stop
  Endif
  
End

Public Sub SpinBoxmaxresults_KeyPress()
  
  If ((key.code = key.enter) Or (key.code = key.return)) Then youtube_custom_search()
  
End

Public Sub YouVideoInfo_MouseDown()
  If MyQuestion.Ask(("Would you like to go to the video homepage?"), ("Yes, Go to Youtube"), ("No, thanks")) = 1 Then
    Shell "xdg-open '" & YouVideoInfo.tag & "'"
    'desktop.Open(ytsite)
  Endif
End

Public Sub YouVideoInfo_Enter()
  
  Last.mouse = mouse.Pointing
  
End


Public Sub youtube_custom_search()
   fmain.mouse = mouse.wait
   YouSearchfield.mouse = Mouse.wait  'bah...
   youtube = New Youtubeclass(youtubetree)
   youtubetree.Tag = Null
   ComboHistory.AddHistory(yousearchfield, yousearchfield.text)
   Youtube.GetResults(youtubetree, "custom_search_results", youtube_query_opts(),,, (desktop.h Div 12))
   fmain.mouse = mouse.Default
   YouSearchfield.mouse = Mouse.default 'bah...
End


Private Function youtube_query_opts() As String
  Dim query As String
  Dim MaxResults As Integer
  Dim SortBy As String
  Dim date_start, date_end As String
  Dim region As String
  Dim Author As String  
  Dim opts As String

  'https://developers.google.com/youtube/v3/docs/search/list#try-it

  query = global.urlencode(YouSearchfield.Text)
  MaxResults = SpinBoxmaxresults.value
  SortBy = ComboBoxOrderBy.text
  date_start = "" 'fixme
  date_end = "" 'fixme
  Try region = Trim(Split(ComboBoxRegion.text, ":", "", True)[1])
  Author = TextBoxUploader.text
  
  If query <> "" Then opts &= "&q=" & query
  opts &= "&maxResults=" & maxresults
  If SortBy <> "" Then opts &= "&order=" & SortBy
  If Trim(Author) <> "" Then opts &= "&channelId=" & youtube.ChannelIdFromName(Author)
  If Trim(region) <> "" Then 
    opts &= "&regionCode=" & region
    opts &= "&relevanceLanguage=" & region
  Endif
  Return opts
End


Public Sub youtubetree_Menu()
  
  Dim IsChild As Boolean = False
  'if the item has no parent then refresh it, else play it
  youtubetree.MoveCurrent
  If youtubetree.Current = Null Then Return
  If youtubetree.Current.Key Like "__MORERESULTS__*" Then Return
  
  IsChild = Not (youtubetree.moveparent())
  'IF IsChild THEN youtubetreepopup.Popup
  YtRefresh.enabled = Not (ischild) And (Not (youtubetree.Current.key = "related"))
  YoutubeTreeTreeGetRelatedMenu.Enabled = ischild
  YoutubetreeTreeaddtoLibrary.enabled = ischild
  YoutubetreeTreeaddtoplaylist.enabled = ischild
  youtubetreeDownload.Enabled = ischild
  'youtubeappendmenu.enabled = (Not ischild) And (youtubetree.Current.children > 0)
  youtubetreepopup.Popup
  
End


Public Sub YoutubeTreeTreeGetRelatedMenu_click(Optional myappend As Boolean = False)
  Dim IsChild As Boolean = False
  Dim relatedtotext As String
  youtubetree.MoveCurrent
  IsChild = Not (youtubetree.moveparent())
  youtubetree.MoveBack()
  If ischild Then
    fmain.mouse = mouse.wait
    Leftsidetabs.mouse = mouse.wait
    Try relatedtotext = Split(youtubetree.Current.text, "\n", "", True)[0]
    If Error Then relatedtotext = youtubetree.Current.text
    Youtube.GetRelated(youtubetree.Current.key, youtubetree, relatedtotext, youtube_query_opts(), (Desktop.h Div 12))
    fmain.mouse = mouse.default
    Leftsidetabs.mouse = mouse.default
  Endif
End

Public Sub YoutubetreeTreeaddtoLibrary_Click()
  Dim QuickMode As Boolean
  Dim yUrl As String 
  Dim yItem As YoutubeItem
  Try yItem = youtubetree.tag[youtubetree.current.key]
  Try yUrl = yItem.playurl
  If Error Then 
    Message.Error("Failed.\nMissing video url")
    Return
  Endif

  QuickMode = True
  Try MyLibrary.AddFile(librarygrid, yUrl, QuickMode, True, youtubetree.Current.text)
  If Error Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(MyLibrary, LibraryGrid, fmain.FullyLoaded, searchfield.text)
  Endif

End

Public Sub YoutubetreeTreeaddtoPlaylist_Click()
  Dim QuickMode As Boolean
  Dim yUrl As String 
  Dim yItem As YoutubeItem
  Try yItem = youtubetree.tag[youtubetree.current.key]
  Try yUrl = yItem.playurl
  If Error Then 
    Message.Error("Failed.\nMissing video url")
    Return
  Endif

  QuickMode = True
  Try myplaylist.AddFile(playlistgrid, yUrl, QuickMode, True, youtubetree.Current.text)
  If Error Then
    MyQuestion.ask(("Error while adding one or more items"), ("Damn!"), "")
  Else
    UpdateSearchResults(Myplaylist, playlistGrid, fmain.FullyLoaded, SearchFieldPLS.text)
  Endif
End

Private last_yt_dir As String = ""

Public Sub youtubetreeDownload_Click()
  Dim CurrentUrl, StreamDownloadDir, cmd As String
  Dim script As String = Temp()
  
  Try CurrentUrl = youtubetree.tag[youtubeTree.current.key].playurl
  If Error Then
    Stop
    Try CurrentUrl = youtubetree.Current.Key
  Endif
 
  
  If Error Then
    Message.Error(("Error: Cannot get current item"))
    Return
  Endif
  If last_yt_dir <> "" Then 
    Dialog.Path = last_yt_dir
      Else
    Dialog.path = User.Home
  Endif
  If Dialog.SelectDirectory() Then Return
  last_yt_dir = Dialog.Path
  StreamDownloadDir = last_yt_dir
  cmd = "youtube-dl '" & CurrentUrl & "'"
  cmd &= " -o '" & StreamDownloadDir & "/%(title)s.%(ext)s" & "'"
  cmd &= " --format=" & youtube.ytdl_format_opt(Left(generaloptions.Youtubeformat.text, -1), (generaloptions.RequestAVC1Checkbox.value = CheckBox.true))  
  Try File.Save(script, cmd)
  
  If Error Then Goto return_file_error
  Try Chmod script To "rwxr-x---"
  If Error Then Goto return_file_error
  cmd = global.terminal_cmdline(global.find_term(), script)
  global.myDebug(cmd)
  Shell cmd
  return_file_error:
  Debug "file_error"
End


Public StreamDownloadDir As String = ""

Public Sub StreamDownload(url As String, Optional suggestname As String = "")
  
  Dim dest, commandline, destdir, destfile As String
  
  If Trim(StreamDownloadDir) = "" Then StreamDownloadDir = User.Home
  suggestname = Replace(suggestname, ":", ".")
  suggestname = Replace(suggestname, "/", "_")
  suggestname = Replace(suggestname, "\"", " ")
  suggestname = Replace(suggestname, "'", " ")
  
  Dialog.filter = [global.videofilter & global.UncommonVideoFilters, global.videofiltername, "*", ("All files")]
  
  Dialog.Path = StreamDownloadDir & "/" & suggestname
  If Dialog.SaveFile() Then Return
  StreamDownloadDir = file.dir(Dialog.Path)
  If Trim(GeneralOptions.DownloaderCombobox.text) = "" Then GeneralOptions.DownloaderCombobox.text = "xterm -e wget %url -O %dest"
  destdir = Requote(file.Dir(Dialog.path))
  destfile = Requote(file.name(Dialog.path))
  dest = Requote(dest)
  url = Requote(url)
  
  commandline = Replace(GeneralOptions.DownloaderCombobox.text, "%url", url)
  commandline = Replace(commandline, "%destdir", destdir)
  commandline = Replace(commandline, "%destfile", destfile)


  global.myDebug(commandline)
  Shell commandline
  
End

Public Sub buttondetail_Click()
  Dim t As Integer
  Dim numlines As Integer = 10 'how many lines to show in yt panel?

  If scrollviewyt.visible Then 
    scrollviewyt.visible = False
    Return
  Endif
  scrollviewyt.visible = True
  YouVideoInfo.w = scrollviewyt.w - 64
  t = Round((YouVideoInfo.Font.TextHeight("|") * numlines * 1.3) / vsplit1.h * 100)
  vsplit1.layout = [100 - t, t]

End

Public Sub youtubetree_KeyPress()
  
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    youtubetree_Activate()
  Endif
  
End

Public Sub TextBoxUploader_activate()
  youtube_custom_search()
End



Public Sub Form_DblClick()
  
End

Public Sub MenuShowDVBT_Click()
  
  DVBTuner.show
  
End

Public Sub ScanBtn_Click()

  If (Not global.initearlyformsdone) Then global.DelayLoadStates_Timer
  DVBTuner.show

End

'Public fakesplit As New Panel(zzzfake) As "Fakesplit"

' Public Sub Fakesplit_Enter()
'   Last.mouse = mouse.SplitH
' End

' Public Sub Fakesplit_Leave()
'   Last.mouse = mouse.default
'   fakesplit.hide
' End

' Public Sub Fakesplit_MouseMove()
'   Dim delta As Integer
'   delta = fakesplit.screenx - fakesplit.x 
'   fakesplit.x = mouse.screenx - delta
' End
' 
' Public Sub FakeSplitRefresh()
'   Dim splitterw As Integer = hsplit1.w - (hsplit1.Layout[0] + hsplit1.Layout[1])
'   Dim tmplayout As Integer[] = hsplit1.layout
'   tmplayout[1] = (hsplit1.w - fakesplit.x - splitterw)
'   tmplayout[0] = (hsplit1.w - tmplayout[1] - splitterw)
'   hsplit1.Layout = tmplayout
'   Hsplit1_MyRefresh()
' End
' 
' Public Sub Fakesplit_MouseUp()
'   FakeSplitRefresh()
' End


Public Sub HSplit1_Resize()
  Dim prevlayout As Integer[]
  bp.ignore = True
  bp.move(0, 0, outerbox.w, outerbox.h)
  bp.show
  videobox.lower
  videobox.hide
  thumblebox.hide


  prevlayout = hsplit1.Layout
  Wait 0.025
  If hsplit1.Layout.count > 0 Then
    If prevlayout.count > 0 Then
      If prevlayout[0] <> hsplit1.layout[0] Then Return    
    Endif
  Endif
  

  timerhideshowvideo.start

End


 Public Sub timerhideshowvideo_Timer()
  Dim prevlayout As Integer[]
  Dim xy As Integer

  If Not fmain.fullyloaded Then Return

  timerhideshowvideo.stop
  prevlayout = hsplit1.Layout
  If Not fsform.fullscreen Then
    If (rightsidepanel.width < 480) Then
      If (BottomVbox.Parent.name <> "FMain") Then 
        BottomVbox.Reparent(fmain)
      Endif
    Else
      If (BottomVbox.Parent.name <> "RightSidePanel") And (Not (fsform.FullScreen)) Then
          BottomVbox.Reparent(RightSidePanel)
      Endif
    Endif
    hsplit1.Layout = prevlayout
  Endif
  
  'If firstplay = True Then Wait 1
  Hsplit1_MyRefresh()

  videobox.show
  Wait 0.025
  Wait 0.025
  
  bp.hide

  ' 'prevent glitches near the hsplit border
  ' If Not fsform.fullscreen Then 
  '   xy = videobox.x
  '   Wait
  '   videobox.x = 20
  '   Wait
  '   videobox.x = xy
  '   Wait
  '   Hsplit1_MyRefresh  
  '     Else
  '   xy = videobox.y
  '   videobox.y = 20
  '   Wait
  '   videobox.y = xy
  '   Wait
  ' Endif

End


Public Sub ShadeList(brother As Object, Optional dltx As Integer = 0, Optional dlty As Integer = 0)
  If Not fmain.fullyloaded Then Return
  If ((brother.x + brother.y) < 0) Then Return
  shadeup.x = brother.x + dltx 
  Try shadeup.y = brother.clienty + brother.Columns.Height + dlty
  If Error Then Try shadeup.y = brother.clienty + dlty
  Try shadeup.w = brother.clientw + 2
End

Public Sub GridPanels_BeforeArrange()
  If Not fmain.FullyLoaded Then Return
  If Lower(shadeup.parent.name) <> Lower(Last.name) Then shadeup.Reparent(Last)
  shadeup.visible = True
  ' shadelow.Reparent(Last)

End

Public Sub GridPanels_Arrange()

  Dim brother As Object
  Dim newsize As Integer = 9
  Dim achild_up, achild As Object

  '  If Not (fmain.fullyloaded) Then Return
  
  For Each brother In shadeup.Parent.Children 
    If (brother Is Gridview) Or (brother Is Fileview) Then Break
  Next
  
  If brother Is Gridview Then 
    Try newsize = CInt(brother.Rows[1].h / 4) 
      If newsize > 9 Then newsize = 9
      Try shadeup.h = newsize
      shadelist(brother)
      Else If brother Is Fileview Then
        For Each achild_up In brother.Children
          If achild_up Is Panel Then
            For Each achild In achild_up.children        
              If achild Is Columnview Then
                If achild.proxy Is Gridview Then
                  newsize = CInt(brother.Font.TextHeight("|") / 2.5) 
                  If newsize > 9 Then newsize = 9
                  Try shadeup.h = newsize
                  shadelist(achild.proxy, Object.GetProperty(brother.Parent, "padding") + achild.proxy.clientx - 1, brother.y - 1)
                  If fmain.fullyloaded Then shadeup.visible = True
                Endif
              Endif
            Next 'achild
          Endif
          
        Next'achild_up
  Endif


End

' Public Sub HSplit1_MouseMove()
'   If SwitchingFullScreen Then Return
'   If (fakesplit.parent.name <> Me.name) Then fakesplit.Reparent(fmain)
'   Object.Attach(fakesplit, fmain, "fakesplit")
'   fakesplit.Background = color.selectedbackground
'   Try fakesplit.x = hsplit1.Layout[0]
'   If Error Then Return
'   fakesplit.border = border.none
'   fakesplit.x = hsplit1.Layout[0]
'   fakesplit.Ignore = True
'   fakesplit.x = hsplit1.Layout[0]
'   fakesplit.w = hsplit1.w - (hsplit1.Layout[0] + hsplit1.Layout[1]) 
'   If fmain.menus.visible Then
'     fakesplit.y = hsplit1.screeny - fmain.screeny - fmain.font.TextHeight("|JIq") - desktop.scale
'       Else
'     fakesplit.y = hsplit1.screeny - fmain.screeny 
'   Endif
'   fakesplit.h = hsplit1.h 
'   fakesplit.raise
'   fakesplit.visible = True
'   fakesplit.SetFocus()
' End

' Public Sub Fakesplit_DblClick()
'   Dim splitterw As Integer = hsplit1.w - (hsplit1.Layout[0] + hsplit1.Layout[1])
'   Dim tmplayout As Integer[] = hsplit1.layout
'   If hsplit1.Layout[0] > 20 Then
'     tmplayout[1] = (hsplit1.w - splitterw)
'     tmplayout[0] = (hsplit1.w - tmplayout[1] - splitterw)
'   Else
'     tmplayout[0] = (fmain.w Div 3)
'     tmplayout[1] = hsplit1.w - tmplayout[0] - splitterw
'   Endif
'   hsplit1.Layout = tmplayout
'   Hsplit1_MyRefresh()
'   fakesplit.lower
'   fakesplit.visible = False
'   Object.Detach(fakesplit)
' End

Public Sub SearchFieldDVB_Activate()
  
  playselecteddvb()
  ComboHistory.AddHistory(SearchFieldDVB, SearchFieldDVB.text)
  
End

Public Sub SearchFieldDVB_Click()
  
  UpdateSearchResults(MyDVBTList, DVBTGrid, fmain.FullyLoaded, Searchfielddvb.text)
  
End

Public Sub SearchFieldDVB_KeyRelease()
  
  If (Key.code < Key.space) Or (Key.code > Key.delete) Then Return
  If key.code = key.tab Then Return
  UpdateSearchResults(MyDVBTList, DVBTGrid, fmain.FullyLoaded, Searchfielddvb.text)
  Searchfielddvb.SetFocus()
  
End

' Public Sub LeftSidePanel_Enter()
'   Fakesplit_Leave()
' End
' 
' Public Sub rightSidePanel_Enter()
'   Fakesplit_Leave()
' End

Public Sub MenuBug_Click()
  BugReport.fill_system_info()
  global.Center(Me, bugreport)
  bugreport.show
End



Public Sub FileView1_Select()
  Try Media_Next_path = FileView1.dir & "/" & FileView1.Selection[0]
End

Public Sub HBox2_Arrange()

  If fmain.fullyloaded Then
    hbox20.enabled = (TabSelectedLibrary() Or TabSelectedPlaylist() Or TabSelectedAlbums())
  Endif

End

Public Sub PanScan_Click()

  Dim msgstr As String
  msgstr = ("Roll Your mouse wheel over the button\nto change panscan or Setup some hotkeys.") & "\n"
  msgstr &= ("Right click over the button will cycle through zoom modes")
  MyQuestion.Ask(msgstr, "Ok", "")

End

Public Sub PanScan_MouseWheel()

  If mplayer.ProcessRunningOvr() Then
    If Not (mplayer.getP("audioonly")) Then
      If mouse.Delta > 0 Then 
        PanScanCorrect(+0.05)
      Else
        PanScanCorrect(-0.05)
      Endif
    Endif
  Endif

End

Public Sub LibraryGrid_Click()
  EnableDisableTagBtn()
End

Public Sub PlaylistGrid_Click()

  EnableDisableTagBtn()

End

Public Sub TimerQuit_Timer()

  fmain.close

End

Public Sub MenuLoadSubtitle_Click()

  Dim tmp As String[]
  Dim tmp2 As String = myDialog.path

  tmp = myDialog.filter
  Try myDialog.path = file.Dir(mplayer.getP("fullpath"))
  myDialog.filter = ["*.srt;*.sub;*.ass;*.ssa;*.scc", ("SubTitle files")]
  If Not (myDialog.OpenFile()) Then
    If mplayer.IsSubFile(DConv(myDialog.Path)) Then sub_add(DConv(myDialog.Path))
  Endif
  myDialog.filter = tmp
  myDialog.path = tmp2

End

Public Sub StreamsSubtitlesMenu_show()

  If mplayer.ProcessRunningOvr() Then 
    FillStreamsMenu()
  Endif

End

Public querymp As MplayerClass

Public Sub PanScan_Menu()

  Dim mptxt As String 
  Object.Detach(realtimeform.PanscanSlider)
  Select Case forcedzoomrt
    Case ""
      forcedzoomrt = "HALFBARS"
      mptxt = ("Zoom mode: cut half bars")
    Case "HALFBARS"
      forcedzoomrt = "NOBARS"
      mptxt = ("Zoom mode: cut bars")
    Case "NOBARS"
      forcedzoomrt = ""
      ResizeFactor = 0
      'old_ResizeFactor = 1
      mptxt = ("Zoom mode: 1:1")
  End Select
  
  mplayer.ShowText(mptxt, "1000")
  CorrectAreaAspect()
  realtimeform.PanscanSpinBox.value = realtimeform.PanscanSlider.value
  Object.Attach(realtimeform.PanscanSlider, realtimeform, realtimeform.PanscanSlider.name)

End


Public Sub NewThumbReadyFor(fullpath As String)

  If TabSelectedPlaylist() Then 
    ThumbToGrid(myplaylist, playlistgrid, fullpath)
  Else If TabSelectedLibrary() Then
    ThumbToGrid(mylibrary, libraryGrid, fullpath) 
  Endif

End

Public Sub ThumbToGrid(mypls As PlaylistClass, mygrid As Gridview, fullpath As String)

  Dim r As Integer = -1
  
  Try r = mypls.FindRowByPath(mygrid, fullpath)
  If r = -1 Then Return
  mygrid[r, 0].text = ""
  mygrid[r, 0].clear

End

Public Sub SearchLabel_Click()

  Searchfields.show

End

Public Function maketooltip(mypath As String, librarygrid As Gridview, mylibrary As Playlistclass) As String

  Dim r As Integer
  Dim album, myyear, genre, artist, title, track, length, vcodec, width, height, vkbps, fps, acodec, arate, akbps, channels, comment, path As String
  Dim m As String = ""
  Dim ms As New String[]
  Dim i, w As Integer
  Dim Maxw As Integer = 0
  Dim sep As Integer 
  
  Try r = mylibrary.FindRowByPath(LibraryGrid, mypath) 
  If Error Then Return
  '= librarygrid[r, Mylibrary.Columnindex["Filename"]].text
  '
  length = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Length"])
  artist = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Artist"])
  album = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Album"])
  myyear = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Year"])
  track = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Track"])
  title = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Title"])
  genre = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Genre"])
  comment = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Comment"])
  '= librarygrid[r, Mylibrary.Columnindex["Type"]].text
  acodec = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Audio Codec"])
  akbps = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Audio Bitrate"])
  Try akbps = CInt(akbps) Div 1000
  arate = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Audio Rate"])
  channels = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Channels"])
  vcodec = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Video Codec"])
  vkbps = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Video Bitrate"])
  Try vkbps = CInt(vkbps) Div 1000
  fps = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Fps"])
  width = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Width"])
  height = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Height"])
  path = mylibrary.CellValue(librarygrid, r, Mylibrary.Columnindex["Full Path"])
  
  ms.add(("Filename: ") & Chr(0) & file.name(mypath) & "\n")
  ms.add(("In: ") & Chr(0) & file.Dir(path) & "\n")
  
  If Trim(album) & Trim(myyear) & Trim(genre) <> "" Then
    If Trim(album) = "" Then album = ("Unknown")
    If Trim(myyear) = "" Then myyear = ("Unknown")
    If Trim(genre) = "" Then genre = ("Unknown")
    ms.add(("Album: ") & Chr(0) & album & ", " & ("Year: ") & myyear & ", " & ("Genre: ") & genre & "\n")
  Endif
  
  If Trim(artist) <> "" Then ms.add(("Artist: ") & Chr(0) & Artist & "\n")
  If Trim(title) & Trim(track) <> "" Then
    If Trim(Title) = "" Then Title = ("Unknown")
    If Trim(Track) = "" Then Track = ("Unknown")
    ms.add(("Title: ") & Chr(0) & Title & (", Track No.: ") & Track & "\n")
  Endif
  ms.add(("Length: ") & Chr(0) & length & "\n")
  
  If Trim(vcodec) & Trim(width) & Trim(height) & Trim(vkbps) & Trim(fps) <> "" Then
    If Trim(vcodec) = "" Then vcodec = ("Unknown")
    If Trim(width) = "" Then width = ("Unknown")
    If Trim(height) = "" Then height = ("Unknown")
    If Trim(vkbps) = "" Then vkbps = ("Unknown")
    If Trim(fps) = "" Then fps = ("Unknown")
    ms.add(("Video: ") & Chr(0) & vcodec & ": " & width & "x" & height & "@" & vkbps & "kbps, " & fps & " fps" & "\n")
  Endif
  If Trim(acodec) & Trim(arate) & Trim(akbps) & Trim(channels) <> "" Then
    If Trim(acodec) = "" Then acodec = ("Unknown")
    If Trim(arate) = "" Then arate = ("Unknown")
    If Trim(akbps) = "" Then akbps = ("Unknown")
    If Trim(channels) = "" Then channels = ("Unknown")
    ms.add(("Audio: ") & Chr(0) & acodec & ", " & arate & "Hz @" & akbps & "kbps, " & channels & " " & ("channels") & "\n")
  Endif
  If Trim(comment) <> "" Then ms.add(("Comment: ") & Chr(0) & comment)
  
  For i = 0 To ms.count - 1
    'w = Application.Font.TextWidth(ms[i])
    w = Application.Font.TextWidth(Left(ms[i], InStr(ms[i], Chr(0))))
    If (w > maxw) Then maxw = w
  Next
  
  sep = Application.Font.TextWidth(" ")
  
  maxw = maxw + sep * 2
  For i = 0 To ms.count - 1
    'w = Application.Font.TextWidth(ms[i])
    w = Application.Font.TextWidth(Left(ms[i], InStr(ms[i], Chr(0))))
    m &= Replace(ms[i], Chr(0), pixelspaces(maxw - w, sep))
  Next
  
  If Right(m) = "\n" Then m = Left(m, Len(m) - 1)
  
  Return m

End

Public Function pixelspaces(width As Integer, singlewidth As Integer) As String

  Return Space(width Div singlewidth)

End

Private SHOGRIDTOOLTIP_GRID As Gridview
Private SHOWGRIDTOOLTIP_PLAYLIST As Playlistclass


Public Sub ShowGridTooltip_timer()
  Dim mygrid As Gridview = SHOGRIDTOOLTIP_GRID
  Dim myplaylist As Playlistclass = SHOWGRIDTOOLTIP_PLAYLIST

  Dim currentpath, album As String
  Dim popupmsg As String
  
  Dim crow, fpcolumn, ccolumn As Integer
  Dim msx, msy As Integer

  
  Try crow = global.MyRowAt(mygrid, mouse.screeny - mygrid.screeny)
  If (Error Or (crow = -1)) Then 
    Application.ShowTooltips = False
    Goto returnlabel
  Endif
  
  fpcolumn = myplaylist.ColumnIndex["Full Path"]
  If mygrid.name <> "AlbumGridView" Then
    Try currentpath = mygrid[crow, fpcolumn].text
    If Error Then
      Application.ShowTooltips = False
      Goto returnlabel
    Endif
  Else 'is albumgrid
    ccolumn = mygrid.ColumnAt(mouse.screenx - mygrid.screenx)
    If ccolumn = -1 Then Goto returnlabel
    currentpath = MyAlbumsLib.PathFromCoordinates(crow, ccolumn)
  Endif
  Application.ShowTooltips = Buttonshowtooltips.value
  If mygrid.name <> "AlbumGridView" Then
    Try popupmsg = maketooltip(currentpath, mygrid, myplaylist)
  Else
    album = MyAlbumsLib.AlbumFromCoordinates(crow, ccolumn)
    If album = "" Then Goto returnlabel
    Try popupmsg = MyAlbumsLib.AlbumToolTip(album)
  Endif
  mygrid.tooltip = popupmsg

  returnlabel:
  ShowGridTooltip.stop

End

Private mmliblocked As Boolean = False

Public Sub LibraryGrid_MouseMove()

  If mmliblocked Then Return
  mmliblocked = True
  If generaloptions.HighlightCHK.value Then
    Try hirow = global.MyRowAt(librarygrid, mouse.screeny - librarygrid.screeny)
    Try librarygrid[hirow, 0].text = ""
    Try librarygrid[hirow, 0].clear
  Endif
  If Not (Buttonshowtooltips.value) Then 
    mmliblocked = False
    Return
  Endif
  If Mouse.state = 0 Then 
    SHOGRIDTOOLTIP_GRID = librarygrid
    SHOWGRIDTOOLTIP_PLAYLIST = mylibrary
    ShowGridTooltip.delay = 250
    ShowGridTooltip.start
  Endif
  mmliblocked = False

End

Private mmplslocked As Boolean = False
Public ShowGridTooltip As New Timer As "ShowGridTooltip"

Public Sub PlaylistGrid_MouseMove()
  If mmplslocked Then Return
  mmplslocked = True
  If generaloptions.HighlightCHK.value Then
    Try hirow = playlistgrid.RowAt(mouse.screeny - playlistgrid.screeny)
    Try playlistgrid[hirow, 0].text = ""
    Try playlistgrid[hirow, 0].clear
  Endif
  If Not (Buttonshowtooltips.value) Then 
    mmplslocked = False
    Return
  Endif

  If Mouse.state = 0 Then 
    SHOGRIDTOOLTIP_GRID = playlistgrid
    SHOWGRIDTOOLTIP_PLAYLIST = myplaylist
    ShowGridTooltip.delay = 250
    ShowGridTooltip.start
  Endif
  mmplslocked = False

End

Private mmalblocked As Boolean = False

Public Sub AlbumGridView_MouseMove()

  MyAlbumsLib.highlighter(mouse.screenx, mouse.screeny)
  If mmalblocked Then Return
  mmalblocked = True
  If Not (Buttonshowtooltips.value) Then Return
  If Mouse.state = 0 Then 
    SHOGRIDTOOLTIP_GRID = AlbumGridView
    SHOWGRIDTOOLTIP_PLAYLIST = mylibrary
    ShowGridTooltip.delay = 250
    ShowGridTooltip.start
  Endif
  mmalblocked = False

End

Private scrollingtimer As New Timer As "scrollingtimer"
Public gridscrolling As Boolean = False

Public Sub PlaylistGrid_Scroll()

  gridscrolling = True
  scrollingtimer.delay = 100
  scrollingtimer.start

End

Public Sub LibraryGrid_Scroll()

  gridscrolling = True
  scrollingtimer.delay = 100
  scrollingtimer.start

End

Public Sub scrollingtimer_Timer()

  scrollingtimer.Stop
  gridscrolling = False

End

Public Sub MenuLibraryInvertSort_Click()
  
End

Public Sub MenuLibrarySortByAlbum_Click()

  ColumnClick(librarygrid, mylibrary, mylibrary.ColumnIndex["Album"], Searchfield.text)

End

Public Sub MenuLibrarySortByArtist_Click()

  ColumnClick(librarygrid, mylibrary, mylibrary.ColumnIndex["Artist"], Searchfield.text)

End

Public Sub MenuLibrarySortByPath_Click()

  ColumnClick(librarygrid, mylibrary, mylibrary.ColumnIndex["Full Path"], Searchfield.text)

End

Public Sub DVBTGrid_Menu()
  'if i'm alone, then leave me here!

  menudvbt.Popup

End

Public Sub RenameGridItem(mygrid As Gridview, myrow As Integer, myplaylist As Playlistclass, newname As String)
  Dim fullpath, sep, oldname As String
  Dim i As Integer
  Dim imax As Integer

  Try fullpath = myplaylist.ColumnIndex["Full Path"]
  If Error Then Return
  sep = myplaylist.TableSeparator
  oldname = mygrid[myrow, myplaylist.ColumnIndex["Filename"]].text
  
  'find pRow to update ptable too (other than searchtable)
  imax = myplaylist.PTable.count - 1
  For i = 0 To imax
    If myplaylist.AreEquivalentRows(myplaylist.PTable[i], myplaylist.SearchTable[myrow]) Then Break
  Next
  If i > imax Then 
    global.myDebug("cannot rename, couldn't find searchtable element into ptable (!?)")
    Return
  Else
    myplaylist.SearchTable[myrow] = Replace(myplaylist.SearchTable[myrow], sep & "Filename" & sep & oldname & sep, sep & "Filename" & sep & newname & sep)
    myplaylist.ptable[i] = myplaylist.SearchTable[myrow]
    mygrid[myrow, 0].text = ""
    mygrid[myrow, 0].Clear
  Endif

End

Public Sub MenuLibraryRename_CLICK()

  RenameGridItemWrapper(librarygrid, mylibrary)

End

Public Sub MenuPlaylistRename_click()

  RenameGridItemWrapper(PLAYLISTGRID, MyPlaylist)

End

Public Sub MenuRename_Click()

  RenameGridItemWrapper(dvbtgrid, MyDVBTList)

End

Public Sub RenameGridItemWrapper(g As Gridview, p As Playlistclass)

  Dim i As Integer
  Dim newname As String
  g.enabled = False
  For i = 0 To g.Rows.Count - 1 
    If g.Rows[i].Selected Then
      newname = MyAskName.Ask(("Rename to:"), g[i, 0].text, False)
      RenameGridItem(g, i, p, newname)
    Endif
  Next
  g.enabled = True
End

Public Function impv_version(dotted_version As String) As Integer
  'convert x.y.z To integer
  Dim v As New String[]
  v = Split(dotted_version, ".", "", True)
  Return (v[0] * 1000000) + (v[1] * 10000) + v[2]
End


Public Sub Startdumping(destfile As String)
 Dim mymsg As String
  Dim mynow As String = Now()
  Dim ismp3 As Boolean = False
  Dim audiocodec As String
  Dim tracklist_current_audio As Integer = 0
  Try tracklist_current_audio = mplayer.getP("tracklist-current-audio")
  audiocodec = mplayer.getP("track-list/" & tracklist_current_audio & "/codec")
  mynow = Replace(mynow, "/", "-")
  mynow = Replace(mynow, " ", "_")
  mynow = Replace(mynow, ":", ".")
  If Trim(destfile) = "" Then destfile = User.Home
  destfile &= "/Xt7.REC."
  destfile &= file.Name(mplayer.getP("fullpath")) & "-" & mynow
  destfile = Replace(destfile, ".pls", "")
  Ismp3 = Ismp3 Or (Lower(audiocodec) Like "*.mp3") 
  Ismp3 = Ismp3 Or (Lower(audiocodec) Like "*mpg123*") 
  Ismp3 = Ismp3 Or (Lower(audiocodec) Like "*mp3*") 
  Ismp3 = Ismp3 And mplayer.getP("audioonly")
      
  If ismp3 Then 
    destfile &= ".mp3"
      Else
    destfile &= ".ts"
  Endif
  'destfile = "'" & destfile & "'"
  mymsg = ("Dumping to: \n") & destfile
  mymsg &= ("\n\nYou can configure the paths in Generaloptions -> dvb-t")
  Message.Info(mymsg)
  
  If global.mpv_version = "" Then global.mpv_version = fmain.mplayer.version()
  If impv_version(global.mpv_version) >= impv_version("0.24.0") Then 
    mplayer.set_property_mpv("record-file", destfile)
      Else
    mplayer.set_property_mpv("stream-capture", destfile)
  Endif
End

Private Sub StopDumping()
  Dim destfile As String
  If global.mpv_version = "" Then global.mpv_version = fmain.mplayer.version()
  If impv_version(global.mpv_version) >= impv_version("0.24.0") Then
    mplayer.set_property_mpv("record-file", "")
    destfile = mplayer.get_property_mpv("record-file")
      Else
    mplayer.set_property_mpv("stream_capture", "")
    destfile = mplayer.get_property_mpv("stream-capture")
  Endif
  
  
  
  buttoncapture.value = 0
  buttoncapture.visible = buttoncapture.enabled
  ArrangeCpl()
  Try myplaylist.AddFile(playlistgrid, destfile, False)
  GridRefreshWorkaround(playlistgrid)
End


Public Sub ButtonCapture_Click()
  If mplayer.ProcessRunningOvr() Then
    If Last.value Then
      'StopDumping(generaloptions.dvbfinaldir.text)
      Startdumping(generaloptions.dvbfinaldir.text)
        Else
      StopDumping()
    Endif
  Endif
End


Private albumsinitialized As Boolean = False
Public Sub Albums_Select()
  If Not fmain.fullyloaded Then Return
    If Not albumsinitialized Then 
      MyAlbumsLib.init(mylibrary, AlbumGridView, searchfieldalbums.text)
      albumsinitialized = True
      MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
    Endif
End


Public Sub SearchFieldAlbums_Click()
  'If Not fmain.fullyloaded Then Return
    MyAlbumsLib.Init(mylibrary, AlbumGridView, searchfieldalbums.text)
    Wait
    MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
    albumsinitialized = True
End



Public Sub AlbumGridView_Data(Row As Integer, Column As Integer)
  ' shadelow.visible = True
  MyAlbumsLib.data(row, column)
End


Public Sub AlbumGridView_change()
  If Not fmain.FullyLoaded Then Return
  If AlbumGridView.row < 0 Then Return
  If AlbumGridView.column < 0 Then Return
  MyAlbumsLib.SelectCell(AlbumGridView.row, AlbumGridView.Column)
End

Public Sub SearchFieldAlbums_change()
  Dim previous_search As String
  If Not fmain.fullyloaded Then Return
  previous_search = searchfieldalbums.text
  Wait 0.5
    If previous_search = searchfieldalbums.text Then
      MyAlbumsLib.Init(mylibrary, AlbumGridView, searchfieldalbums.text)
      MyAlbumsLib.Arrange(generaloptions.IconWidthAlbums.text, albumviewtexlen)
        Else
      Return
    Endif
End

Public Sub SearchFieldAlbums_Activate()
  ComboHistory.AddHistory(Searchfieldalbums, Searchfieldalbums.text)
End


Public Sub AlbumGridView_Activate()
  Dim tracks As String[]
  Dim track As String
  Dim firstrow As Integer
  Dim answer As Integer
  Dim selectedrow As Integer
  tracks = MyAlbumsLib.GetTracks(AlbumGridView.row, AlbumGridView.Column).Sort(gb.Natural)
  answer = MyQuestion.Ask(("What do you want to do with this album tracks?"), ("Append to playlist"), ("Append and play"))
  If answer = -1 Then Return
  If (tracks.count > 50) Then 
    If MyQuestion.Ask(("Append more than 50 tracks?"), ("yes"), ("no")) = 2 Then Return
  Endif
  
  fmain.mouse = mouse.wait
  
  selectedrow = playlistgrid.row
  If tracks.count > 0 Then 
    firstrow = playlistgrid.Rows.count 
    For Each track In tracks
      myplaylist.AddFile(playlistgrid, track, False)
      Wait
    Next
    GridRefreshWorkaround(playlistgrid)
    TogglePls.value = 1
    If answer = 2 Then 
      playlistgrid.UnSelectAll()
      playlistgrid.row = firstrow
      playlistgrid.Rows[playlistgrid.row].selected = True
      Try Play(PlayListGrid[Playlistgrid.row, MyPlayList.Columnindex["Full Path"]].text)
      If Error Then message.Error(("Something went wrong; does the file exists?"))
      Leftsidetabs.index = Global.TabIndexByName("playlist", Leftsidetabs)
      Leftsidetabs.Refresh
      SetActivePlayQueue("playlistgrid")
        Else
      playlistgrid.Rows[selectedrow].selected = True
    Endif
  Endif
  
  fmain.mouse = mouse.normal
End

Public Sub AlbumGridView_Menu()
  AlbumGridView.row = AlbumGridView.rowat(Mouse.screeny - AlbumGridView.screeny)
  AlbumGridView.column = AlbumGridView.columnat(Mouse.screenx - AlbumGridView.screenx)
  MyAlbumsLib.SelectCell(AlbumGridView.row, AlbumGridView.Column)
  menupopupalbumview.Popup()
End

Public Sub MenuSetACover_Click()
  Dim album, artist, filepath As String
  Dim r, c As Integer
  r = AlbumGridView.Row
  c = AlbumGridView.Column
  album = MyAlbumsLib.AlbumFromCoordinates(r, c)
  artist = MyAlbumsLib.ArtistFromCoordinates(r, c)
  filepath = MyAlbumsLib.pathFromCoordinates(r, c)

  covermanager.SetACover(filepath, artist, album)
End

Public Sub AlbumGridView_Leave()
  Application.ShowTooltips = GeneralOptions.ToolTipsCHK.value
End

Public Sub LibraryGrid_MouseDown()
  Dim MouseRow As Integer
  Try mouserow = librarygrid.RowAt(mouse.y)
  If Error Then Return

  If mouse.left And Not (mouse.Control Or mouse.Shift) Then 
    librarygrid.UnSelectAll
    librarygrid.Rows[mouserow].selected = True
    librarygrid.row = mouserow
    Return
  Endif

  If Mouse.Right Then
    If Not (librarygrid.rows[mouserow].selected) Then
      librarygrid.UnSelectAll
      ' librarygrid.Rows[mouserow].selected = True  
      ' librarygrid.row = mouserow
    Endif
    librarygrid.Rows[mouserow].selected = True
    librarygrid.row = mouserow
    'LibraryGrid_Menu()
  Endif
End

Public Sub PlaylistGrid_MouseDown()
  Dim MouseRow As Integer

  Try mouserow = playlistgrid.RowAt(mouse.y)
  If mouse.left And Not (mouse.Control Or mouse.Shift) Then 
    playlistgrid.UnSelectAll
    playlistgrid.Rows[mouserow].selected = True
    playlistgrid.row = mouserow
    Return
  Endif

  If Mouse.Right Then
    If Not (playlistgrid.rows[MouseRow].selected) Then
      playlistgrid.UnSelectAll
      ' playlistgrid.Rows[MouseRow].selected = True  
      ' playlistgrid.row = mouserow
    Endif
    playlistgrid.Rows[MouseRow].selected = True
    playlistgrid.row = mouserow
    'Playlistgrid_Menu()
  Endif
End


Public Sub ButtonSavePls_Click()
  SavePls()
End

Public Function SavePls() As Boolean 
  Dim playlistsfullpath As String = global.ConfPath & "/" & global.UserPlaylistsDir
  If Trim(PlaylistsCombo.text) = "" Then 
    Message.Error(("Please, first enter a playlist name to save"), "Ok")
    Return False
  Endif
  If Not Exist(playlistsfullpath, True) Then
    Try Mkdir playlistsfullpath
    If Error Then 
      Message.Error(("Couldn't make the user playlist directory\n") & playlistsfullpath, ("Ok"))
      Return False
    Endif
  Endif
  If Exist(playlistsfullpath & "/" & PlaylistsCombo.text & ".xpl", True) Then
    If MyQuestion.Ask(PlaylistsCombo.text & " " & ("exists."), ("Overwrite"), ("Never mind")) = 2 Then Return False
  Endif
  Try myplaylist.SaveAs(playlistsfullpath & "/" & PlaylistsCombo.text & ".xpl")
  If Error Then 
    Message.Error(("There was an error saving the playlist:\n") & PlaylistsCombo.text, ("Ok"))
    Return False
      Else
    Try Message.Info(("Current playlist saved as:") & "\n" & PlaylistsCombo.text, (" Ok "))
    If PlaylistsCombo.Find(PlaylistsCombo.text) = -1 Then PlaylistsCombo.Add(PlaylistsCombo.text)
  Endif
  Return True
End


Public Sub PlaylistsCombo_enter()
  Try fillplaylistcombo()
End

Public Sub fillplaylistcombo()
  Dim playlistsfullpath As String = global.ConfPath & "/" & global.UserPlaylistsDir
  Dim aplaylist As String
  Dim previous As String = ""
  Try previous = PlaylistsCombo.text
  Object.Lock(playlistscombo)
  playlistscombo.Clear
  For Each aplaylist In Dir(playlistsfullpath, "*.xpl")
    aplaylist = Replace(aplaylist, ".xpl", "")
    If PlaylistsCombo.Find(aplaylist) = -1 Then PlaylistsCombo.Add(aplaylist)
  Next
  PlaylistsCombo.text = previous
  Object.unLock(playlistscombo)
End

Public Sub ButtonDeletePls_Click()
  Dim playlistsfullpath As String = global.ConfPath & "/" & global.UserPlaylistsDir
  If Trim(PlaylistsCombo.text) = "" Then Return
  If MyQuestion.Ask(("Playlist:") & " " & PlaylistsCombo.text, ("Delete"), ("Never mind")) = 2 Then Return
  Try Kill playlistsfullpath & "/" & PlaylistsCombo.text & ".xpl"
  If Error Then Message.Error(("Couldn't delete") & " " & playlistsfullpath & "/" & PlaylistsCombo.text & ".xpl", ("Ok"))
  Try PlaylistsCombo.Remove(PlaylistsCombo.Find(PlaylistsCombo.text)) 
  PlaylistsCombo.text = ""

End

Public Sub PlaylistsCombo_Click()
  Dim answer As Integer

  Dim playlistsfullpath As String = global.ConfPath & "/" & global.UserPlaylistsDir
  answer = MyQuestion.Ask(("Load the playlist:") & "\n" & PlaylistsCombo.current.text, ("Load/Replace"), ("Append"))
  'Message.question("Loading the playlist:" & "\n" & PlaylistsCombo.current.text, ("Load/Replace"), ("Append"), ("Never mind"))
  If answer = -1 Then Return
  MyPlaylist.LoadFile(playlistsfullpath & "/" & PlaylistsCombo.text & ".xpl", PlayListGrid, (answer = 2))
  UpdateSearchResults(MyPlayList, PlayListGrid, fmain.FullyLoaded, SearchfieldPLS.text)
End

Public Sub ButtonEPG_Click()
  global.Center(Me, epgform)
  EpgForm.Show()
End


Public Sub ButtonSavePls2_Click()
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  GeneralOptions.show
  GeneralOptions.TabStrip1.index = Global.TabIndexByName(("DVB-T"), GeneralOptions.TabStrip1)
End

Public Sub PictureBox1_Drop()
  Dim droppedfile As String
  Dim mywget As New Wgetclass
  Dim wgetfile As String
  Try droppedfile = Split(Drag.Paste("text/uri-list"), "\n\r", "", True)[0]
  If Error Then 
    Try droppedfile = Split(Drag.Paste("text/plain"), "\n\r", "", True)[0]
    If Error Then Return
  Endif
  droppedfile = DConv(Global.NoFileSuffix(Global.FormatDrag(droppedfile)))

  If droppedfile Like "http*://*" Then
    Try wgetfile = (mywget.DownloadAsync(droppedfile, True))
    If Error Then
      Message.Error(("Couldn't download:\n" & droppedfile))
      Return
    Endif
    Try picturebox1.Picture = picture.Load(wgetfile)
    If Not Error Then 
      If MyQuestion.Ask(("Would you like to save the current profile?"), "Save", "Don't Save") = 1 Then 
        Try Kill global.confpath & "/" & ".bottombackground"
        Try Copy wgetfile To global.confpath & "/" & ".bottombackground"
        generaloptions.Init()
        generaloptions.FirstLoadIfNeeded()
        generaloptions.BottomPanelImage.text = global.confpath & "/" & ".bottombackground"
        generaloptions.SaveCurrentTo(global.CurrentProfile)
        'fmain.MenuSaveDefault_Click()
      Endif
    Endif
    'If Not Error Then fmain.Picture = picturebox1.Picture.Image.Stretch(fmain.w, fmain.h).picture
  
      Else 'local file
        
    Try picturebox1.Picture = picture.Load(droppedfile)
    If Not Error Then 
      'fmain.Picture = picturebox1.Picture.Image.stretch(fmain.w, fmain.h).picture
      If MyQuestion.Ask(("Would you like to save the current profile?"), "Save", "Don't Save") = 1 Then 
        Try Kill global.confpath & "/" & ".bottombackground"
        Try Copy droppedfile To global.confpath & "/" & ".bottombackground"
        generaloptions.Init()
        generaloptions.FirstLoadIfNeeded()
        generaloptions.BottomPanelImage.text = global.confpath & "/" & ".bottombackground"
        generaloptions.SaveCurrentTo(global.CurrentProfile)
        'fmain.MenuSaveDefault_Click()
      Endif
    Endif
  Endif

End

' Public Sub ButtonmenuBTN_Click()
'   ButtonMenu.init()
'   Buttonmenu.Move(mouse.screenx, mouse.screeny)
'   Buttonmenu.show  
' End





Public Sub GetLastVersion()
  Dim httpclient1 As Httpclient
  httpclient1 = New Httpclient As "httpclientlastversion"
  If Not (Exist(global.ConfPath & "/nocheckupdates")) Then
 ' If User.Id <> 0 Then
    HttpClient1.url = "http://xt7-player.sourceforge.net/xt7forum/checkupdates.php"
      Else  
    HttpClient1.url = "http://xt7-player.sourceforge.net/xt7forum/index.php"
  Endif
  HttpClient1.Async = True
  HttpClient1.timeout = 10 
  Try HttpClient1.Get()
End


Public Sub VideoAreaGroup_MouseMove()
  If mplayer.ProcessRunningOvr() Then fmain.videoboxproxy.SetFocus()  
  If Mouse.state = 0 Then HotKeysHelper.init()
  outerbox.mouse = Mouse.default
  videobox.mouse = Mouse.default
  If fsform.fullscreen Then HideMouseDelayed()
End

Private Sub CantSeekMessage()
  If Not mplayer.ProcessRunningOvr() Then Return
  mplayer.ShowText(("Stream is not seekable, use arrow keys or doubleclick"), 1000)
  StatusLabelLeft.foreground = Color.green
  StatusLabelLeft.text = " " & ("Stream is not seekable!, use arrow keys or doubleclick to override")
  Stopmthumbler()
  Wait 1
  Wait
  StatusLabelLeft.foreground = Color.white
End

Public ThumblerActive As Boolean = False
Public Sub ProgressFrame_MouseDrag()
  Dim relative As Float
  Dim msg As String
  If Not mplayer.ProcessRunningOvr() Then Return


  If Not mplayer.ProcessRunningOvr() Then Return
  
  If (mplayer.getP("partially-seekable") = "yes") Then 
    CantSeekMessage()
    Return
  Endif
  
  relative = (mouse.x / progressframe.w)
  
  If relative <= 0 Then 
    relative = 0.00000000000000000000001
      Else
        If relative > 1 Then relative = 1
  Endif

  msg = (" seek to:") & " " & mplayer.FormatTime(CInt(mplayer.getP("=duration") * relative))
  seekbar.value = mouse.x / Last.w
  SetProgress(seekbar.value)
  StatusLabelLeft.text = msg
  mplayer.ShowText(msg, 1000)

  If CanUseThumbler() Then 
    TimerSeekThumble.start
    movethumble()
  Endif

End



Public Sub Form_Show()
  Hsplit1_MyRefresh()
  HSplit1_Resize()
End


Public Sub UrlBox_Change()
  If Not fmain.fullyloaded Then Return
  fileview1.Refresh()
  fileview1.UnselectAll()
  Wait
  gridpanels_arrange()
End

Public Sub volumecontainer_Arrange()
  Dim stylename As String = Style.name
  SaveVolumeSlider.w = volumecontainer.w
  

  If (Stylename = "Oxygen") Or (Style.name = "Breeze") Then 
    volumecontainer.Arrangement = Arrange.none
      Else
    volumecontainer.Arrangement = Arrange.fill
  Endif


  End

Public Sub textlabel1_MouseWheel()

  If Mouse.Delta > 0 Then 
    mplayer.do_seek_by("+20", FsForm.fullscreen)
      Else
    mplayer.do_seek_by("-20", FsForm.fullscreen)
  Endif
  UpdateSeekSlider()
End

Public Sub ControlPanel_Drop()
   PictureBox1_Drop()
End

Public Sub ControlPanelRight_Drop()
   PictureBox1_Drop()
End



Public mthumbler As Mplayerclass
Public Sub ActivateThumbler()
'fixmempv stub
  Dim fullpath As String

  If Not mplayer.ProcessRunningOvr() Then Return
  fullpath = mplayer.get_property_mpv("path", True)
  If fullpath = "" Then Return
  
  ' fixmempv ipv4 and ipv6 selection seems to be gone in mpv (?)
  ' If mplayer.commandline Like "* -prefer-ipv4 *" Then 
  '   opts &= " -prefer-ipv4 "
  '     Else If mplayer.commandline Like "* -prefer-ipv6 *" Then 
  '       opts &= " -prefer-ipv6 "
  ' Endif
  thumblebox.Hide()
  
  mthumbler = New Mplayerclass

  mthumbler.set_option("config", "no")
  'mthumbler.set_option("input-conf", "/tmp/FakeInput.conf")
  mthumbler.set_option("input-default-bindings", "no")
  mthumbler.set_option("load-scripts", "no")
  mthumbler.set_option("osc", "no")
  mthumbler.set_option("input-cursor", "no")
  mthumbler.set_option("input-vo-keyboard", "no")  
  mthumbler.set_option("sub-auto", "no")
  'mthumbler.set_option("sub", "no") 'deprecated in mpv (?)
  mthumbler.set_option("osd-level", "0")
  mthumbler.set_option("cache", "no")
  mthumbler.set_option("no-audio", "")
  mthumbler.set_option("loop", "inf")
  mthumbler.set_option("speed", "0.5")
  mthumbler.set_option("vd-lavc-fast", "yes")
  mthumbler.set_option("vd-lavc-skiploopfilter", "all")
  mthumbler.set_option("wid", thumblevideo.handle)
  mthumbler.set_option("vo", "x11,xv,gpu")
  mthumbler.set_option("ao", "null")
  mthumbler.set_option("no-audio", Chr(8))

  mthumbler.do_play(fullpath)
  While Not mthumbler.ProcessRunningOvr()
    Wait 0.1
  Wend
  While mthumbler.get_property_mpv("video-params/aspect") = mplayer.unavailable_str 'needed later to size the thumbler box
    Wait 0.1
  Wend
  mthumbler.Renice(5, True)
  ThumblerActive = True
  'movethumble()
  ' If global.MouseInside(panel9) Then
  '   If Mouse.left Then movethumble()
  ' Endif
End

Public Sub HideThumbler()
  If Not thumbleractive Then Return
  If Not thumblebox.visible Then Return
  mthumbler.do_pause()
  TimerSeekThumble.stop
  thumblebox.hide
  Wait 0.1
  thumblebox.hide
End


Public Sub ProgressFrame_Leave()
  HideThumbler()
End


Private previoustimerseek As Integer = 0
Public Sub TimerSeekThumble_Timer()
  Dim newseek As Integer
  If Not thumbleractive Then activatethumbler()
  mthumbler.do_leave_pause(False)
  newseek = (seekbar.value * 100) 
  If newseek > 99 Then newseek = 99
  If newseek <> previoustimerseek Then
    mthumbler.do_seek(newseek)
    previoustimerseek = newseek
  Endif
  If Not thumblebox.visible Then movethumble()
End

Private Sub movethumble()
  Dim x, y, w, h As Integer
  Dim ar As Float = -1

  If Not thumbleractive Then Return
  If Not mplayer.ProcessRunningOvr() Then Return
  If Not mthumbler.ProcessRunningOvr() Then Return
  Try ar = CFloat(mthumbler.getP("video-params/aspect"))
  If ar = -1 Then Return
  w = (Screen.width Div 6)
  Try w = Screen.width * Eval(generaloptions.ComboPiPSize.text)
  Try h = (w / ar) 
  If Error Then Return
  x = Mouse.screenx - (thumblebox.h Div 2) - outerbox.screenx
  y = controlframe.screeny - outerbox.screeny - thumblebox.h 'cachebar removed: - cachebar.h  'outerbox.screeny + outerbox.h - thumblebox.h - 1
  thumblebox.Move(x, y, w, h)
  Wait
  thumblebox.show()
  thumblebox.Raise()
End



Private Function CanUseThumbler() As Boolean
  If mplayer.getP("audioonly") Then Return False
  If (mplayer.getP("partially-seekable") = "yes") Then Return False
  If Not mplayer.ProcessRunningOvr() Then Return False
  If mplayer.getP("fullpath") Like "*ttp://*youtube*" Then
    If (generaloptions.SeekThumbsYoutubeCheckbox.value = True) Then 
      Return True
        Else
      Return False
    Endif
  Endif
  If global.IsNetworkURI(mplayer.getP("fullpath")) Then Return False
  If (generaloptions.SeekThumbsCheckbox.value = True) Then Return True
  Return True
End

Private Sub Stopmthumbler()
  TimerSeekThumble.stop
  Try mthumbler.do_stop()
  thumblebox.Hide()
  thumbleractive = False
End

Public Sub ProgressFrame_MouseWheel()
  If mplayer.ProcessRunningOvr() Then
    If Mouse.delta > 0 Then
      seekbar.value += 0.02
      'SetProgress(seekbar.value)
        Else
      seekbar.value -= 0.02
      'SetProgress(seekbar.value)
    Endif
     SetProgress(seekbar.value)
    SeekBar_Change()
  Endif
End



Public Sub FileView1_KeyPress()
  If (Key.code = Key.enter) Or (Key.code = Key.return) Then
    If fileview1.Selection.count > 0 Then
      If IsDir(fileview1.dir & "/" & fileview1.selection[0]) Then
        urlbox.text = fileview1.dir & "/" & fileview1.selection[0]
        UrlBox_Click
          Else 'isfile
        SetActivePlayQueue("browse")
        Play(fileview1.dir & "/" & fileview1.selection[0])
      Endif
    Endif
    Return
  Endif
  If Key.code = Key.BackSpace Then
    ButtonUp_Click()
    Return
  Endif

  If Key.code = Key.Delete Then
    MenuBrowseDelete_Click()
    Return
  Endif

  If Key.code = Key.f5 Then
    ButtonRefresh_Click()
    Return
  Endif
  
  
  If Key.text = "" Then Return
  If Not SelectFileviewFromKey(key.text) Then
    fileview1.UnselectAll()
    SelectFileviewFromKey(key.text)
  Endif
  Stop
End


Private Function SelectFileviewFromKey(akey As String) As Boolean
  Dim currentindex, toselect As Integer
  Dim currentstring As String = ""
  Try currentstring = fileview1.selection[0]
  fileview1.SelectAll
  If currentstring <> "" Then 
    currentindex = fileview1.Selection.Find(currentstring)
      Else
    currentindex = -1
  Endif
  global.myDebug(currentindex)
  toselect = fileview1.Selection.Find(aKey & "*", gb.like, currentindex + 1)
  If toselect >= 0 Then 
    fileview1.current = fileview1.Selection[toselect]
    Return True
      Else
    Try fileview1.current = currentstring
    Return False
  Endif
End


Private PlayQueueIs As String 'remember where the Last played item is from
  Public Sub SetActivePlayQueue(Queue As String)
    Dim i As Integer
    For i = 0 To Leftsidetabs.count - 1
      If Leftsidetabs[i].text Like "< * >" Then Leftsidetabs[i].text = Replace(Replace(Leftsidetabs[i].text, " >", ""), "< ", "")
    Next
    PlayQueueIs = queue
    If Right(Leftsidetabs.Current.text) <> ">" Then Leftsidetabs.Current.text = "< " & Leftsidetabs.Current.text & " >"
  End
  
  Public Function GetActivePlayQueue() As String
    Return PlayQueueIs
  End


Public Sub ButtonStop_MouseDown()
   flipbutton(Last)
End
Public Sub ButtonStop_Mouseup()
  flipbutton(Last)
End
Public Sub Buttonplay_MouseDown()
   flipbutton(Last)
End
Public Sub Buttonplay_Mouseup()
  flipbutton(Last)
End
Public Sub Buttonprev_MouseDown()
   flipbutton(Last)
End
Public Sub Buttonprev_Mouseup()
  flipbutton(Last)
End
Public Sub Buttonnext_MouseDown()
   flipbutton(Last)
End
Public Sub Buttonnext_Mouseup()
  flipbutton(Last)
End
Public Sub Buttonrew_MouseDown()
   flipbutton(Last)
End
Public Sub Buttonrew_Mouseup()
  flipbutton(Last)
End
Public Sub Buttonfwd_MouseDown()
   flipbutton(Last)
End
Public Sub Buttonfwd_Mouseup()
  flipbutton(Last)
End
Public Sub buttoncapture_MouseDown()
   flipbutton(Last)
End
Public Sub buttoncapture_Mouseup()
  flipbutton(Last)
End
Public Sub ButtonNowNext_MouseDown()
   flipbutton(Last)
End
Public Sub buttonnownext_Mouseup()
  flipbutton(Last)
End


Private Sub flipbutton(thebutton As Object)
   If fmain.fullyloaded Then theButton.picture = theButton.Picture.Image.Mirror(False, True).picture
End

Public Sub ExtractAudioLibrarymenu_Click()
  Dim selecteditems As New String[]
  Dim i As Integer
  For i = 0 To librarygrid.Rows.max
    If librarygrid.Rows[i].Selected Then selecteditems.Add(librarygrid[i, mylibrary.Columnindex["Full Path"]].text)
  Next
  ExtractAudio(selecteditems)
End

Public Sub ExtractAudioPlaylistmenu_Click()
  Dim selecteditems As New String[]
  Dim i As Integer
  For i = 0 To playlistgrid.Rows.max
    If playlistgrid.Rows[i].Selected Then selecteditems.Add(playlistgrid[i, myplaylist.Columnindex["Full Path"]].text)
  Next
  ExtractAudio(selecteditems)
End

Public Sub youtubetreeextractaudio_Click()
  Dim selecteditems As New String[]
  Dim yItem As YoutubeItem
  Dim yUrl As String
  Try yItem = youtubetree.tag[youtubetree.current.key]
  Try yUrl = yItem.playurl
  If Error Then 
    Message.Error("Failed.\nMissing video url")
    Return
  Endif

  Try selecteditems.Add(yUrl)
  If Not Error Then
    Try ExtractAudio(selecteditems)
      Else
    Message.Error(("Error while getting selection"))
  Endif
End

Public Sub MenuBrowseExtractAudio_Click()
  Dim selecteditems As New String[]
  Dim item As String
  For Each item In fileview1.selection
    selecteditems.Add(fileview1.Dir & "/" & item)
  Next
  
  Try ExtractAudio(selecteditems)
End


Public Sub ExtractAudio(selecteditems As String[])
  ' If audioconvert.converting Then
  '   Message.Error("Sorry, another conversion is in progress")
  '     Else
  '   audioconvert.items = selecteditems
  ' Endif
  audioconvert.items.Insert(selecteditems)
  If (Not audioconvert.visible) Then global.Center(fmain, audioconvert)

  audioconvert.show()
End




Private ProgressCache As Panel

Public Sub Initprogress()
  Dim mycolor As Integer

  If (progress.tag <> Null) And (progress.tag <> "changecolor") Then Return

  progress.picture = Picture.Load("barglow.png")

  'fix for dark themes
  mycolor = generaloptions.SeekbarColorButton.background 'Color.SelectedBackground
  While Color.Desaturate(mycolor) < (Color.white / 3)
    mycolor = Color.Merge(mycolor, Color.white, 0.1)
  Wend
  progressframe.tag = mycolor
  progressshadow.Picture = progressshadow.Picture.Image.Opacity(0.8).picture
  'progress.Picture = progress.Picture.Image.Colorize(mycolor).Saturation(-0.60).brightness(0.15).Contrast(1.4).picture
  progress.Picture = progress.Picture.Image.Colorize(mycolor).Saturation(-0.6125).brightness(0.15).Contrast(1.3875).picture
  'progress.Picture = progress.Picture.Image.Colorize(mycolor).Saturation(-0.625).brightness(0.1625).Contrast(1.375).picture

  If progress.tag <> "changecolor" Then  'if it is "changecolor", then don't reset the position.
    progress.Move(0, 0, 0, progress.parent.h)
    ProgressFrame.proxy = progress
    Progress.proxy = progressshadow
  Endif
  progress.tag = True

  Try progresscache.tag = "exists"
  If Error Then progresscache = New Panel(progressframe) As "progresscache"

  ProgressCache.background = Color.SetAlpha(mycolor, 200)
  ProgressCache.Move(progress.x, progress.y, 0, 0)
  progressframe.lower
  progressshadow.raise
  'ProgressCache.proxy = progressshadow
  progressshadow.proxy = progresscache

End

Public Sub SetProgress(newset As Float) 'newset is 0..1
  Dim border As Integer = 0 '2
  Dim bor As Integer = 0 '1
  Dim newpos As Integer = CInt(ProgressFrame.clientw * newset - ProgressFrame.padding)
  If newpos < border Then newpos = border
  progress.Raise
  progress.Move(progressframe.clientx + bor, progressframe.clienty + bor, newpos - border, progressframe.clienth - border)

End

Public Sub SetProgressCache(newset As Float) 'newset is 0..1
  Dim border As Integer = 0 '2
  Dim bor As Integer = 0 '1
  Dim newpos As Integer = CInt(ProgressFrame.clientw * newset - ProgressFrame.padding)

  If newpos < border Then newpos = border
  progress.Raise
  progresscache.Move(progressframe.clientx + bor, progressframe.clienty + bor, newpos - border, progressframe.clienth - border)

End


Public Sub textboxdata_Activate()
  global.myDebug(mplayer.send(Last.text))
End


Private ABLoopInitValue As Float = 99999.99999
Private ABLoopA As Float = ABLoopInitValue
Private ABLoopB As Float = ABLoopInitValue

Private Sub InitABLoop()
  ABLoopA = ABLoopInitValue
  ABLoopB = ABLoopInitValue
  ABLoopButton.text = ""
  ABLoopButton.picture = Picture["media-loop-off.png"]
  ABLoopButton.value = False
  ABLoopButton.tooltip = ("No loop set")
  ABLoopTimer.stop
End


Public Sub ABLoopButton_mouseup()
  Dim StartTime As Float = Timer()
  Dim timeout As Integer = 100
  
  'mplayer not running or cancel loop -> init and return
  If Not mplayer.ProcessRunningOvr() Or (ABLoopB <> ABLoopInitValue) Or Mouse.Right Then 
    InitABLoop()
    Return
  Endif

  If ABLoopA = ABLoopInitValue Then 'A loop not set -> get loop point A
    Repeat
      Try ABLoopA = mplayer.CurrentTimeFloat()
      If ABLoopA = ABLoopInitValue Then 
        Wait 0.1
        timeout -= 1
      Endif
    Until (ABLoopA <> ABLoopInitValue) Or timeout = 0
    If timeout <> 0 Then
      ABLoopA -= Round((Timer() - starttime), 1)
      ABLoopButton.picture = Picture["media-loop-a.png"]
      ABLoopButton.tooltip = CStr(AbLoopA) & "<->"
    Endif
    Return
      
      Else 'B loop not set -> get loop point B and start the loop
    
    Repeat
      Try ABLoopB = mplayer.CurrentTimeFloat()
      If ABLoopB = ABLoopInitValue Then 
        Wait 0.1
        timeout -= 1
      Endif
    Until (ABLoopB <> ABLoopInitValue) Or timeout = 0
    If timeout <> 0 Then
      ABLoopB -= Round((Timer() - starttime), 1)
      If ABLoopA >= ABLoopB Then
        global.myDebug("Loop Point A >= Loop Point B, and cannot loop backwards, please retry.")
        ABLoopB = ABLoopInitValue
        Return
      Endif
      ABLoopButton.picture = Picture["media-loop-ab.png"]
      ABLoopButton.tooltip = CStr(AbLoopA) & "<->" & CStr(AbLoopB)
      ABLoopTimer.delay = CInt((ABloopB - ABLoopA) * 100 / 4) 'be light on this
      ABLoopTimer.start
      ABLoopTimer.trigger

    Endif    
  Endif
End

Public Sub ABLoopTimer_Timer()
  Dim mptime As Float = 99999.99999
  Dim timeout As Integer = 100 'centisecs
  Dim newdelay As Integer
  Repeat
    mptime = mplayer.CurrentTimeFloat()
  Until mptime <> 99999.99999 Or (timeout = 0)
  If timeout = 0 Then
    global.myDebug("Couldn't get current time -> cannot loop!")
     ABLoopTimer.delay = 1000 'safe value
    Return
  Endif

  If mptime >= ABLoopB Then 
    mplayer.do_seek_to(CStr(ABLoopA), True, False)
    CInt((ABloopB - ABLoopA) * 100 / 4) 'be light on this
    Return
  Endif
  
  newdelay = CInt(((ABloopB - mptime) * 1000) / 2)
  If newdelay < 50 Then newdelay = 50
  ABLoopTimer.delay = newdelay

End








Public Sub bPrev_Click()
  mplayer.mpv_command(["discnav", "prev"])
End

Public Sub bUp_Click()
  mplayer.mpv_command(["discnav", "up"])
End

Public Sub bMenu_Click()
  mplayer.mpv_command(["discnav", "menu"])
End

Public Sub bLeft_Click()
  mplayer.mpv_command(["discnav", "left"])
End

Public Sub bSelect_Click()
  mplayer.mpv_command(["discnav", "select"])
End

Public Sub bRight_Click()
  mplayer.mpv_command(["discnav", "right"])
End

Public Sub bDown_Click()
  mplayer.mpv_command(["discnav", "down"])
End

Private Sub hide_on_fs(f As Form)
  'attempt to fix a problem with newchains window not appearing
  'when called from fullscreen
  If fsform.FullScreen Then
    f.Hide
    Wait 0.1
  Endif
End



Public Sub GeneralOptionsmenupopup_Click()
  If Not fmain.FullyLoaded Then Return
  Me.mouse = Mouse.Wait
  GeneralOptions.show
  Me.mouse = Mouse.Default
End
Public Sub ChainsMenuPopup_Click()
  If Not fmain.FullyLoaded Then Return
  Me.mouse = Mouse.Wait
  hide_on_fs(newchains)
  NewChains.show
  Me.mouse = Mouse.Default
End
Public Sub VideoFiltersMenuPopup_Click()
  If Not fmain.FullyLoaded Then Return
  Me.mouse = Mouse.Wait
  hide_on_fs(newchains)
  NewChains.show_video_filters()
  Me.mouse = Mouse.Default
End
Public Sub VideoDriversMenuPopup_Click()
  If Not fmain.FullyLoaded Then Return
  Me.mouse = Mouse.Wait
  hide_on_fs(newchains)
  NewChains.show_video_drivers()
  Me.mouse = Mouse.Default
End
Public Sub AudioFiltersMenuPopup_Click()
  If Not fmain.FullyLoaded Then Return
  Me.mouse = Mouse.Wait
  hide_on_fs(newchains)
  NewChains.show_audio_filters()
  Me.mouse = Mouse.Default
End
Public Sub AudioDriversMenuPopup_Click()
  If Not fmain.FullyLoaded Then Return
  Me.mouse = Mouse.Wait
  hide_on_fs(newchains)
  NewChains.show_audio_drivers()
  Me.mouse = Mouse.Default
End
Public Sub SubsAndOsdMenuPopup_Click()
  If Not fmain.FullyLoaded Then Return
  hide_on_fs(subandosd)
  SubAndOsd.show
  Me.mouse = Mouse.Default
End
Public Sub HotKeysMenuPopup_Click()
  If Not fmain.FullyLoaded Then Return
  hide_on_fs(hotkeys)
  HotKeys.show
  Me.mouse = Mouse.Default
End

Public Sub ButtonmenuNEWBTN_click()
  topmenu.popup
End

Public Sub Button6_Click()

    Object.SetProperty(Me, "boh", "dkok")

End



Public Sub sidepanelYTSearchoptions_BeforeArrange()
  Dim lastc As Object = sidepanelYTSearchoptions.Children[sidepanelYTSearchoptions.Children.count - 1]
  sidepanelYTSearchoptions.h = lastc.y + lastc.h + Desktop.scale
  sidepanelYTSearchoptions.visible = YT_search_opts.value
End

 Public Sub YT_search_opts_Click()
   If Not fmain.fullyloaded Then Return
   sidepanelYTSearchoptions.visible = YT_search_opts.value
 End

Public Sub Panel9_Arrange()
    progressshadow.Move(0, 0, progress.Parent.w, progress.parent.h Div 5)
End

Public Sub UrlBox_Enter()
  Last.tooltip = Last.text
End


Public Sub Button_mounts_Click()
  Dim mounted As String[]
  Dim menu_mounts As New Menu(fmain)
  Dim menu_mountpoint As Menu
  Dim mountpoint As String

  Try mounted = global.get_mounted_fss()
  If Error Then 
    Message.Error(("could not get a list of mounted filesystems!"))
  Endif

  menu_mountpoint = New Menu(menu_mounts)

  menu_mountpoint = New Menu(menu_mounts) As "menu_mountpoint"
  menu_mountpoint.text = User.home
  menu_mountpoint.Picture = Picture["icon:/small/home"]

  menu_mountpoint = New Menu(menu_mounts) As "menu_mountpoint"
  menu_mountpoint.text = Desktop.Path
  menu_mountpoint.Picture = Picture["icon:/small/desktop"]

  menu_mountpoint = New Menu(menu_mounts) As "menu_mountpoint"
  menu_mountpoint.Enabled = False
    menu_mountpoint = New Menu(menu_mounts) As "menu_mountpoint"
    menu_mountpoint.text = ("Mountpoints")
    menu_mountpoint.Enabled = False
  menu_mountpoint = New Menu(menu_mounts) As "menu_mountpoint"
  menu_mountpoint.Enabled = False


  For Each mountpoint In mounted
    menu_mountpoint = New Menu(menu_mounts) As "menu_mountpoint"
    menu_mountpoint.text = mountpoint
    menu_mountpoint.Picture = Picture["icon:/small/directory"]
  Next
        'FileView1.dir = Urlbox.text

  menu_mounts.popup
  
End

Public Sub menu_mountpoint_Click()
  urlbox.text = Last.text
  FileView1.dir = Urlbox.text
  Wait
  gridpanels_arrange()
End


Public Struct Xmode
  output_name As String
  mode_name As String
  w As Integer
  h As Integer
  x As Integer
  y As Integer
  r As Float
End Struct


Public Sub Leftsidetabs_Arrange()
   If Not fmain.fullyloaded Then Return
   sidepanelYTSearchoptions.visible = YT_search_opts.value
End

Public Sub switchresBTN_Click()
  menu_modes_MyShow()
End

Public Sub switchresBTN_Menu()
   menu_modes_MyShow()
End


Public Sub menu_modes_MyShow()
  If (Not global.initearlyformsdone) Then InitEarlyForms()
  Make_modes_menu()
  menu_modes.popup
End



Public menu_modes As Menu

Public Sub Make_modes_menu()
  Dim Xm As Xmode
  Dim s_h, s_w, min_h, min_w As Integer = 0
  Dim HZ_ERROR_MAX As Float = 100
  Dim fps As Float = -1
  Dim selected_modes As New String[]
  Dim menu_mode As Menu
  Dim mode As String
  Dim mode_splitted As String[]
  Dim output_name, w, h, hz, err As String
  
  'configure menu is always visible
    menu_modes = New Menu(fmain) As "menu_modes"
    menu_mode = New Menu(menu_modes) As "menu_mode_configure"
    menu_mode.text = ("Configure...")
    menu_mode.picture = Picture["icon:/small/options"]

  'switchres disabled? exit.
    If generaloptions.Switchres_use_CheckBox.value = False Then Return

  If mplayer.ProcessRunningOvr() And (Not mplayer.getP("audioonly")) Then

    'refresh rate condition needs to know the video fps:
      Try fps = CFloat(mplayer.get_property_mpv("container-fps"))
      If Error Then
        Try fps = CFloat(mplayer.get_property_mpv("estimated-vf-fps"))
        If Error Then Return
      Endif
      If generaloptions.Switchres_refresh_checkbox.value = True Then
          '...and set the maximum refresh rate error
          HZ_ERROR_MAX = CFloat(Left(generaloptions.Switchres_refresh_error_combobox.text, -1)) / 100
          Else
        HZ_ERROR_MAX = 9999
      Endif

    'fixed minimum height?
      If generaloptions.Switchres_height_CheckBox.value Then 
        min_h = Left(generaloptions.Switchres_height_Combobox.text, -1)
      Endif
        
    'minimum size dependant on the video?
      If generaloptions.Switchres_W_H_CheckBox2.value = True Then
        Try s_h = CFloat(mplayer.getP("height"))
          If Error Then Return
        Try s_w = CFloat(mplayer.getP("width"))
          If Error Then Return
        min_h = Max(s_h, min_h)
        min_w = s_w
      Endif

    menu_mode = New Menu(menu_modes) 
    menu_mode.text = ("Matching modes")
    menu_mode.Enabled = False
      Else
    menu_mode = New Menu(menu_modes) 
    menu_mode.text = ("All modes")
    menu_mode.Enabled = False
    'just produce a list of all modes:
    fps = 30
    'fixed minimum height?
      If generaloptions.Switchres_height_CheckBox.value Then 
        min_h = Left(generaloptions.Switchres_height_Combobox.text, -1)
      Endif
    HZ_ERROR_MAX = 99999
  Endif
  menu_mode = New Menu(menu_modes) 
  menu_mode.text = ("")

  Xm = randr.Xmode_from_obj(fmain)
  If fps >= 0 Then 
    Try selected_modes = randr.find_modes(Xm.output_name, min_h, min_w, fps, HZ_ERROR_MAX)
    If Error Then Return
  Endif
  If selected_modes = Null Then Return
  
  If selected_modes.count > 0 Then
    For Each mode In selected_modes
      mode_splitted = Split(mode, "|")
      'outputname|modename|w|h|refresh|Refresh_error
      output_name = mode_splitted[0]
      w = mode_splitted[2]
      h = mode_splitted[3]
      hz = mode_splitted[4]
      err = Round(CFloat(mode_splitted[5]), -3)
      menu_mode = New Menu(menu_modes) As "menu_mode"
      menu_mode.tag = mode
      menu_mode.text = output_name & ": " & w & "x" & h & "@" & hz & "hz"
      If mplayer.ProcessRunningOvr() And (Not mplayer.getP("audioonly")) Then 
        menu_mode.text &= " (err: " & err & ")"
      Endif
    Next 'mode
  Endif

End

Public Sub menu_mode_Click()
  Dim mode_splitted As String[]
  Dim output_name, mode_name As String
  Dim err, rate As Float
  Dim speed_compensation As Float


  mode_splitted = Split(Last.tag, "|", "", True)
  output_name = mode_splitted[0]
  mode_name = mode_splitted[1]
  rate = CFloat(mode_splitted[4])
  err = mode_splitted[5]
  randr.change_mode(output_name, mode_name, rate)
  
  'ION1 needs the playback to be seeked if 
  'hardware acceleration is used, so we did it.
    If mplayer.ProcessRunningOvr() Then
      mplayer.do_pause()
      Wait 2
      mplayer.do_seek_to("0", False, False)
      Wait 0.1
    Endif

  If fsform.visible Then
    'needed to update the screen size
    SwitchToWindow()
    Wait 1
    SwitchToFS()
  Endif
  If generaloptions.switchres_compensate_checkbox.value Then
    If mplayer.ProcessRunningOvr() Then 
      If Not mplayer.getP("audioonly") Then
        speed_compensation = 1 - CFloat(err)
        change_speed(speed_compensation)
      Endif
    Endif
  Endif
  
  'ION1 needs the playback to be seeked if 
  'hardware acceleration is used, so we did it.
    If mplayer.ProcessRunningOvr() Then
      mplayer.do_leave_pause()
      mplayer.do_revert_seek()
    Endif
End

Public Sub speed_compensate(Optional HZ_ERROR_MAX As Float = 100)
  Dim mode As Xmode
  Dim r, r1, r2 As Float
  Dim sr2 As String
  Dim Hz_error As Float
  Dim s_fps As Float
  Dim t_int As Integer
  Dim compensation, perfect_refresh As Float

  If Not mplayer.ProcessRunningOvr() Then Return
  If mplayer.getP("audioonly") Then Return
  Try s_fps = mplayer.getP("container-fps")
  If Error Then Return

  'try to get the mode and refresh from xrandr
  mode = randr.Xmode_from_obj(fmain)  
  Try r1 = mode.r
  If Error Then r1 = 0
  'try to get the refresh from mpv
  sr2 = mplayer.get_property_mpv("display-fps", True)
  r2 = 0
  Try r2 = CFloat(sr2)
  
  'see if they are consistent or we failed on xrandr:
  If ((Abs(r1 - r2) < 0.1) Or (r1 = 0)) Then
    'if they are, prefer mpv
    r = r2
      Else
    'if, not, prefer xrandr
    r = r1
  Endif
  global.myDebug("Display refresh rate detected:" & r)

  t_int = Round(r / s_fps)
  perfect_refresh = s_fps * t_int
  Try compensation = r / perfect_refresh
  Hz_error = 1 - compensation 
  If Error Then Return

  HZ_ERROR_MAX = HZ_ERROR_MAX / 100

  If Abs(Hz_error) < (HZ_ERROR_MAX) Then
    change_speed(compensation)
    'Wait 1
    'mplayer.do_pause()
    'Wait 1
    'mplayer.do_leave_pause()
  Endif

End


Public Sub change_speed(factor As Float)
  If factor > 1 Then
    If Lower(mplayer.getP("fullpath")) Like "dvb://*" Then
      global.myDebug("WW: Not going to speedup DVB streams")
    Endif
  Endif
  fmain.mplayer.set_property_mpv("speed", factor)
  fmain.mplayer.ShowText("New speed: " & factor)
End



Public Sub menu_mode_configure_Click()
  GeneralOptions.Show()
  GeneralOptions.OptionsList["Screen"].selected = True
End


Public Sub Timer_mediainfo_Timer()
  Try FillPropertiesGrid()
End

Public Sub Show_and_fill_chapters_tab()
  Dim g As Gridview = chaptersgrid
  Dim c As Integer
  Dim aChapter As Chapter
  Dim iIcon As Picture
  'show
  SetChaptersTabVisibility(True)
  SetActivePlayQueue("chapters")
  
  'and fill if needed
  If chaptersgrid.tag <> mplayer.getP("fullpath") Then
    chaptersgrid.tag = mplayer.getP("fullpath")
    g.clear
    g.rows.count = 0
    g.Columns.count = 1
    
    'get an icon
    iIcon = covermanager.icon_audio("small")
    If mplayer.ProcessRunningOvr() Then 
      If Not (mplayer.getP("audioonly")) Then
        iIcon = covermanager.icon_video("small")
      Endif
    Endif
    
    For Each aChapter In mplayer.get_chapters(True)
      g.rows.count += 1
      g[g.Rows.max, 0].Picture = iIcon
      g[g.Rows.max, 0].text = aChapter.title
    Next
    g.Columns[0].w = -1
  Endif

  Try g.row = mplayer.get_property_mpv("=chapter")

End

Public Sub chaptersGrid_DblClick()
  Dim r As Integer
  Dim g As Gridview = chaptersgrid
  Dim oc As New Collection
  r = g.row
  If Not mplayer.ProcessRunningOvr() Then
    oc["start"] = "#" & CInt(g.row + 1)
    play(chaptersgrid.Tag, oc)
      Else
    mplayer.set_property_mpv("chapter", r)
  Endif
  SetActivePlayQueue("chapters")
End


Public Sub chaptersGrid_KeyPress()
  If (Key.code = Key.Return) Or (Key.code = Key.Enter) Then
    chaptersGrid_DblClick()
  Endif

End



Public Sub ChaptersBtn_click()
  Try menuchapters.popup
End

Public Sub ButtonDeletePls2_Click()
  Desktop.Open(global.ConfPath & "/" & global.UserPlaylistsDir)
End

Public Sub TogglePls_Click()
  If togglepls.value = True Then
    InitTimerQueue()
      Else
    timerqueue.stop
  Endif
End

Public Sub VideoAreaGroup_KeyRelease()
    HotKeysHelper.keyRelease()
End

Public Sub current_display_device() As String
  Return randr.Xmode_from_obj(fmain).output_name
End



Public Sub TextBox2856_activate()
  mplayer.set_property_mpv("af", Last.text, True)
End






Public Sub Button_bookmarks_Click()
  Dim menu_bookmarks As New Menu(fmain)
  Dim menu_bookmark As Menu
  Dim menu_edit_bookmarks As Menu
  Dim bookmarks_data As String[]
  Dim bookmark As String
  menu_bookmark = New Menu(menu_bookmarks)

  If Exist(global.Bookmarksfile, True) Then
    Try bookmarks_data = Split(File.Load(global.Bookmarksfile), "\n", "", True)
    If Error Then 
      global.myDebug("Cannot load boookmarks!")
        Else
      For Each bookmark In bookmarks_data
        menu_bookmark = New Menu(menu_bookmarks) As "menu_selected_bookmark"
        menu_bookmark.text = bookmark
        menu_bookmark.tag = bookmark
        menu_bookmark.Picture = Picture["icon:/small/bookmark"]
      Next
      menu_bookmark = New Menu(menu_bookmarks) As "menu_separator"
      menu_bookmark.Enabled = False
      
      menu_edit_bookmarks = New Menu(menu_bookmarks) As "menu_edit_bookmarks"
      menu_edit_bookmarks.text = ("Edit bookmarks")
      menu_edit_bookmarks.Picture = Picture["icon:/small/edit"]


    Endif
    
  Endif
  menu_bookmark = New Menu(menu_bookmarks) As "menu_add_bookmark"
  menu_bookmark.text = ("Add to bookmarks")
  menu_bookmark.Picture = Picture["icon:/small/add"]
  
  menu_bookmarks.popup
End

Public Sub menu_add_bookmark_click()
  Dim bookmarks As New String[]
  Try bookmarks = Split(File.Load(global.Bookmarksfile), "\n", "", True)
  If bookmarks.Find(fileview1.dir) = -1 Then bookmarks.add(fileview1.Dir)
  Try File.Save(global.Bookmarksfile, bookmarks.Join("\n"))
End


Public Sub menu_selected_bookmark_click()
  urlbox.text = Last.tag
  FileView1.dir = Urlbox.text
  Wait
  gridpanels_arrange()
End

Public Sub menu_edit_bookmarks_click()
  Try Desktop.Open(global.Bookmarksfile)
End




Public Sub VideoAreaGroup_GotFocus()

  Last.Move(-100, -100, 1, 1)

End
